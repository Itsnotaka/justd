{
  "date-and-time/date-field-demo": {
    "component": "@/components/docs/date-and-time/date-field-demo",
    "raw": "'use client'\n\nimport { DateField } from 'ui'\n\nexport default function DateFieldDemo() {\n  return <DateField label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from 'ui'\n\nexport default function DateRangePickerDisabledDemo() {\n  return <DateRangePicker isDisabled label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\nimport { DateRangePicker } from 'ui'\n\nexport default function DateRangePickerControlledDemo() {\n  const now = today(getLocalTimeZone())\n  const tomorrowWeek = today(getLocalTimeZone()).add({ days: 12 })\n  const formatter = useDateFormatter({ dateStyle: 'full' })\n\n  const [value, setValue] = React.useState({\n    start: now,\n    end: tomorrowWeek\n  })\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"divide-y [&_p]:py-2\">\n        <p>\n          {value\n            ? `${formatter.format(value.start.toDate(getLocalTimeZone()))} to ${formatter.format(value.end.toDate(getLocalTimeZone()))}`\n            : '-- to --'}\n        </p>\n        <p>{value ? `${value.start.toString()} to ${value.end.toString()}` : '-- to --'}</p>\n      </div>\n      <DateRangePicker value={value} onChange={setValue} label=\"Event date\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/time-field-disabled-demo",
    "raw": "'use client'\n\nimport { TimeField } from 'ui'\n\nexport default function TimeFieldDisabledDemo() {\n  return <TimeField isDisabled label=\"Event time\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { getLocalTimeZone, parseDate, startOfYear, today } from '@internationalized/date'\nimport { Button, DatePicker, Form } from 'ui'\n\nexport default function DatePickerInvalidDemo() {\n  const ly = startOfYear(today(getLocalTimeZone()))\n  const now = today(getLocalTimeZone())\n  const [value, setValue] = React.useState(parseDate(ly.toString()))\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DatePicker\n        validate={(date) => (date < now ? 'Select a future date, please.' : null)}\n        value={value}\n        onChange={setValue}\n        label=\"Delivery date\"\n        className=\"mb-2\"\n      />\n\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\nimport { DateField } from 'ui'\n\nexport default function DateFieldDisabledDemo() {\n  const now = today(getLocalTimeZone())\n  const [value, setValue] = React.useState(parseDate(now.toString()))\n\n  const formatter = useDateFormatter({ dateStyle: 'full' })\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"divide-y [&_p]:py-2\">\n        <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n        <p>{value ? value.toString() : '--'}</p>\n      </div>\n      <DateField value={value} onChange={setValue} label=\"Event date\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/range-calendar-demo": {
    "component": "@/components/docs/date-and-time/range-calendar-demo",
    "raw": "'use client'\n\nimport { RangeCalendar } from 'ui'\n\nexport default function RangeCalendarDemo() {\n  return <RangeCalendar aria-label=\"Range Calendar\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-time-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-time-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\nimport { DateRangePicker } from 'ui'\n\nexport default function DateRangePickerTimeDemo() {\n  const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n  const tomorrowWeek = today.add({ days: 12 })\n\n  const [value, setValue] = React.useState({\n    start: today,\n    end: tomorrowWeek\n  })\n  return (\n    <DateRangePicker\n      hideTimeZone\n      label=\"Date time range\"\n      value={value}\n      onChange={setValue}\n      hourCycle={24}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-demo": {
    "component": "@/components/docs/date-and-time/date-picker-demo",
    "raw": "'use client'\n\nimport { DatePicker } from 'ui'\n\nexport default function DatePickerDemo() {\n  return <DatePicker label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { Button, DateRangePicker, Form } from 'ui'\n\nexport default function DateRangePickerCustomValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DateRangePicker\n        label=\"Room Booking Dates\"\n        validate={(range) =>\n          range?.end.compare(range.start) > 7 ? 'Maximum booking duration is 1 week.' : null\n        }\n        defaultValue={{\n          start: today(getLocalTimeZone()),\n          end: today(getLocalTimeZone()).add({ weeks: 2 })\n        }}\n        className=\"mb-2\"\n      />\n      <Button type=\"submit\">Book Room</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-validation-demo": {
    "component": "@/components/docs/date-and-time/time-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TimeField } from 'ui'\n\nexport default function TimeFieldValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <TimeField label=\"Event time\" isRequired className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-field-disabled-demo",
    "raw": "'use client'\n\nimport { DateField } from 'ui'\n\nexport default function DateFieldDisabledDemo() {\n  return <DateField isDisabled label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-time-demo": {
    "component": "@/components/docs/date-and-time/date-time-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\nimport { DatePicker } from 'ui'\n\nexport default function DateTimeDemo() {\n  const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n  const [value, setValue] = React.useState(today)\n\n  return (\n    <DatePicker\n      hideTimeZone\n      hourCycle={24}\n      className=\"max-w-xs\"\n      value={value}\n      onChange={setValue}\n      label=\"Event date\"\n    />\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar-demo",
    "raw": "'use client'\n\nimport { Calendar } from 'ui'\n\nexport default function CalendarDemo() {\n  return <Calendar aria-label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from 'ui'\n\nexport default function DateRangePickerDemo() {\n  return <DateRangePicker label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-required-demo": {
    "component": "@/components/docs/date-and-time/date-picker-required-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, DatePicker, Form } from 'ui'\n\nexport default function DatePickerRequiredDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DatePicker label=\"Delivery date\" name=\"deliveryDate\" isRequired className=\"mb-2\" />\n\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-hc-demo": {
    "component": "@/components/docs/date-and-time/time-field-hc-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Time } from '@internationalized/date'\nimport { Switch, TimeField } from 'ui'\n\nexport default function TimeFieldHcDemo() {\n  const [hc, setHc] = React.useState<12 | 24>(24)\n  const [value, setValue] = React.useState(new Time(13, 45))\n  return (\n    <>\n      <OptionPreview>\n        <Switch\n          isSelected={hc === 24}\n          onChange={() => setHc((prevHc) => (prevHc === 24 ? 12 : 24))}\n        >\n          {hc} hour\n        </Switch>\n      </OptionPreview>\n      <TimeField value={value} onChange={setValue} hourCycle={hc} label=\"Event time\" />\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/time-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Time } from '@internationalized/date'\nimport { TimeField } from 'ui'\n\nexport default function TimeFieldValidationDemo() {\n  const [value, setValue] = React.useState(new Time(11, 45))\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"[&_p]:py-2\">\n        <p>{value ? value.toString() : '--'}</p>\n      </div>\n      <TimeField label=\"Event time\" value={value} onChange={setValue} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-time-field-demo": {
    "component": "@/components/docs/date-and-time/date-time-field-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { getLocalTimeZone, now, parseZonedDateTime } from '@internationalized/date'\nimport { DateField } from 'ui'\n\nexport default function DateTimeFieldDemo() {\n  const today = parseZonedDateTime(now(getLocalTimeZone()).toString())\n  const [value, setValue] = React.useState(today)\n  return (\n    <DateField hideTimeZone hourCycle={24} value={value} onChange={setValue} label=\"Event date\" />\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-validation-demo": {
    "component": "@/components/docs/date-and-time/date-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateField, Form } from 'ui'\n\nexport default function DateFieldDisabledDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DateField isRequired label=\"Event date\" className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DatePicker } from 'ui'\n\nexport default function DatePickerDisabledDemo() {\n  return <DatePicker isDisabled label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-demo": {
    "component": "@/components/docs/date-and-time/time-field-demo",
    "raw": "'use client'\n\nimport { Time } from '@internationalized/date'\nimport { TimeField } from 'ui'\n\nexport default function TimeFieldDemo() {\n  return <TimeField defaultValue={new Time()} label=\"Event time\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateRangePicker, Form } from 'ui'\n\nexport default function DateRangePickerValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DateRangePicker isRequired label=\"Event date\" className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\nimport { DatePicker } from 'ui'\n\nexport default function DatePickerControlledDemo() {\n  const now = today(getLocalTimeZone())\n\n  const [value, setValue] = React.useState(parseDate(now.toString()))\n\n  const formatter = useDateFormatter({ dateStyle: 'full' })\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"divide-y [&_p]:py-2\">\n        <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n        <p>{value ? value.toString() : '--'}</p>\n      </div>\n      <DatePicker value={value} onChange={setValue} label=\"Event date\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field-validation-demo": {
    "component": "@/components/docs/forms/text-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from 'ui'\n\nexport default function TextFieldValidationDemo() {\n  return (\n    <Form>\n      <TextField isRequired label=\"Name\" className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox-demo": {
    "component": "@/components/docs/forms/checkbox-demo",
    "raw": "'use client'\n\nimport { Checkbox } from 'ui'\n\nexport default function CheckboxDemo() {\n  return <Checkbox>Enable notifications</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/checkbox-group-demo": {
    "component": "@/components/docs/forms/checkbox-group-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, CheckboxGroup } from 'ui'\n\nexport default function CheckboxGroupDemo() {\n  return (\n    <CheckboxGroup label=\"Settings\">\n      <Checkbox value=\"notifications\">Enable notifications</Checkbox>\n      <Checkbox value=\"auto_update\">Auto-update applications</Checkbox>\n      <Checkbox value=\"dark_mode\">Enable dark mode</Checkbox>\n      <Checkbox value=\"location_access\">Allow location access</Checkbox>\n      <Checkbox value=\"two_factor_auth\">Enable two-factor authentication</Checkbox>\n    </CheckboxGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/search-field-controlled-demo": {
    "component": "@/components/docs/forms/search-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, SearchField } from 'ui'\n\nexport default function SearchFieldControlledDemo() {\n  const [value, setValue] = React.useState('')\n  return (\n    <>\n      <SearchField value={value} onChange={setValue} className=\"mb-2\" />\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have typed: <strong>{value ?? '-'}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox-indeterminate-demo": {
    "component": "@/components/docs/forms/checkbox-indeterminate-demo",
    "raw": "'use client'\n\nimport { Checkbox } from 'ui'\n\nexport default function CheckboxIndeterminateDemo() {\n  return (\n    <Checkbox value=\"read\" isIndeterminate>\n      Read\n    </Checkbox>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field-readonly-demo": {
    "component": "@/components/docs/forms/text-field-readonly-demo",
    "raw": "'use client'\n\nimport { TextField } from 'ui'\n\nexport default function TextFieldReadonlyDemo() {\n  return <TextField isReadOnly label=\"Name\" />\n}\n",
    "type": "docs"
  },
  "forms/input-otp-controlled-demo": {
    "component": "@/components/docs/forms/input-otp-controlled-demo",
    "raw": "import React from 'react'\n\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from 'ui'\n\nexport default function InputOtpControlledDemo() {\n  const [value, setValue] = React.useState('')\n  return (\n    <div className=\"space-y-2\">\n      <InputOTP maxLength={6} value={value} onChange={setValue}>\n        <InputOTPGroup>\n          {[...Array(6)].map((_, index) => (\n            <InputOTPSlot key={index} index={index} />\n          ))}\n        </InputOTPGroup>\n      </InputOTP>\n\n      <div className=\"text-center text-sm\">\n        {value === '' ? <>Enter your one-time password.</> : <>You entered: {value}</>}\n      </div>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/input-otp-separator-demo": {
    "component": "@/components/docs/forms/input-otp-separator-demo",
    "raw": "'use client'\n\nimport { InputOTP, InputOTPGroup, InputOTPSeparator, InputOTPSlot } from 'ui'\n\nexport default function InputOtpSeparatorDemo() {\n  return (\n    <InputOTP maxLength={6}>\n      <InputOTPGroup>\n        <InputOTPSlot index={0} />\n        <InputOTPSlot index={1} />\n        <InputOTPSlot index={2} />\n      </InputOTPGroup>\n      <InputOTPSeparator />\n      <InputOTPGroup>\n        <InputOTPSlot index={3} />\n        <InputOTPSlot index={4} />\n        <InputOTPSlot index={5} />\n      </InputOTPGroup>\n    </InputOTP>\n  )\n}\n",
    "type": "docs"
  },
  "forms/form-validation-demo": {
    "component": "@/components/docs/forms/form-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from 'ui'\n\nexport default function FormValidationDemo() {\n  return (\n    <Form onSubmit={() => {}}>\n      <TextField label=\"Name\" isRequired className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "forms/textarea-demo": {
    "component": "@/components/docs/forms/textarea-demo",
    "raw": "'use client'\n\nimport { Textarea } from 'ui'\n\nexport default function TextareaDemo() {\n  return <Textarea label=\"Address\" />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-description-demo": {
    "component": "@/components/docs/forms/checkbox-description-demo",
    "raw": "'use client'\n\nimport { Checkbox } from 'ui'\n\nexport default function CheckboxDescriptionDemo() {\n  return <Checkbox label=\"Postal Mail\" description=\"Receive notifications via postal mail\" />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-group-description-demo": {
    "component": "@/components/docs/forms/checkbox-group-description-demo",
    "raw": "'use client'\n\nimport { Checkbox, CheckboxGroup } from 'ui'\n\nexport default function CheckboxGroupDescriptionDemo() {\n  return (\n    <CheckboxGroup\n      label=\"User Permissions\"\n      description=\"Select the permissions you want to grant to the user.\"\n    >\n      <Checkbox value=\"read\">Read</Checkbox>\n      <Checkbox value=\"write\">Write</Checkbox>\n      <Checkbox value=\"delete\">Delete</Checkbox>\n      <Checkbox value=\"admin\">Admin</Checkbox>\n    </CheckboxGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/number-field-invalid-demo": {
    "component": "@/components/docs/forms/number-field-invalid-demo",
    "raw": "'use client'\n\nimport { NumberField } from 'ui'\n\nexport default function NumberFieldInvalidDemo() {\n  return <NumberField isInvalid label=\"Cookies\" />\n}\n",
    "type": "docs"
  },
  "forms/number-field-disabled-demo": {
    "component": "@/components/docs/forms/number-field-disabled-demo",
    "raw": "'use client'\n\nimport { NumberField } from 'ui'\n\nexport default function NumberFieldDisabledDemo() {\n  return <NumberField isDisabled label=\"Cookies\" />\n}\n",
    "type": "docs"
  },
  "forms/search-field-disabled-demo": {
    "component": "@/components/docs/forms/search-field-disabled-demo",
    "raw": "'use client'\n\nimport { SearchField } from 'ui'\n\nexport default function SearchFieldDisabledDemo() {\n  return <SearchField isDisabled />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-controlled-demo": {
    "component": "@/components/docs/forms/checkbox-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, Description } from 'ui'\n\nexport default function CheckboxControlledDemo() {\n  const [selected, setSelection] = React.useState(false)\n  return (\n    <>\n      <Checkbox isSelected={selected} onChange={setSelection} value=\"updates\">\n        Receive Updates\n      </Checkbox>\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have <strong>{selected ? 'enabled' : 'disabled'}</strong> the option.\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/tag-field-intent-demo": {
    "component": "@/components/docs/forms/tag-field-intent-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { useListData } from 'react-stately'\nimport { TagField } from 'ui'\n\nexport default function TagFieldIntentDemo() {\n  const selectedItems = useListData({\n    initialItems: [\n      {\n        id: 1,\n        name: 'Laravel'\n      },\n      {\n        id: 2,\n        name: 'Inertia.js'\n      },\n      {\n        id: 3,\n        name: 'React'\n      },\n      {\n        id: 4,\n        name: 'Tailwind CSS'\n      }\n    ]\n  })\n\n  return (\n    <TagField intent=\"secondary\" className=\"max-w-xs\" aria-label=\"Add tag\" list={selectedItems} />\n  )\n}\n",
    "type": "docs"
  },
  "forms/number-field-controlled-demo": {
    "component": "@/components/docs/forms/number-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, NumberField } from 'ui'\n\nexport default function NumberFieldControlledDemo() {\n  const [number, setNumber] = React.useState(1280)\n  return (\n    <div>\n      <NumberField label=\"Width\" value={number} onChange={setNumber} />\n\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have typed: <strong>{number ?? '-'}</strong>\n      </Description>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group-demo": {
    "component": "@/components/docs/forms/radio-group-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupDemo() {\n  return (\n    <RadioGroup label=\"Features\">\n      <Radio value=\"fs\">Font size: Small, Medium, Large</Radio>\n      <Radio value=\"dr\">Display resolution: 1080p, 1440p, 4K</Radio>\n      <Radio value=\"ss\">Sound settings: Mute, Low, Medium, High</Radio>\n      <Radio value=\"bi\">Background image: Default, Custom</Radio>\n      <Radio value=\"ks\">Keyboard shortcuts: Enabled, Disabled</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/textarea-controlled-demo": {
    "component": "@/components/docs/forms/textarea-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Textarea } from 'ui'\n\nexport default function TextareaControlledDemo() {\n  const [value, setValue] = React.useState('')\n  return (\n    <>\n      <Textarea value={value} onChange={setValue} label=\"Address\" className=\"mb-2\" />\n      <p className=\"mt-2\">You have typed: {value ?? '-'}</p>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/tag-field-disabled-demo": {
    "component": "@/components/docs/forms/tag-field-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { useListData } from 'react-stately'\nimport { TagField } from 'ui'\n\nexport default function TagFieldDisabledDemo() {\n  const selectedItems = useListData({\n    initialItems: []\n  })\n\n  return <TagField isDisabled label=\"Add tag\" list={selectedItems} />\n}\n",
    "type": "docs"
  },
  "forms/tag-field-max-demo": {
    "component": "@/components/docs/forms/tag-field-max-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { useListData } from 'react-stately'\nimport { TagField } from 'ui'\n\nexport default function TagFieldMaxDemo() {\n  const selectedItems = useListData({\n    initialItems: []\n  })\n\n  return (\n    <TagField\n      className=\"max-w-sm\"\n      max={3}\n      label=\"Add tag\"\n      description=\"You can only add 3 tags\"\n      list={selectedItems}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "forms/textarea-readonly-demo": {
    "component": "@/components/docs/forms/textarea-readonly-demo",
    "raw": "'use client'\n\nimport { Textarea } from 'ui'\n\nexport default function TextareaReadonlyDemo() {\n  return <Textarea isReadOnly label=\"Address\" />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-invalid-demo": {
    "component": "@/components/docs/forms/checkbox-invalid-demo",
    "raw": "'use client'\n\nimport { Checkbox } from 'ui'\n\nexport default function CheckboxInvalidDemo() {\n  return <Checkbox isInvalid>Enable notifications</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/tag-field-shape-demo": {
    "component": "@/components/docs/forms/tag-field-shape-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { useListData } from 'react-stately'\nimport { TagField } from 'ui'\n\nexport default function TagFieldShapeDemo() {\n  const selectedItems = useListData({\n    initialItems: [\n      {\n        id: 1,\n        name: 'Laravel'\n      },\n      {\n        id: 2,\n        name: 'Inertia.js'\n      }\n    ]\n  })\n\n  return <TagField shape=\"circle\" className=\"max-w-xs\" label=\"Add tag\" list={selectedItems} />\n}\n",
    "type": "docs"
  },
  "forms/search-field-demo": {
    "component": "@/components/docs/forms/search-field-demo",
    "raw": "'use client'\n\nimport { SearchField } from 'ui'\n\nexport default function SearchFieldDemo() {\n  return <SearchField aria-label=\"Search\" placeholder=\"Search\" />\n}\n",
    "type": "docs"
  },
  "forms/tag-field-controlled-demo": {
    "component": "@/components/docs/forms/tag-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { useListData } from 'react-stately'\nimport { Description, TagField } from 'ui'\n\nexport default function TagFieldControlledDemo() {\n  const selectedItems = useListData({\n    initialItems: [{ id: 1, name: 'Ferrari' }]\n  })\n\n  return (\n    <div className=\"max-w-xs\">\n      <TagField\n        appearance=\"outline\"\n        label=\"Add tag\"\n        onItemInserted={(key) => console.log('on item inserted', key)}\n        onItemCleared={(key) => console.log('on item cleared', key)}\n        description=\"You can add multiple tags\"\n        list={selectedItems}\n      />\n      <Description className=\"max-w-xs block [&>strong]:text-fg [&>strong]:text-medium mt-4\">\n        {JSON.stringify(selectedItems.items)}\n      </Description>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group-controlled-demo": {
    "component": "@/components/docs/forms/radio-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupControlledDemo() {\n  const [selected, setSelected] = React.useState('')\n  return (\n    <>\n      <RadioGroup label=\"Features\" value={selected} onChange={setSelected}>\n        <Radio value=\"theme\">Theme</Radio>\n        <Radio value=\"language\">Language</Radio>\n        <Radio value=\"timezone\">Timezone</Radio>\n        <Radio value=\"notifications\">Notifications</Radio>\n        <Radio value=\"privacy\">Privacy</Radio>\n      </RadioGroup>\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have selected: <strong>{selected ?? '-'}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field-prefix-suffix-demo": {
    "component": "@/components/docs/forms/text-field-prefix-suffix-demo",
    "raw": "'use client'\n\nimport { IconBrandTwitter } from 'justd-icons'\nimport { TextField } from 'ui'\n\nexport default function TextFieldPrefixSuffixDemo() {\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <TextField label=\"Twitter\" suffix={<IconBrandTwitter />} />\n      <TextField label=\"Sites\" prefix=\"https://\" suffix=\".com\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/textarea-disabled-demo": {
    "component": "@/components/docs/forms/textarea-disabled-demo",
    "raw": "'use client'\n\nimport { Textarea } from 'ui'\n\nexport default function TextareaDisabledDemo() {\n  return <Textarea isDisabled label=\"Address\" />\n}\n",
    "type": "docs"
  },
  "forms/input-otp-demo": {
    "component": "@/components/docs/forms/input-otp-demo",
    "raw": "'use client'\n\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from 'ui'\n\nexport default function InputOtpDemo() {\n  return (\n    <div>\n      <InputOTP maxLength={6}>\n        <InputOTPGroup>\n          {[...Array(6)].map((_, index) => (\n            <InputOTPSlot key={index} index={index} />\n          ))}\n        </InputOTPGroup>\n      </InputOTP>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group-orientation-demo": {
    "component": "@/components/docs/forms/radio-group-orientation-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupOrientationDemo() {\n  return (\n    <RadioGroup orientation=\"horizontal\" label=\"Payment Method\">\n      <Radio value=\"credit-card\">Credit Card</Radio>\n      <Radio value=\"paypal\">PayPal</Radio>\n      <Radio value=\"apple-pay\">Apple Pay</Radio>\n      <Radio value=\"google-pay\">Google Pay</Radio>\n      <Radio value=\"bank-transfer\">Bank Transfer</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field-demo": {
    "component": "@/components/docs/forms/text-field-demo",
    "raw": "'use client'\n\nimport { TextField } from 'ui'\n\nexport default function TextFieldDemo() {\n  return <TextField label=\"Name\" />\n}\n",
    "type": "docs"
  },
  "forms/textarea-validation-demo": {
    "component": "@/components/docs/forms/textarea-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Form, Textarea } from 'ui'\n\nexport default function TextareaValidationDemo() {\n  const [value, setValue] = React.useState('')\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <Textarea value={value} onChange={setValue} label=\"Address\" isRequired className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "forms/form-demo": {
    "component": "@/components/docs/forms/form-demo",
    "raw": "'use client'\n\nimport { Button, Form, Heading, TextField } from 'ui'\n\nexport default function FormDemo() {\n  return (\n    <div className=\"mx-auto max-w-md py-10\">\n      <Heading level={2} className=\"mb-4\">\n        Register\n      </Heading>\n      <Form onSubmit={() => {}} className=\"space-y-4\">\n        <TextField isRequired label=\"Name\" placeholder=\"Enter your name\" />\n        <TextField isRequired label=\"Email\" placeholder=\"Enter your email\" />\n        <div className=\"grid grid-cols-2 gap-4\">\n          <TextField\n            isRequired\n            label=\"Password\"\n            placeholder=\"Enter your password\"\n            type=\"password\"\n          />\n          <TextField\n            isRequired\n            label=\"Confirm Password\"\n            placeholder=\"Enter your password again\"\n            type=\"password\"\n          />\n        </div>\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group-invalid-demo": {
    "component": "@/components/docs/forms/radio-group-invalid-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupInvalidDemo() {\n  return (\n    <RadioGroup isInvalid label=\"Features\">\n      <Radio value=\"fs\">Font size: Small, Medium, Large</Radio>\n      <Radio value=\"dr\">Display resolution: 1080p, 1440p, 4K</Radio>\n      <Radio value=\"ss\">Sound settings: Mute, Low, Medium, High</Radio>\n      <Radio value=\"bi\">Background image: Default, Custom</Radio>\n      <Radio value=\"ks\">Keyboard shortcuts: Enabled, Disabled</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field-disabled-demo": {
    "component": "@/components/docs/forms/text-field-disabled-demo",
    "raw": "'use client'\n\nimport { TextField } from 'ui'\n\nexport default function TextFieldDisabledDemo() {\n  return <TextField isDisabled label=\"Name\" />\n}\n",
    "type": "docs"
  },
  "forms/radio-group-disabled-demo": {
    "component": "@/components/docs/forms/radio-group-disabled-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupDisabledDemo() {\n  return (\n    <RadioGroup isDisabled label=\"Features\">\n      <Radio value=\"fs\">Font size: Small, Medium, Large</Radio>\n      <Radio value=\"dr\">Display resolution: 1080p, 1440p, 4K</Radio>\n      <Radio value=\"ss\">Sound settings: Mute, Low, Medium, High</Radio>\n      <Radio value=\"bi\">Background image: Default, Custom</Radio>\n      <Radio value=\"ks\">Keyboard shortcuts: Enabled, Disabled</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/number-field-demo": {
    "component": "@/components/docs/forms/number-field-demo",
    "raw": "'use client'\n\nimport { NumberField } from 'ui'\n\nexport default function NumberFieldDemo() {\n  return <NumberField label=\"Cookies\" />\n}\n",
    "type": "docs"
  },
  "forms/tag-field-demo": {
    "component": "@/components/docs/forms/tag-field-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { useListData } from 'react-stately'\nimport { TagField } from 'ui'\n\nexport default function TagFieldDemo() {\n  const selectedItems = useListData({\n    initialItems: [\n      {\n        id: 1,\n        name: 'Laravel'\n      }\n    ]\n  })\n\n  return <TagField className=\"max-w-xs\" label=\"Add tag\" list={selectedItems} />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-disabled-demo": {
    "component": "@/components/docs/forms/checkbox-disabled-demo",
    "raw": "'use client'\n\nimport { Checkbox } from 'ui'\n\nexport default function CheckboxDisabledDemo() {\n  return <Checkbox isDisabled>Enable notifications</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/radio-group-description-demo": {
    "component": "@/components/docs/forms/radio-group-description-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupDescriptionDemo() {\n  return (\n    <RadioGroup\n      description=\"Select your preferred shipping method for the delivery of your items.\"\n      label=\"Shipping Method\"\n    >\n      <Radio value=\"standard\">Standard</Radio>\n      <Radio value=\"express\">Express</Radio>\n      <Radio value=\"overnight\">Overnight</Radio>\n      <Radio value=\"international\">International</Radio>\n      <Radio value=\"pickup\">Pickup</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field-loading-demo": {
    "component": "@/components/docs/forms/text-field-loading-demo",
    "raw": "'use client'\n\nimport { TextField } from 'ui'\n\nexport default function TextFieldLoadingDemo() {\n  return <TextField isLoading indicatorPlace=\"suffix\" label=\"Name\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field-controlled-demo": {
    "component": "@/components/docs/forms/text-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, TextField } from 'ui'\n\nexport default function TextFieldControlledDemo() {\n  const [value, setValue] = React.useState('')\n  return (\n    <>\n      <TextField value={value} onChange={setValue} label=\"Name\" className=\"mb-2\" />\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have typed: <strong>{value ?? '-'}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/search-field-with-label-demo": {
    "component": "@/components/docs/forms/search-field-with-label-demo",
    "raw": "'use client'\n\nimport { SearchField } from 'ui'\n\nexport default function SearchFieldWithLabelDemo() {\n  return <SearchField label=\"Search\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field-suffix-button-demo": {
    "component": "@/components/docs/forms/text-field-suffix-button-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconPlus } from 'justd-icons'\nimport { Button, Modal, TextField } from 'ui'\n\nexport default function TextFieldSuffixButtonDemo() {\n  const [open, setOpen] = React.useState(false)\n  const close = () => setOpen(false)\n  return (\n    <>\n      <Modal.Content isOpen={open} onOpenChange={close}>\n        <Modal.Header>\n          <Modal.Title>New User</Modal.Title>\n          <Modal.Description>Create a new user account</Modal.Description>\n        </Modal.Header>\n        <Modal.Body className=\"flex flex-col gap-4\">\n          <TextField label=\"Username\" placeholder=\"Username\" />\n          <TextField label=\"Email\" placeholder=\"Email\" type=\"email\" />\n        </Modal.Body>\n        <Modal.Footer>\n          <Modal.Close appearance=\"outline\">Cancel</Modal.Close>\n          <Button onPress={close}>Continue</Button>\n        </Modal.Footer>\n      </Modal.Content>\n      <TextField\n        label=\"Username\"\n        suffix={\n          <Button aria-label=\"New user\" onPress={() => setOpen(true)} appearance=\"outline\">\n            <IconPlus />\n          </Button>\n        }\n      />\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group-children-description-demo": {
    "component": "@/components/docs/forms/radio-group-children-description-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupChildrenDescriptionDemo() {\n  return (\n    <RadioGroup orientation=\"horizontal\">\n      <Radio value=\"basic\" description=\"Basic plan with limited features\">\n        Basic\n      </Radio>\n      <Radio value=\"standard\" description=\"Standard plan with more features\">\n        Standard\n      </Radio>\n      <Radio value=\"premium\" description=\"Premium plan with all features\">\n        Premium\n      </Radio>\n      <Radio value=\"family\" description=\"Family plan for multiple users\">\n        Family\n      </Radio>\n      <Radio value=\"student\" description=\"Discounted plan for students\">\n        Student\n      </Radio>\n      <Radio value=\"custom\">Custom</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox-group-disabled-demo": {
    "component": "@/components/docs/forms/checkbox-group-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, CheckboxGroup } from 'ui'\n\nexport default function CheckboxDisabledDemo() {\n  return (\n    <CheckboxGroup isDisabled label=\"Settings\">\n      <Checkbox value=\"notifications\">Enable notifications</Checkbox>\n      <Checkbox value=\"auto_update\">Auto-update applications</Checkbox>\n      <Checkbox value=\"dark_mode\">Enable dark mode</Checkbox>\n      <Checkbox value=\"location_access\">Allow location access</Checkbox>\n      <Checkbox value=\"two_factor_auth\">Enable two-factor authentication</Checkbox>\n    </CheckboxGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox-group-controlled-demo": {
    "component": "@/components/docs/forms/checkbox-group-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, CheckboxGroup, Description } from 'ui'\n\nexport default function CheckboxGroupControlledDemo() {\n  const [values, setValues] = React.useState<string[]>([])\n  return (\n    <>\n      <CheckboxGroup value={values} onChange={setValues} label=\"Options\">\n        <Checkbox value=\"sound\">Sound</Checkbox>\n        <Checkbox value=\"wifi\">Wi-Fi</Checkbox>\n        <Checkbox value=\"sync\">Sync</Checkbox>\n      </CheckboxGroup>\n\n      <Description className=\"flex flex-col gap-y-1 h-10 mt-2 [&>strong]:text-fg [&>strong]:font-medium\">\n        {values.length > 0 ? (\n          <>\n            Selected values <strong className=\"font-medium\">{values.join(', ')}</strong>\n          </>\n        ) : (\n          'No values selected'\n        )}\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/tag-field-appearance-demo": {
    "component": "@/components/docs/forms/tag-field-appearance-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { useListData } from 'react-stately'\nimport { TagField } from 'ui'\n\nexport default function TagFieldAppearanceDemo() {\n  const selectedItems = useListData({\n    initialItems: []\n  })\n\n  return <TagField appearance=\"plain\" placeholder=\"Tags...\" list={selectedItems} />\n}\n",
    "type": "docs"
  },
  "forms/search-field-validation-demo": {
    "component": "@/components/docs/forms/search-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, SearchField } from 'ui'\n\nexport default function SearchFieldValidationDemo() {\n  return (\n    <Form>\n      <SearchField isRequired label=\"Name\" className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-disabled-demo": {
    "component": "@/components/docs/buttons/file-trigger-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, FileTrigger } from 'ui'\n\nexport default function FileTriggerDemo() {\n  const [file, setFile] = React.useState<string[] | null>(null)\n  return (\n    <>\n      <FileTrigger\n        isDisabled\n        onSelect={(e) => {\n          const files = Array.from(e ?? [])\n          const filenames = files.map((file) => file.name)\n          setFile(filenames)\n        }}\n      />\n      {file && <Description>{file}</Description>}\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-intent-demo": {
    "component": "@/components/docs/buttons/button-intent-demo",
    "raw": "'use client'\n\nimport { IconBackspace } from 'justd-icons'\nimport { Button, gridStyles } from 'ui'\n\nexport default function ButtonIntentDemo() {\n  return (\n    <div className={gridStyles({ columns: { initial: 2, sm: 3, lg: 4 }, gap: 3 })}>\n      <Button intent=\"warning\"> Label</Button>\n      <Button intent=\"light\">Label</Button>\n      <Button intent=\"secondary\">Label</Button>\n      <Button intent=\"danger\">Label</Button>\n      <Button intent=\"info\">\n        <IconBackspace />\n        Label\n      </Button>\n      <Button intent=\"light/dark\">Label</Button>\n      <Button intent=\"success\">Label</Button>\n      <Button>Label</Button>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-folder-demo": {
    "component": "@/components/docs/buttons/file-trigger-folder-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from 'ui'\n\nexport default function FileTriggerFolderDemo() {\n  return <FileTrigger acceptDirectory />\n}\n",
    "type": "docs"
  },
  "buttons/toggle-disabled-demo": {
    "component": "@/components/docs/buttons/toggle-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconPin } from 'justd-icons'\nimport { Toggle } from 'ui'\n\nexport default function ToggleDisabledDemo() {\n  return (\n    <Toggle size=\"square-petite\" isDisabled>\n      <IconPin />\n    </Toggle>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-demo": {
    "component": "@/components/docs/buttons/file-trigger-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { FileTrigger } from 'ui'\n\nexport default function FileTriggerDemo() {\n  return <FileTrigger />\n}\n",
    "type": "docs"
  },
  "buttons/button-icon-demo": {
    "component": "@/components/docs/buttons/button-icon-demo",
    "raw": "'use client'\n\nimport { IconBrandLaravel } from 'justd-icons'\nimport { Button } from 'ui'\n\nexport default function ButtonIconDemo() {\n  return (\n    <Button intent=\"danger\">\n      <IconBrandLaravel />\n      Laravel\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-appearance-demo": {
    "component": "@/components/docs/buttons/toggle-appearance-demo",
    "raw": "'use client'\n\nimport { Toggle } from 'ui'\n\nexport default function ToggleAppearanceDemo() {\n  return (\n    <div className=\"flex gap-2\">\n      <Toggle>{({ isSelected }) => <>{isSelected ? 'Unpin' : 'Pin'}</>}</Toggle>\n      <Toggle appearance=\"outline\">\n        {({ isSelected }) => <>{isSelected ? 'Unpin' : 'Pin'}</>}\n      </Toggle>\n      <Toggle appearance=\"solid\">{({ isSelected }) => <>{isSelected ? 'Unpin' : 'Pin'}</>}</Toggle>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-loader-demo": {
    "component": "@/components/docs/buttons/button-loader-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconCircleCheckFill, IconKey } from 'justd-icons'\nimport { Button, Loader } from 'ui'\n\nexport default function ButtonLoaderDemo() {\n  const [loading, setLoading] = useState<'idle' | 'loading' | 'success'>('idle')\n\n  const pressHandler = () => {\n    setLoading('loading')\n\n    setTimeout(() => setLoading('success'), 3000)\n\n    setTimeout(() => setLoading('idle'), 6000)\n  }\n\n  return (\n    <Button\n      isDisabled={loading === 'loading'}\n      className=\"w-52 justify-between\"\n      onPress={pressHandler}\n      intent=\"primary\"\n    >\n      {loading === 'success' ? (\n        <IconCircleCheckFill />\n      ) : loading === 'loading' ? (\n        <Loader variant=\"spin\" />\n      ) : (\n        <IconKey />\n      )}\n      {loading === 'loading'\n        ? 'Generating Key...'\n        : loading === 'success'\n          ? 'Key Generated!'\n          : 'Generate API Key'}\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-shape-demo": {
    "component": "@/components/docs/buttons/toggle-shape-demo",
    "raw": "'use client'\n\nimport { Toggle } from 'ui'\n\nexport default function ToggleShapeDemo() {\n  return (\n    <Toggle appearance=\"outline\" shape=\"circle\">\n      {({ isSelected }) => <>{isSelected ? 'Unpin' : 'Pin'}</>}\n    </Toggle>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-controlled-demo": {
    "component": "@/components/docs/buttons/file-trigger-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, FileTrigger } from 'ui'\n\nexport default function FileTriggerDemo() {\n  const [file, setFile] = React.useState<string[] | null>(null)\n  return (\n    <>\n      <FileTrigger\n        onSelect={(e) => {\n          const files = Array.from(e ?? [])\n          const filenames = files.map((file) => file.name)\n          setFile(filenames)\n        }}\n      />\n      {file && (\n        <Description className=\"truncate max-w-60 [&>strong]:font-medium block [&>strong]:text-fg mt-2\">\n          Your file: <strong>{file}</strong>\n        </Description>\n      )}\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-disabled-demo": {
    "component": "@/components/docs/buttons/button-disabled-demo",
    "raw": "'use client'\n\nimport { Button } from 'ui'\n\nexport default function ButtonDisabledDemo() {\n  return <Button isDisabled>Label</Button>\n}\n",
    "type": "docs"
  },
  "buttons/button-only-icon-demo": {
    "component": "@/components/docs/buttons/button-only-icon-demo",
    "raw": "'use client'\n\nimport { IconBrandParsinta } from 'justd-icons'\nimport { Button } from 'ui'\n\nexport default function ButtonOnlyIconDemo() {\n  return (\n    <Button size=\"square-petite\" appearance=\"outline\">\n      <IconBrandParsinta />\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-size-demo": {
    "component": "@/components/docs/buttons/button-size-demo",
    "raw": "'use client'\n\nimport { Button } from 'ui'\n\nexport default function ButtonSizeDemo() {\n  return (\n    <div className=\"flex gap-2\">\n      <Button size=\"extra-small\">Label</Button>\n      <Button size=\"small\">Label</Button>\n      <Button>Label</Button>\n      <Button size=\"large\">Label</Button>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-demo": {
    "component": "@/components/docs/buttons/toggle-demo",
    "raw": "'use client'\n\nimport { Toggle } from 'ui'\n\nexport default function ToggleDemo() {\n  return <Toggle>{({ isSelected }) => <>{isSelected ? 'Unpin' : 'Pin'}</>}</Toggle>\n}\n",
    "type": "docs"
  },
  "buttons/button-shape-demo": {
    "component": "@/components/docs/buttons/button-shape-demo",
    "raw": "'use client'\n\nimport { Button } from 'ui'\n\nexport default function ButtonShapeDemo() {\n  return <Button shape=\"circle\">Label</Button>\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-multiple-demo": {
    "component": "@/components/docs/buttons/file-trigger-multiple-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from 'ui'\n\nexport default function FileTriggerMultipleDemo() {\n  return <FileTrigger allowsMultiple />\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-camera-demo": {
    "component": "@/components/docs/buttons/file-trigger-camera-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from 'ui'\n\nexport default function FileTriggerCameraDemo() {\n  return <FileTrigger defaultCamera=\"environment\">Open a camera</FileTrigger>\n}\n",
    "type": "docs"
  },
  "buttons/button-basic-demo": {
    "component": "@/components/docs/buttons/button-basic-demo",
    "raw": "'use client'\n\nimport { Button } from 'ui'\n\nexport default function ButtonBasicDemo() {\n  return <Button onPress={() => alert('Pressed')}>Label</Button>\n}\n",
    "type": "docs"
  },
  "buttons/button-appearance-demo": {
    "component": "@/components/docs/buttons/button-appearance-demo",
    "raw": "'use client'\n\nimport title from 'title'\nimport { Button, buttonStyles } from 'ui'\n\ntype Appearance = keyof typeof buttonStyles.variants.appearance\n\nexport default function ButtonAppearanceDemo() {\n  return (\n    <div className=\"flex flex-col gap-2 md:flex-row md:flex-wrap\">\n      {Object.keys(buttonStyles.variants.appearance).map((appearance) => (\n        <div key={appearance}>\n          <Button appearance={appearance as Appearance}>{title(appearance)}</Button>\n        </div>\n      ))}\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-size-demo": {
    "component": "@/components/docs/buttons/toggle-size-demo",
    "raw": "'use client'\n\nimport { IconAccessible, IconAccessibleFill } from 'justd-icons'\nimport { Toggle } from 'ui'\n\nexport default function ToggleSizeDemo() {\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      <Toggle appearance=\"outline\" size=\"square-petite\">\n        {({ isSelected }) => <>{isSelected ? <IconAccessibleFill /> : <IconAccessible />}</>}\n      </Toggle>\n      <Toggle appearance=\"outline\" size=\"small\">\n        {({ isSelected }) => <>{isSelected ? 'Unpin' : 'Pin'}</>}\n      </Toggle>\n      <Toggle appearance=\"outline\" size=\"medium\">\n        {({ isSelected }) => <>{isSelected ? 'Unpin' : 'Pin'}</>}\n      </Toggle>\n      <Toggle appearance=\"outline\" size=\"large\">\n        {({ isSelected }) => <>{isSelected ? 'Unpin' : 'Pin'}</>}\n      </Toggle>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-controlled-demo": {
    "component": "@/components/docs/buttons/toggle-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconPin, IconUnpin } from 'justd-icons'\nimport { Toggle } from 'ui'\n\nexport default function ToggleControlledDemo() {\n  const [isSelected, setSelected] = React.useState(false)\n  return (\n    <Toggle size=\"square-petite\" isSelected={isSelected} onChange={setSelected}>\n      {({ isSelected }) => <>{isSelected ? <IconUnpin /> : <IconPin />}</>}\n    </Toggle>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-avatar-demo": {
    "component": "@/components/docs/buttons/file-trigger-avatar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { DropEvent } from '@react-types/shared'\nimport { isFileDropItem } from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { Avatar, DropZone, FileTrigger } from 'ui'\n\nexport default function FileTriggerAvatarDemo() {\n  const [droppedImage, setDroppedImage] = React.useState<string | undefined>(undefined)\n\n  const onDropHandler = async (e: DropEvent) => {\n    const item = e.items\n      .filter(isFileDropItem)\n      .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n    if (item) {\n      const file = await item.getFile()\n      setDroppedImage(URL.createObjectURL(file))\n    }\n  }\n\n  async function onSelectHandler(e: any) {\n    if (e) {\n      const files = Array.from([...e])\n      const item = files[0]\n\n      if (item) {\n        setDroppedImage(URL.createObjectURL(item))\n      }\n    }\n  }\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <DropZone\n        getDropOperation={() => 'copy'}\n        onDrop={onDropHandler}\n        className={twJoin(\n          '[&_[data-slot=avatar]]:bg-transparent [&_[data-slot=avatar]]:outline-none rounded-full p-0 overflow-hidden size-10'\n        )}\n      >\n        {droppedImage ? (\n          <Avatar src={droppedImage} size=\"large\" />\n        ) : (\n          <Avatar initials=\"IA\" size=\"large\" />\n        )}\n        <input type=\"hidden\" name=\"image\" value={droppedImage} />\n      </DropZone>\n      <FileTrigger\n        size=\"small\"\n        withIcon={false}\n        acceptedFileTypes={['image/png', 'image/jpeg']}\n        onSelect={onSelectHandler}\n      >\n        Upload avatar\n      </FileTrigger>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-link-demo": {
    "component": "@/components/docs/buttons/button-link-demo",
    "raw": "'use client'\n\nimport { buttonStyles, Link } from 'ui'\n\nexport default function ButtonLinkDemo() {\n  return (\n    <Link\n      className={buttonStyles({ intent: 'info' })}\n      href=\"/docs/components/collections/choicebox\"\n    >\n      Choicebox\n    </Link>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover-controlled-demo": {
    "component": "@/components/docs/overlays/popover-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { wait } from '@/resources/lib/utils'\nimport { IconCircleCheckFill, IconTrash } from 'justd-icons'\nimport { Button, Loader, Popover } from 'ui'\n\nexport default function PopoverControlledDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  const [loading, setLoading] = React.useState<'idle' | 'loading' | 'success'>('idle')\n  const triggerRef = React.useRef(null)\n\n  const deleteAccount = async () => {\n    setLoading('loading')\n    await wait(3000)\n    setLoading('success')\n\n    await wait(2000)\n    setLoading('idle')\n    setIsOpen(false)\n  }\n  return (\n    <>\n      <Button ref={triggerRef} onPress={() => setIsOpen(true)} intent=\"danger\">\n        Delete Account\n      </Button>\n      <Popover.Content\n        triggerRef={triggerRef}\n        isOpen={isOpen}\n        onOpenChange={setIsOpen}\n        className=\"sm:max-w-sm\"\n      >\n        <Popover.Header>\n          <Popover.Title>Confirm Deletion</Popover.Title>\n          <Popover.Description>\n            Are you sure you want to delete your account? This action cannot be undone.\n          </Popover.Description>\n        </Popover.Header>\n        <Popover.Footer>\n          <Button appearance=\"outline\" onPress={() => setIsOpen(false)} className=\"mr-2\">\n            Cancel\n          </Button>\n          <Button\n            isDisabled={loading === 'loading'}\n            onPress={deleteAccount}\n            intent={['loading', 'idle'].includes(loading) ? 'danger' : 'success'}\n          >\n            {loading === 'loading' ? (\n              <>\n                <Loader variant=\"spin\" />\n                Deleting...\n              </>\n            ) : loading === 'success' ? (\n              <>\n                <IconCircleCheckFill />\n                Deleted\n              </>\n            ) : (\n              <>\n                <IconTrash />\n                Delete\n              </>\n            )}\n          </Button>\n        </Popover.Footer>\n      </Popover.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-custom-style-demo": {
    "component": "@/components/docs/overlays/sheet-custom-style-demo",
    "raw": "'use client'\n\nimport { Button, Form, Note, Sheet, TextField } from 'ui'\n\nexport default function SheetCustomStyleDemo() {\n  return (\n    <Sheet>\n      <Button intent=\"warning\">Archive Project</Button>\n      <Sheet.Content role=\"dialog\">\n        <Sheet.Header\n          className=\"bg-background border-b mb-4\"\n          title=\"Archive Project\"\n          description=\"Archiving this project will disable access and hide it from active projects.\"\n        >\n          <Note intent=\"warning\">You can restore the project anytime from the archive!</Note>\n        </Sheet.Header>\n        <Form className=\"overflow-y-auto flex-1\" onSubmit={() => {}}>\n          <Sheet.Body className=\"space-y-4\">\n            <TextField\n              isRequired\n              autoFocus\n              label=\"Confirm by typing the project name\"\n              type=\"text\"\n              placeholder=\"team/project-name\"\n            />\n            <TextField isRequired label='To verify, type \"archive my project\" below' type=\"text\" />\n          </Sheet.Body>\n          <Sheet.Footer>\n            <Sheet.Close>Cancel</Sheet.Close>\n            <Button intent=\"warning\" type=\"submit\">\n              Archive Project\n            </Button>\n          </Sheet.Footer>\n        </Form>\n      </Sheet.Content>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/modal-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { wait } from '@/resources/lib/utils'\nimport { IconDotsVertical } from 'justd-icons'\nimport { Button, buttonStyles, LoadingDots, Menu, Modal } from 'ui'\n\nexport default function ModalTriggeredByMenuDemo() {\n  const [state, setState] = React.useState<string | null>(null)\n  const [loading, setLoading] = React.useState<boolean>(false)\n  const closeModal = () => setState(null)\n  const executeAction = (action: string) => {\n    console.log(`${action} is executing`)\n    setLoading(true)\n    wait(2000).then(() => {\n      setLoading(false)\n      closeModal()\n    })\n  }\n\n  const actionType = (t: string | null) => {\n    switch (t) {\n      case 'delete':\n        return {\n          title: 'Delete User',\n          description: 'Are you sure you want to delete this item?',\n          confirmText: 'Delete',\n          action: () => executeAction(t)\n        }\n\n      case 'ban':\n        return {\n          title: 'Ban User',\n          description: 'Are you sure you want to ban this user?',\n          confirmText: 'Ban',\n          action: () => executeAction(t)\n        }\n\n      case 'restore':\n        return {\n          title: 'Restore User',\n          description: 'Are you sure you want to restore this user?',\n          confirmText: 'Restore',\n          action: () => executeAction(t)\n        }\n      default:\n        return\n    }\n  }\n  return (\n    <>\n      <Menu>\n        <Menu.Trigger className={buttonStyles({ appearance: 'outline' })}>\n          <IconDotsVertical />\n        </Menu.Trigger>\n        <Menu.Content placement=\"bottom\">\n          <Menu.Item onAction={() => setState('delete')}>Delete</Menu.Item>\n          <Menu.Item onAction={() => setState('ban')}>Ban</Menu.Item>\n          <Menu.Item onAction={() => setState('restore')}>Restore</Menu.Item>\n        </Menu.Content>\n      </Menu>\n\n      <Modal.Content isOpen={state !== null} onOpenChange={closeModal}>\n        <Modal.Header>\n          <Modal.Title>{actionType(state)?.title}</Modal.Title>\n          <Modal.Description>{actionType(state)?.description}</Modal.Description>\n        </Modal.Header>\n        <Modal.Footer>\n          <Modal.Close>Cancel</Modal.Close>\n          <Button className=\"min-w-24\" isDisabled={loading} onPress={actionType(state)?.action}>\n            {loading ? <LoadingDots className={'bg-fg'} /> : actionType(state)?.confirmText}\n          </Button>\n        </Modal.Footer>\n      </Modal.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover-placement-demo": {
    "component": "@/components/docs/overlays/popover-placement-demo",
    "raw": "'use client'\n\nimport { type TooltipProps } from 'react-aria-components'\nimport { Button, Popover } from 'ui'\n\ntype Placement = Pick<TooltipProps, 'placement'>['placement']\nconst placements: Placement[] = ['bottom', 'top', 'left', 'start', 'right', 'end']\nexport default function PopoverPlacementDemo() {\n  return (\n    <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-2 [&_.kbt32x]:w-full\">\n      {placements.map((placement, idx) => (\n        <Popover key={idx}>\n          <Button className=\"mx-auto\" size=\"small\" appearance=\"outline\">\n            {placement}\n          </Button>\n          <Popover.Content placement={placement}>\n            Popover shown at <strong>{placement}</strong>.\n          </Popover.Content>\n        </Popover>\n      ))}\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/tooltip-delay-demo": {
    "component": "@/components/docs/overlays/tooltip-delay-demo",
    "raw": "'use client'\n\nimport { IconBrandGithub } from 'justd-icons'\nimport { buttonStyles, Tooltip, TooltipContent, TooltipTrigger } from 'ui'\n\nexport default function TooltipDelayDemo() {\n  return (\n    <div className=\"flex gap-2\">\n      <Tooltip delay={0}>\n        <TooltipTrigger\n          aria-label=\"Follow My Twitter\"\n          className={buttonStyles({\n            appearance: 'outline',\n            size: 'square-petite'\n          })}\n        >\n          <IconBrandGithub />\n        </TooltipTrigger>\n        <TooltipContent>Follow me on Github @irsyadadl</TooltipContent>\n      </Tooltip>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-custom-close-demo": {
    "component": "@/components/docs/overlays/sheet-custom-close-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Checkbox, CheckboxGroup, Sheet } from 'ui'\n\nexport default function SheetControlledDemo() {\n  return (\n    <Sheet>\n      <Button appearance=\"outline\">Notifications</Button>\n      <Sheet.Content aria-label=\"Notifications\">\n        <Sheet.Header>\n          <Sheet.Title>Manage Notifications</Sheet.Title>\n          <Sheet.Description>Adjust your notification settings below.</Sheet.Description>\n        </Sheet.Header>\n        <Sheet.Body>\n          <CheckboxGroup aria-label=\"Notification Settings\">\n            <Checkbox\n              value=\"n1\"\n              label=\"Email Notifications\"\n              description=\"Receive updates via email.\"\n            />\n            <Checkbox\n              value=\"n2\"\n              label=\"SMS Notifications\"\n              description=\"Receive updates via SMS messages.\"\n            />\n            <Checkbox\n              value=\"n3\"\n              label=\"Push Notifications\"\n              description=\"Receive real-time notifications on your device.\"\n            />\n          </CheckboxGroup>\n        </Sheet.Body>\n        <Sheet.Footer>\n          <Sheet.Close>Cancel</Sheet.Close>\n          <Button intent=\"primary\">Save Settings</Button>\n        </Sheet.Footer>\n      </Sheet.Content>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/tooltip-demo": {
    "component": "@/components/docs/overlays/tooltip-demo",
    "raw": "'use client'\n\nimport { IconBrandX } from 'justd-icons'\nimport { buttonStyles, Tooltip, TooltipContent, TooltipTrigger } from 'ui'\n\nexport default function TooltipDemo() {\n  return (\n    <div className=\"flex gap-2\">\n      <Tooltip>\n        <TooltipTrigger\n          aria-label=\"Follow My Twitter\"\n          className={buttonStyles({\n            appearance: 'outline',\n            size: 'square-petite'\n          })}\n        >\n          <IconBrandX />\n        </TooltipTrigger>\n        <TooltipContent>Follow me on X @irsyadadl</TooltipContent>\n      </Tooltip>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-menu-demo": {
    "component": "@/components/docs/overlays/sheet-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n  IconBook,\n  IconBookOpen,\n  IconBrandCopilot,\n  IconBrandGithub,\n  IconBuilding,\n  IconChart,\n  IconCodeBrackets,\n  IconFilter,\n  IconGear,\n  IconGlobe,\n  IconHeart,\n  IconLogout,\n  IconMessages,\n  IconPeople,\n  IconPerson,\n  IconStar\n} from 'justd-icons'\nimport { Group } from 'react-aria-components'\nimport { Avatar, Button, Checkbox, Description, Menu, Modal, Select, Sheet, TextField } from 'ui'\n\nexport default function SheetMenuDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  const openModal = () => setIsOpen(true)\n  const closeModal = () => setIsOpen(false)\n  return (\n    <>\n      <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n        <Modal.Header>\n          <Modal.Title>Edit status</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"space-y-4\">\n            <TextField\n              prefix={<IconBrandGithub />}\n              label=\"Status\"\n              placeholder=\"What's your status?\"\n            />\n            <Group>\n              <Checkbox>Busy</Checkbox>\n              <Description>\n                When others mention you, assign you, or request your review, GitHub will let them\n                know that you have limited availability.\n              </Description>\n            </Group>\n            <Select label=\"Clear Status\">\n              <Select.Trigger />\n              <Select.List>\n                <Select.Option>Never</Select.Option>\n                <Select.Option>in 30 Minutes</Select.Option>\n                <Select.Option>in 1 Hour</Select.Option>\n                <Select.Option>in 8 Hours</Select.Option>\n                <Select.Option>after Today</Select.Option>\n                <Select.Option>after a Week</Select.Option>\n                <Select.Option>after a Month</Select.Option>\n              </Select.List>\n            </Select>\n            <Select label=\"Visible to\">\n              <Select.List>\n                <Select.Option>Everyone</Select.Option>\n                <Select.Option>Organization</Select.Option>\n                <Select.Option>Public</Select.Option>\n              </Select.List>\n            </Select>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Modal.Close>Clear Status</Modal.Close>\n          <Button onPress={closeModal}>Set Status</Button>\n        </Modal.Footer>\n      </Modal.Content>\n      <Sheet>\n        <Sheet.Trigger aria-label=\"Open menu\">\n          <Avatar src=\"https://github.com/irsyadadl.png\" alt=\"irsyadadl\" />\n        </Sheet.Trigger>\n        <Sheet.Content classNames={{ content: '[&_.dlc]:p-0' }} closeButton={false}>\n          <Sheet.Header className=\"flex border-b p-4 sticky top-0 bg-overlay flex-row items-center gap-x-3 mb-2\">\n            <Avatar src=\"https://github.com/irsyadadl.png\" alt=\"irsyadadl\" />\n            <div>\n              <Sheet.Title>irsyadadl</Sheet.Title>\n              <Sheet.Description>Irsyad A. Panjaitan</Sheet.Description>\n            </div>\n          </Sheet.Header>\n          <Sheet.Body className=\"px-0\">\n            <Menu.Content className=\"divide-y [&_.xss3]:p-2\">\n              <Menu.Section>\n                <Menu.Item onAction={openModal}>\n                  <IconBrandGithub />\n                  Edit Status\n                </Menu.Item>\n              </Menu.Section>\n              <Menu.Section>\n                <Menu.Item>\n                  <IconPerson />\n                  Your profile\n                </Menu.Item>\n                <Menu.Item>\n                  <IconBook /> Your repositories\n                </Menu.Item>\n                <Menu.Item>\n                  <IconBrandCopilot /> Your Copilot\n                </Menu.Item>\n                <Menu.Item>\n                  <IconChart /> Your projects\n                </Menu.Item>\n                <Menu.Item>\n                  <IconStar /> Your stars\n                </Menu.Item>\n                <Menu.Item>\n                  <IconCodeBrackets /> Your gists\n                </Menu.Item>\n                <Menu.Item>\n                  <IconBuilding /> Your organizations\n                </Menu.Item>\n                <Menu.Item>\n                  <IconGlobe /> Your enterprises\n                </Menu.Item>\n                <Menu.Item>\n                  <IconHeart />\n                  Your sponsors\n                </Menu.Item>\n              </Menu.Section>\n              <Menu.Section>\n                <Menu.Item>\n                  <IconFilter /> Feature preview\n                </Menu.Item>\n                <Menu.Item>\n                  <IconGear />\n                  Settings\n                </Menu.Item>\n              </Menu.Section>\n              <Menu.Section>\n                <Menu.Item>\n                  <IconBookOpen /> GitHub Docs\n                </Menu.Item>\n                <Menu.Item>\n                  <IconPeople /> GitHub Support\n                </Menu.Item>\n                <Menu.Item>\n                  <IconMessages /> GitHub Community\n                </Menu.Item>\n              </Menu.Section>\n              <Menu.Section>\n                <Menu.Item>\n                  <IconLogout /> Sign out\n                </Menu.Item>\n              </Menu.Section>\n            </Menu.Content>\n          </Sheet.Body>\n        </Sheet.Content>\n      </Sheet>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/tooltip-placement-demo": {
    "component": "@/components/docs/overlays/tooltip-placement-demo",
    "raw": "'use client'\n\nimport { type TooltipProps } from 'react-aria-components'\nimport { Button, Tooltip, TooltipContent } from 'ui'\n\ntype Placement = Pick<TooltipProps, 'placement'>['placement']\nconst placements: Placement[] = ['bottom', 'top', 'left', 'start', 'right', 'end']\nexport default function TooltipPlacementDemo() {\n  return (\n    <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-2 [&_.kbt32x]:w-full\">\n      {placements.map((placement, idx) => (\n        <Tooltip key={idx}>\n          <Button className=\"mx-auto\" size=\"small\" appearance=\"outline\">\n            {placement}\n          </Button>\n          <TooltipContent placement={placement}>\n            Tooltip shown at <strong>{placement}</strong>.\n          </TooltipContent>\n        </Tooltip>\n      ))}\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-controlled-demo": {
    "component": "@/components/docs/overlays/sheet-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Sheet, Textarea } from 'ui'\n\nexport default function SheetControlledDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button onPress={() => setIsOpen(true)}>Feedback</Button>\n      <Sheet.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n        <Sheet.Header>\n          <Sheet.Title>Submit Feedback</Sheet.Title>\n          <Sheet.Description>\n            Please let us know your thoughts and how we can improve our service.\n          </Sheet.Description>\n        </Sheet.Header>\n        <Sheet.Body>\n          <Textarea label=\"Your Feedback\" placeholder=\"Type your feedback here...\" />\n        </Sheet.Body>\n        <Sheet.Footer>\n          <Button appearance=\"outline\" onPress={() => setIsOpen(false)}>\n            Close\n          </Button>\n          <Button intent=\"primary\" onPress={() => setIsOpen(false)}>\n            Submit Feedback\n          </Button>\n        </Sheet.Footer>\n      </Sheet.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover-arrow-demo": {
    "component": "@/components/docs/overlays/popover-arrow-demo",
    "raw": "'use client'\n\nimport { IconBell } from 'justd-icons'\nimport { Button, Popover } from 'ui'\n\nexport default function PopoverArrowDemo() {\n  return (\n    <Popover>\n      <Button appearance=\"outline\" size=\"square-petite\">\n        <IconBell />\n      </Button>\n      <Popover.Content showArrow={false} className=\"min-w-72\">\n        You have 3 new notifications.\n      </Popover.Content>\n    </Popover>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover-custom-close": {
    "component": "@/components/docs/overlays/popover-custom-close",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Checkbox, Form, Link, Popover, TextField } from 'ui'\n\nexport default function PopoverCustomClose() {\n  return (\n    <Popover>\n      <Button>Login</Button>\n      <Popover.Content className=\"sm:min-w-96\">\n        <Popover.Header className=\"mb-4\">\n          <Popover.Title>Login</Popover.Title>\n          <Popover.Description>Enter your credentials to sign in.</Popover.Description>\n        </Popover.Header>\n        <Form onSubmit={() => {}}>\n          <Popover.Body>\n            <div className=\"space-y-4\">\n              <TextField isRequired type=\"email\" label=\"Email\" placeholder=\"Enter your email\" />\n              <TextField\n                isRequired\n                label=\"Password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n              />\n              <div className=\"flex justify-between items-center\">\n                <Checkbox name=\"remember-me\">Remember me</Checkbox>\n                <Link intent=\"primary\" href=\"#\">\n                  Forgot password?\n                </Link>\n              </div>\n            </div>\n          </Popover.Body>\n          <Popover.Footer>\n            <Popover.Close>Cancel</Popover.Close>\n            <Button type=\"submit\">Login</Button>\n          </Popover.Footer>\n        </Form>\n      </Popover.Content>\n    </Popover>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-position-demo": {
    "component": "@/components/docs/overlays/sheet-position-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Sheet } from 'ui'\nimport { titleCase } from 'usemods'\n\ntype Side = 'left' | 'right' | 'top' | 'bottom'\nexport default function SheetPositionDemo() {\n  const [sheetSide, setSheetSide] = React.useState<Side>('left')\n  const [isOpen, setIsOpen] = React.useState(false)\n\n  const sides: Side[] = ['left', 'right', 'top', 'bottom']\n\n  const pressHandler = (side: Side, open: boolean) => {\n    setSheetSide(side)\n    setIsOpen(open)\n  }\n\n  return (\n    <>\n      <div className=\"grid grid-cols-2 gap-2\">\n        {sides.map((side, idx) => (\n          <Button appearance=\"outline\" onPress={() => pressHandler(side, true)} key={idx}>\n            {titleCase(side)}\n          </Button>\n        ))}\n      </div>\n      <Sheet.Content isOpen={isOpen} onOpenChange={setIsOpen} side={sheetSide}>\n        <Sheet.Header>\n          <Sheet.Title>{titleCase(sheetSide)}</Sheet.Title>\n          <Sheet.Description>The sheet will go from {sheetSide} side.</Sheet.Description>\n        </Sheet.Header>\n      </Sheet.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-nested-demo": {
    "component": "@/components/docs/overlays/modal-nested-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { toast } from 'sonner'\nimport { Button, Form, Modal, Textarea } from 'ui'\n\nexport default function ModalNestedDemo() {\n  const [isRegistrationModalOpen, setIsRegistrationModalOpen] = React.useState(false)\n  const [isProfileSetupModalOpen, setIsProfileSetupModalOpen] = React.useState(false)\n  const [isTyping, setIsTyping] = React.useState(false)\n\n  return (\n    <>\n      <Button onPress={() => setIsRegistrationModalOpen(true)}>Register</Button>\n\n      <Modal.Content\n        isOpen={isRegistrationModalOpen}\n        onOpenChange={() => setIsRegistrationModalOpen(false)}\n        aria-label=\"Confirm Registration\"\n      >\n        <Modal.Header>\n          <Modal.Title>Confirm Registration</Modal.Title>\n          <Modal.Description>Please confirm your registration details.</Modal.Description>\n        </Modal.Header>\n        <Modal.Footer>\n          <Modal.Close>Cancel</Modal.Close>\n          <Button\n            onPress={() => {\n              setIsProfileSetupModalOpen(true)\n            }}\n          >\n            Confirm\n          </Button>\n        </Modal.Footer>\n      </Modal.Content>\n\n      <Modal.Content\n        isOpen={isProfileSetupModalOpen}\n        onOpenChange={(isOpen) => {\n          if (!isOpen && isTyping) {\n            toast('Profile setup incomplete')\n          }\n          setIsProfileSetupModalOpen(isOpen)\n        }}\n        aria-label=\"Profile Setup\"\n      >\n        <Modal.Header>\n          <Modal.Title>Set Up Your Profile</Modal.Title>\n          <Modal.Description>\n            We need a bit more information before you can get started.\n          </Modal.Description>\n        </Modal.Header>\n        <Form\n          onSubmit={(e) => {\n            e.preventDefault()\n            toast.success('Profile setup complete')\n            setIsProfileSetupModalOpen(false)\n            setIsRegistrationModalOpen(false)\n          }}\n        >\n          <Modal.Body className=\"space-y-4\">\n            <Textarea\n              isRequired\n              label=\"Bio\"\n              placeholder=\"Tell us something about yourself\"\n              onInput={() => setIsTyping(true)}\n            />\n          </Modal.Body>\n          <Modal.Footer>\n            <Modal.Close>Skip for now</Modal.Close>\n            <Button type=\"submit\">Complete Setup</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-size-demo": {
    "component": "@/components/docs/overlays/modal-size-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Button, Grid, Modal } from 'ui'\n\ntype Size = Pick<React.ComponentProps<typeof Modal.Content>, 'size'>['size']\nconst sizes: Size[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', '4xl', '5xl']\nexport default function ModalSizeDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  const [modalSize, setModalSize] = React.useState<Size>('md')\n\n  const handlePress = (size: Size, open: boolean) => {\n    setModalSize(size)\n    setIsOpen(open)\n  }\n  return (\n    <>\n      <Grid columns={{ initial: 2, sm: 3, lg: 4 }} gap={2}>\n        {sizes.map((size, idx) => (\n          <Grid.Item key={idx}>\n            <Button appearance=\"outline\" onPress={() => handlePress(size, true)}>\n              Open {size}\n            </Button>\n          </Grid.Item>\n        ))}\n      </Grid>\n\n      <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen} size={modalSize}>\n        <Modal.Header>\n          <Modal.Title>Project Update</Modal.Title>\n          <Modal.Description>\n            Dive deep into our project’s latest updates where we've streamlined workflow and\n            improved user interfaces.\n          </Modal.Description>\n        </Modal.Header>\n        <Modal.Footer>\n          <Button appearance=\"outline\" onPress={() => setIsOpen(false)}>\n            Close\n          </Button>\n          <Button onPress={() => setIsOpen(false)}>Confirm</Button>\n        </Modal.Footer>\n      </Modal.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-classnames-demo": {
    "component": "@/components/docs/overlays/modal-classnames-demo",
    "raw": "'use client'\n\nimport { Button, Modal } from 'ui'\n\nexport default function ModalClassnamesDemo() {\n  return (\n    <Modal>\n      <Button>Open</Button>\n      <Modal.Content\n        classNames={{\n          overlay: 'bg-white/50 dark:bg-black/50 backdrop-blur',\n          content: 'bg-background'\n        }}\n      >\n        <Modal.Header title=\"Custom Classnames\" description=\"This modal has custom class names.\" />\n        <Modal.Footer>\n          <Modal.Close>Close</Modal.Close>\n        </Modal.Footer>\n      </Modal.Content>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-nested-demo": {
    "component": "@/components/docs/overlays/drawer-nested-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { toast } from 'sonner'\nimport { Button, Drawer, Form, Textarea } from 'ui'\n\nexport default function DrawerNestedDemo() {\n  const [isRegistrationDrawerOpen, setIsRegistrationDrawerOpen] = React.useState(false)\n  const [isProfileSetupDrawerOpen, setIsProfileSetupDrawerOpen] = React.useState(false)\n  const [isTyping, setIsTyping] = React.useState(false)\n\n  return (\n    <>\n      <Button onPress={() => setIsRegistrationDrawerOpen(true)}>Register</Button>\n\n      <Drawer\n        isOpen={isRegistrationDrawerOpen}\n        onOpenChange={() => setIsRegistrationDrawerOpen(false)}\n      >\n        <Drawer.Content>\n          <Drawer.Header>\n            <Drawer.Title>Confirm Registration</Drawer.Title>\n            <Drawer.Description>Please confirm your registration details.</Drawer.Description>\n          </Drawer.Header>\n          <Drawer.Footer>\n            <Drawer.Close>Cancel</Drawer.Close>\n            <Button\n              onPress={() => {\n                setIsProfileSetupDrawerOpen(true)\n              }}\n            >\n              Confirm\n            </Button>\n          </Drawer.Footer>\n        </Drawer.Content>\n      </Drawer>\n\n      <Drawer\n        isOpen={isProfileSetupDrawerOpen}\n        onOpenChange={(isOpen) => {\n          if (!isOpen && isTyping) toast('Profile setup incomplete', { position: 'top-center' })\n          setIsProfileSetupDrawerOpen(isOpen)\n        }}\n      >\n        <Drawer.Content>\n          <Drawer.Header>\n            <Drawer.Title>Set Up Your Profile</Drawer.Title>\n            <Drawer.Description>\n              We need a bit more information before you can get started.\n            </Drawer.Description>\n          </Drawer.Header>\n          <Form\n            onSubmit={(e) => {\n              e.preventDefault()\n              toast.success('Profile setup complete', { position: 'top-center' })\n              setIsProfileSetupDrawerOpen(false)\n              setIsRegistrationDrawerOpen(false)\n            }}\n          >\n            <Drawer.Body className=\"space-y-4\">\n              <Textarea\n                isRequired\n                label=\"Bio\"\n                placeholder=\"Tell us something about yourself\"\n                onInput={() => setIsTyping(true)}\n              />\n            </Drawer.Body>\n            <Drawer.Footer>\n              <Drawer.Close>Skip for now</Drawer.Close>\n              <Button type=\"submit\">Complete Setup</Button>\n            </Drawer.Footer>\n          </Form>\n        </Drawer.Content>\n      </Drawer>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-basic-demo": {
    "component": "@/components/docs/overlays/drawer-basic-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { buttonStyles, Drawer } from 'ui'\n\nexport default function DrawerBasicDemo() {\n  return (\n    <Drawer>\n      <Drawer.Trigger className={buttonStyles({ shape: 'circle', appearance: 'outline' })}>\n        Open\n      </Drawer.Trigger>\n      <Drawer.Content>\n        <Drawer.Header>\n          <Drawer.Title>Nirvana: The Band</Drawer.Title>\n          <Drawer.Description>\n            A brief overview of the influential rock band Nirvana.\n          </Drawer.Description>\n        </Drawer.Header>\n        <Drawer.Body>\n          Nirvana was an American rock band formed in 1987, fronted by Kurt Cobain, with Krist\n          Novoselic on bass and Dave Grohl on drums. They played a key role in bringing grunge music\n          into the mainstream with their breakthrough album, *Nevermind* (1991), which featured the\n          hit single \"Smells Like Teen Spirit.\"\n        </Drawer.Body>\n        <Drawer.Footer>\n          <Drawer.Close shape=\"circle\">Close</Drawer.Close>\n        </Drawer.Footer>\n      </Drawer.Content>\n    </Drawer>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-demo": {
    "component": "@/components/docs/overlays/sheet-demo",
    "raw": "'use client'\n\nimport { Button, Sheet, Switch, TextField } from 'ui'\n\nexport default function SheetDemo() {\n  return (\n    <Sheet>\n      <Button appearance=\"outline\">Edit Settings</Button>\n      <Sheet.Content>\n        <Sheet.Header>\n          <Sheet.Title>Update User Settings</Sheet.Title>\n          <Sheet.Description>Adjust your preferences and configurations here.</Sheet.Description>\n        </Sheet.Header>\n        <Sheet.Body className=\"space-y-4\">\n          <TextField label=\"Username\" type=\"text\" placeholder=\"Enter your username\" />\n          <TextField label=\"Email\" type=\"email\" placeholder=\"Enter your email address\" />\n          <Switch>Enable Notifications</Switch>\n        </Sheet.Body>\n        <Sheet.Footer>\n          <Sheet.Close>Cancel</Sheet.Close>\n          <Button intent=\"primary\" type=\"submit\">\n            Save Changes\n          </Button>\n        </Sheet.Footer>\n      </Sheet.Content>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-sticky-demo": {
    "component": "@/components/docs/overlays/drawer-sticky-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { buttonStyles, Drawer } from 'ui'\n\nexport default function DrawerStickyDemo() {\n  return (\n    <Drawer>\n      <Drawer.Trigger className={buttonStyles({ shape: 'circle', appearance: 'outline' })}>\n        Open\n      </Drawer.Trigger>\n      <Drawer.Content>\n        <Drawer.Header>The Beatles</Drawer.Header>\n        <Drawer.Body>\n          <div className=\"prose dark:prose-invert prose-zinc\">\n            <p>\n              Welcome to our Terms of Use. By accessing or using our services, you agree to be bound\n              by these terms. If you do not agree to these terms, please refrain from using our\n              services.\n            </p>\n            <h3> User Obligations</h3>\n            <h4>Account Responsibility</h4>\n            <p>\n              When you create an account with us, you are responsible for maintaining the\n              confidentiality of your account and password.\n            </p>{' '}\n            <p>\n              You agree to accept responsibility for all activities that occur under your account.\n              You must notify us immediately of any breach of security or unauthorized use of your\n              account.\n            </p>\n            <h4>Compliance with Laws</h4>\n            <p>\n              You agree to comply with all applicable laws, regulations, and policies in connection\n              with your use of our services. This includes adhering to intellectual property laws\n              and refraining from any unlawful behavior while using our platform.\n            </p>\n            <h3> Prohibited Activities</h3>\n            <p>\n              You are not permitted to access or attempt to access any of our services by any means\n              other than through the interface provided by us. Any form of hacking, bypassing, or\n              circumventing our security protocols is strictly prohibited.\n            </p>\n            <h4>Misuse of Content</h4>\n            <p>\n              You agree not to misuse, reproduce, distribute, or modify any content from our\n              services unless explicitly authorized by us. This includes engaging in activities such\n              as scraping, data mining, or using automated systems to extract data.\n            </p>\n            <h4>Harassment and Abuse</h4>\n            <p>\n              You are prohibited from using our services to harass, abuse, or harm other users. This\n              includes sending unsolicited messages, stalking, or engaging in any form of\n              cyberbullying. We reserve the right to terminate accounts found in violation of this\n              policy.\n            </p>\n            <h4>Ownership of Content</h4>\n            <p>\n              All content, trademarks, service marks, logos, and other intellectual property\n              displayed on our services are the property of their respective owners. You may not\n              use, copy, or distribute any content without prior written permission from the owner.\n            </p>\n            <h4>User-Generated Content</h4>\n            <p>\n              By submitting content to our services, you grant us a worldwide, royalty-free,\n              non-exclusive license to use, distribute, modify, and display that content for the\n              purpose of providing our services.\n            </p>\n            <p>\n              You retain all ownership rights to your content but agree to allow us to use it in\n              accordance with these terms.\n            </p>\n            <h3> Termination</h3>\n            <h4>Right to Terminate</h4>\n            We reserve the right to terminate or suspend your access to our services at any time,\n            without notice, for any reason, including but not limited to a breach of these terms.\n            Upon termination, your right to use our services will immediately cease.\n            <h4>Effect of Termination</h4>\n            Upon termination of your account, all provisions of these terms that, by their nature,\n            should survive termination shall remain in effect. This includes, but is not limited to,\n            ownership provisions, warranty disclaimers, and limitations of liability.\n            <h3> Limitation of Liability</h3>\n            <h4>Service Availability</h4>\n            We do not guarantee that our services will be available at all times or without\n            interruption. We are not liable for any downtime or technical issues that may prevent\n            access to our services.\n            <h4>No Warranties</h4>\n            Our services are provided \"as is\" and \"as available\" without any warranties of any kind,\n            whether express or implied. We do not warrant that our services will meet your\n            requirements or that they will be error-free or secure.\n            <h4>Limitation of Damages</h4>\n            In no event shall we be liable for any indirect, incidental, special, consequential, or\n            punitive damages arising out of or related to your use of our services. This includes,\n            but is not limited to, damages for loss of profits, data, or other intangibles.\n            <h3> Changes to These Terms</h3>\n            We reserve the right to modify or replace these terms at any time. If a revision is\n            material, we will provide at least 30 days' notice prior to any new terms taking effect.\n            What constitutes a material change will be determined at our sole discretion.\n            <h3> Governing Law</h3>\n            These terms shall be governed and construed in accordance with the laws of [Your\n            Jurisdiction], without regard to its conflict of law provisions. Any disputes arising\n            from or relating to these terms shall be resolved in the courts of [Your Jurisdiction].\n            <h3> Contact Information</h3>\n            If you have any questions about these terms, please contact us at xxx@example.com.\n          </div>\n        </Drawer.Body>\n        <Drawer.Footer>\n          <Drawer.Close shape=\"circle\">Close</Drawer.Close>\n        </Drawer.Footer>\n      </Drawer.Content>\n    </Drawer>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-sticky-demo": {
    "component": "@/components/docs/overlays/modal-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Modal } from 'ui'\n\nexport default function ModalStickyDemo() {\n  return (\n    <Modal>\n      <Button>Read</Button>\n      <Modal.Content size=\"xl\">\n        <Modal.Header>\n          <Modal.Title>Terms of Use</Modal.Title>\n          <Modal.Description>\n            If you do not agree to these terms, please refrain from using our services.\n          </Modal.Description>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"prose dark:prose-invert prose-zinc\">\n            <p>\n              Welcome to our Terms of Use. By accessing or using our services, you agree to be bound\n              by these terms. If you do not agree to these terms, please refrain from using our\n              services.\n            </p>\n            <h3> User Obligations</h3>\n            <h4>Account Responsibility</h4>\n            <p>\n              When you create an account with us, you are responsible for maintaining the\n              confidentiality of your account and password.\n            </p>{' '}\n            <p>\n              You agree to accept responsibility for all activities that occur under your account.\n              You must notify us immediately of any breach of security or unauthorized use of your\n              account.\n            </p>\n            <h4>Compliance with Laws</h4>\n            <p>\n              You agree to comply with all applicable laws, regulations, and policies in connection\n              with your use of our services. This includes adhering to intellectual property laws\n              and refraining from any unlawful behavior while using our platform.\n            </p>\n            <h3> Prohibited Activities</h3>\n            <p>\n              You are not permitted to access or attempt to access any of our services by any means\n              other than through the interface provided by us. Any form of hacking, bypassing, or\n              circumventing our security protocols is strictly prohibited.\n            </p>\n            <h4>Misuse of Content</h4>\n            <p>\n              You agree not to misuse, reproduce, distribute, or modify any content from our\n              services unless explicitly authorized by us. This includes engaging in activities such\n              as scraping, data mining, or using automated systems to extract data.\n            </p>\n            <h4>Harassment and Abuse</h4>\n            <p>\n              You are prohibited from using our services to harass, abuse, or harm other users. This\n              includes sending unsolicited messages, stalking, or engaging in any form of\n              cyberbullying. We reserve the right to terminate accounts found in violation of this\n              policy.\n            </p>\n            <h4>Ownership of Content</h4>\n            <p>\n              All content, trademarks, service marks, logos, and other intellectual property\n              displayed on our services are the property of their respective owners. You may not\n              use, copy, or distribute any content without prior written permission from the owner.\n            </p>\n            <h4>User-Generated Content</h4>\n            <p>\n              By submitting content to our services, you grant us a worldwide, royalty-free,\n              non-exclusive license to use, distribute, modify, and display that content for the\n              purpose of providing our services.\n            </p>\n            <p>\n              You retain all ownership rights to your content but agree to allow us to use it in\n              accordance with these terms.\n            </p>\n            <h3> Termination</h3>\n            <h4>Right to Terminate</h4>\n            We reserve the right to terminate or suspend your access to our services at any time,\n            without notice, for any reason, including but not limited to a breach of these terms.\n            Upon termination, your right to use our services will immediately cease.\n            <h4>Effect of Termination</h4>\n            Upon termination of your account, all provisions of these terms that, by their nature,\n            should survive termination shall remain in effect. This includes, but is not limited to,\n            ownership provisions, warranty disclaimers, and limitations of liability.\n            <h3> Limitation of Liability</h3>\n            <h4>Service Availability</h4>\n            We do not guarantee that our services will be available at all times or without\n            interruption. We are not liable for any downtime or technical issues that may prevent\n            access to our services.\n            <h4>No Warranties</h4>\n            Our services are provided \"as is\" and \"as available\" without any warranties of any kind,\n            whether express or implied. We do not warrant that our services will meet your\n            requirements or that they will be error-free or secure.\n            <h4>Limitation of Damages</h4>\n            In no event shall we be liable for any indirect, incidental, special, consequential, or\n            punitive damages arising out of or related to your use of our services. This includes,\n            but is not limited to, damages for loss of profits, data, or other intangibles.\n            <h3> Changes to These Terms</h3>\n            We reserve the right to modify or replace these terms at any time. If a revision is\n            material, we will provide at least 30 days' notice prior to any new terms taking effect.\n            What constitutes a material change will be determined at our sole discretion.\n            <h3> Governing Law</h3>\n            These terms shall be governed and construed in accordance with the laws of [Your\n            Jurisdiction], without regard to its conflict of law provisions. Any disputes arising\n            from or relating to these terms shall be resolved in the courts of [Your Jurisdiction].\n            <h3> Contact Information</h3>\n            If you have any questions about these terms, please contact us at [Your Contact\n            Information].\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Modal.Close>Close</Modal.Close>\n          <Button>Accept</Button>\n        </Modal.Footer>\n      </Modal.Content>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/alert-dialog-demo": {
    "component": "@/components/docs/overlays/alert-dialog-demo",
    "raw": "'use client'\n\nimport { buttonStyles, Modal } from 'ui'\n\nexport default function AlertDialogDemo() {\n  return (\n    <Modal>\n      <Modal.Trigger className={buttonStyles({ intent: 'danger' })}>Delete</Modal.Trigger>\n      <Modal.Content role=\"alertdialog\">\n        <Modal.Header>\n          <Modal.Title>Delete file</Modal.Title>\n          <Modal.Description>\n            This will permanently delete the selected file. Continue?\n          </Modal.Description>\n        </Modal.Header>\n        <Modal.Footer>\n          <Modal.Close appearance=\"outline\">Cancel</Modal.Close>\n          <Modal.Close appearance=\"solid\" intent=\"danger\">\n            Continue\n          </Modal.Close>\n        </Modal.Footer>\n      </Modal.Content>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-stack-demo": {
    "component": "@/components/docs/overlays/sheet-stack-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Sheet } from 'ui'\n\nexport default function SheetStackDemo() {\n  return (\n    <Sheet>\n      <Button appearance=\"outline\">Stack</Button>\n      <Sheet.Content isStack={false}>\n        <Sheet.Header>\n          <Sheet.Title>Not Stacked</Sheet.Title>\n          <Sheet.Description>This sheet is not stacked.</Sheet.Description>\n        </Sheet.Header>\n        <Sheet.Footer>\n          <Sheet.Close>Cancel</Sheet.Close>\n          <Button intent=\"primary\">Save Changes</Button>\n        </Sheet.Footer>\n      </Sheet.Content>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover-trigger-demo": {
    "component": "@/components/docs/overlays/popover-trigger-demo",
    "raw": "'use client'\n\nimport { Avatar, Button, Popover } from 'ui'\n\nexport default function PopoverTriggerDemo() {\n  return (\n    <Popover>\n      <Popover.Trigger>\n        <Avatar src=\"https://github.com/irsyadadl.png\" />\n      </Popover.Trigger>\n      <Popover.Content className=\"min-w-72\">\n        <Popover.Header>\n          <Popover.Title>Email</Popover.Title>\n          <Popover.Description>We'll send you an email to log in.</Popover.Description>\n        </Popover.Header>\n        <Popover.Footer>\n          <Button>Send Login Link</Button>\n        </Popover.Footer>\n      </Popover.Content>\n    </Popover>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-controlled-demo": {
    "component": "@/components/docs/overlays/drawer-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Drawer, TextField } from 'ui'\n\nexport default function DrawerControlledDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button onPress={() => setIsOpen(!isOpen)} appearance=\"outline\">\n        Login\n      </Button>\n      <Drawer isOpen={isOpen} onOpenChange={setIsOpen}>\n        <Drawer.Content>\n          <Drawer.Header>\n            <Drawer.Title>Login</Drawer.Title>\n            <Drawer.Description>\n              Please enter your credentials to access your account.\n            </Drawer.Description>\n          </Drawer.Header>\n          <Drawer.Body className=\"flex flex-col gap-4\">\n            <TextField label=\"Email\" isRequired type=\"email\" placeholder=\"Enter your email\" />\n            <TextField\n              label=\"Password\"\n              isRequired\n              type=\"password\"\n              placeholder=\"Enter your password\"\n            />\n          </Drawer.Body>\n          <Drawer.Footer>\n            <Drawer.Close>Close</Drawer.Close>\n            <Button onPress={() => setIsOpen(false)}>Login</Button>\n          </Drawer.Footer>\n        </Drawer.Content>\n      </Drawer>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-blur-demo": {
    "component": "@/components/docs/overlays/modal-blur-demo",
    "raw": "'use client'\n\nimport { Button, Form, Modal, TextField } from 'ui'\n\nexport default function ModalBlurDemo() {\n  return (\n    <Modal>\n      <Button>Turn on 2FA</Button>\n      <Modal.Content isBlurred>\n        <Modal.Header>\n          <Modal.Title>Nice! Let's beef up your account.</Modal.Title>\n          <Modal.Description>\n            2FA beefs up your account's defense. Pop in your password to keep going.\n          </Modal.Description>\n        </Modal.Header>\n        <Form onSubmit={() => {}}>\n          <TextField\n            isRequired\n            autoFocus\n            label=\"Password\"\n            type=\"password\"\n            placeholder=\"Enter your password\"\n          />\n          <Modal.Footer>\n            <Modal.Close>Cancel</Modal.Close>\n            <Button type=\"submit\">Turn on 2FA</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-sticky-demo": {
    "component": "@/components/docs/overlays/sheet-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from 'ui'\n\nexport default function SheetStickyDemo() {\n  return (\n    <Sheet>\n      <Button>Read</Button>\n      <Sheet.Content>\n        <Sheet.Header>\n          <Sheet.Title>Terms of Use</Sheet.Title>\n          <Sheet.Description>\n            If you do not agree to these terms, please refrain from using our services.\n          </Sheet.Description>\n        </Sheet.Header>\n        <Sheet.Body>\n          <div className=\"prose dark:prose-invert prose-zinc\">\n            <p>\n              Welcome to our Terms of Use. By accessing or using our services, you agree to be bound\n              by these terms. If you do not agree to these terms, please refrain from using our\n              services.\n            </p>\n            <h3> User Obligations</h3>\n            <h4>Account Responsibility</h4>\n            <p>\n              When you create an account with us, you are responsible for maintaining the\n              confidentiality of your account and password.\n            </p>{' '}\n            <p>\n              You agree to accept responsibility for all activities that occur under your account.\n              You must notify us immediately of any breach of security or unauthorized use of your\n              account.\n            </p>\n            <h4>Compliance with Laws</h4>\n            <p>\n              You agree to comply with all applicable laws, regulations, and policies in connection\n              with your use of our services. This includes adhering to intellectual property laws\n              and refraining from any unlawful behavior while using our platform.\n            </p>\n            <h3> Prohibited Activities</h3>\n            <p>\n              You are not permitted to access or attempt to access any of our services by any means\n              other than through the interface provided by us. Any form of hacking, bypassing, or\n              circumventing our security protocols is strictly prohibited.\n            </p>\n            <h4>Misuse of Content</h4>\n            <p>\n              You agree not to misuse, reproduce, distribute, or modify any content from our\n              services unless explicitly authorized by us. This includes engaging in activities such\n              as scraping, data mining, or using automated systems to extract data.\n            </p>\n            <h4>Harassment and Abuse</h4>\n            <p>\n              You are prohibited from using our services to harass, abuse, or harm other users. This\n              includes sending unsolicited messages, stalking, or engaging in any form of\n              cyberbullying. We reserve the right to terminate accounts found in violation of this\n              policy.\n            </p>\n            <h4>Ownership of Content</h4>\n            <p>\n              All content, trademarks, service marks, logos, and other intellectual property\n              displayed on our services are the property of their respective owners. You may not\n              use, copy, or distribute any content without prior written permission from the owner.\n            </p>\n            <h4>User-Generated Content</h4>\n            <p>\n              By submitting content to our services, you grant us a worldwide, royalty-free,\n              non-exclusive license to use, distribute, modify, and display that content for the\n              purpose of providing our services.\n            </p>\n            <p>\n              You retain all ownership rights to your content but agree to allow us to use it in\n              accordance with these terms.\n            </p>\n            <h3> Termination</h3>\n            <h4>Right to Terminate</h4>\n            We reserve the right to terminate or suspend your access to our services at any time,\n            without notice, for any reason, including but not limited to a breach of these terms.\n            Upon termination, your right to use our services will immediately cease.\n            <h4>Effect of Termination</h4>\n            Upon termination of your account, all provisions of these terms that, by their nature,\n            should survive termination shall remain in effect. This includes, but is not limited to,\n            ownership provisions, warranty disclaimers, and limitations of liability.\n            <h3> Limitation of Liability</h3>\n            <h4>Service Availability</h4>\n            We do not guarantee that our services will be available at all times or without\n            interruption. We are not liable for any downtime or technical issues that may prevent\n            access to our services.\n            <h4>No Warranties</h4>\n            Our services are provided \"as is\" and \"as available\" without any warranties of any kind,\n            whether express or implied. We do not warrant that our services will meet your\n            requirements or that they will be error-free or secure.\n            <h4>Limitation of Damages</h4>\n            In no event shall we be liable for any indirect, incidental, special, consequential, or\n            punitive damages arising out of or related to your use of our services. This includes,\n            but is not limited to, damages for loss of profits, data, or other intangibles.\n            <h3> Changes to These Terms</h3>\n            We reserve the right to modify or replace these terms at any time. If a revision is\n            material, we will provide at least 30 days' notice prior to any new terms taking effect.\n            What constitutes a material change will be determined at our sole discretion.\n            <h3> Governing Law</h3>\n            These terms shall be governed and construed in accordance with the laws of [Your\n            Jurisdiction], without regard to its conflict of law provisions. Any disputes arising\n            from or relating to these terms shall be resolved in the courts of [Your Jurisdiction].\n            <h3> Contact Information</h3>\n            If you have any questions about these terms, please contact us at [Your Contact\n            Information].\n          </div>\n        </Sheet.Body>\n        <Sheet.Footer>\n          <Sheet.Close>Close</Sheet.Close>\n          <Button>Accept</Button>\n        </Sheet.Footer>\n      </Sheet.Content>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-controlled-demo": {
    "component": "@/components/docs/overlays/modal-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Button, Modal } from 'ui'\n\nexport default function ModalControlledDemo() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Button onPress={() => setOpen(true)} intent=\"primary\">\n        Subscribe\n      </Button>\n      <Modal.Content isOpen={open} onOpenChange={setOpen}>\n        <Modal.Header>\n          <Modal.Title>Subscribe to Our Newsletter</Modal.Title>\n          <Modal.Description>\n            Get the latest news and updates right to your inbox.\n          </Modal.Description>\n        </Modal.Header>\n        <Modal.Footer>\n          <Button onPress={() => setOpen(false)}>Sign Up</Button>\n        </Modal.Footer>\n      </Modal.Content>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover-demo": {
    "component": "@/components/docs/overlays/popover-demo",
    "raw": "'use client'\n\nimport { Button, Popover } from 'ui'\n\nexport default function PopoverDemo() {\n  return (\n    <Popover>\n      <Button>Forgot Password</Button>\n      <Popover.Content className=\"min-w-72\">\n        <Popover.Header>\n          <Popover.Title>Email</Popover.Title>\n          <Popover.Description>We'll send you an email to log in.</Popover.Description>\n        </Popover.Header>\n        <Popover.Footer>\n          <Button>Send Login Link</Button>\n        </Popover.Footer>\n      </Popover.Content>\n    </Popover>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-custom-style-demo": {
    "component": "@/components/docs/overlays/modal-custom-style-demo",
    "raw": "'use client'\n\nimport { Button, Form, Modal, Note, TextField } from 'ui'\n\nexport default function ModalCustomStyleDemo() {\n  return (\n    <Modal>\n      <Button intent=\"danger\">Delete Project</Button>\n      <Modal.Content role=\"alertdialog\">\n        <Modal.Header\n          className=\"bg-background border-b mb-4\"\n          title=\"Delete Project\"\n          description=\"This project’s gonna get wiped, including all its Deployments, Domains, Env Variables, Serverless Functions, and Settings.\"\n        >\n          <Note intent=\"danger\">No undo button here, so be sure!</Note>\n        </Modal.Header>\n        <Form onSubmit={() => {}}>\n          <Modal.Body className=\"space-y-4\">\n            <TextField\n              isRequired\n              autoFocus\n              label=\"Enter the project name\"\n              type=\"text\"\n              placeholder=\"team/project-name\"\n            />\n            <TextField isRequired label='To verify, type \"delete my project\" below' type=\"text\" />\n          </Modal.Body>\n          <Modal.Footer>\n            <Modal.Close>Cancel</Modal.Close>\n            <Button intent=\"danger\" type=\"submit\">\n              Delete Project\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-without-notch-demo": {
    "component": "@/components/docs/overlays/drawer-without-notch-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { buttonStyles, Drawer } from 'ui'\n\nexport default function DrawerWithoutNotchDemo() {\n  return (\n    <Drawer withNotch={false}>\n      <Drawer.Trigger className={buttonStyles({ shape: 'circle', appearance: 'outline' })}>\n        Open Drawer\n      </Drawer.Trigger>\n      <Drawer.Content>\n        <Drawer.Header>\n          <Drawer.Title>The Beatles</Drawer.Title>\n          <Drawer.Description>\n            The Beatles were an English rock band formed in Liverpool in 1960, comprising John\n            Lennon, Paul McCartney, George Harrison and Ringo Starr.\n          </Drawer.Description>\n        </Drawer.Header>\n        <Drawer.Footer>\n          <Drawer.Close shape=\"circle\">Close</Drawer.Close>\n        </Drawer.Footer>\n      </Drawer.Content>\n    </Drawer>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-classnames-demo": {
    "component": "@/components/docs/overlays/sheet-classnames-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from 'ui'\n\nexport default function SheetClassnamesDemo() {\n  return (\n    <Sheet>\n      <Button>Open</Button>\n      <Sheet.Content\n        classNames={{\n          overlay: 'bg-white/50 dark:bg-black/50 backdrop-blur',\n          content: 'min-w-80'\n        }}\n      >\n        <Sheet.Header title=\"Custom Classnames\" description=\"This sheet has custom class names.\" />\n        <Sheet.Footer>\n          <Sheet.Close>Close</Sheet.Close>\n        </Sheet.Footer>\n      </Sheet.Content>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-demo": {
    "component": "@/components/docs/overlays/modal-demo",
    "raw": "'use client'\n\nimport { Button, Form, Modal, TextField } from 'ui'\n\nexport default function ModalDemo() {\n  return (\n    <Modal>\n      <Button>Turn on 2FA</Button>\n      <Modal.Content>\n        <Modal.Header>\n          <Modal.Title>Nice! Let's beef up your account.</Modal.Title>\n          <Modal.Description>\n            2FA beefs up your account's defense. Pop in your password to keep going.\n          </Modal.Description>\n        </Modal.Header>\n        <Form onSubmit={() => {}}>\n          <TextField\n            isRequired\n            autoFocus\n            label=\"Password\"\n            type=\"password\"\n            placeholder=\"Enter your password\"\n          />\n          <Modal.Footer>\n            <Modal.Close>Cancel</Modal.Close>\n            <Button type=\"submit\">Turn on 2FA</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal.Content>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs-demo": {
    "component": "@/components/docs/navigation/tabs-demo",
    "raw": "'use client'\n\nimport { Tabs } from 'ui'\n\nexport default function TabsDemo() {\n  return (\n    <Tabs aria-label=\"Recipe App\">\n      <Tabs.List>\n        <Tabs.Tab id=\"r\">Recipes</Tabs.Tab>\n        <Tabs.Tab id=\"i\">Ingredients</Tabs.Tab>\n        <Tabs.Tab id=\"m\">Meal Plans</Tabs.Tab>\n        <Tabs.Tab id=\"v\">Videos</Tabs.Tab>\n      </Tabs.List>\n      <Tabs.Panel id=\"r\">\n        Browse through a wide selection of recipes for all occasions and dietary preferences.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"i\">Check the list of ingredients needed for your chosen recipes.</Tabs.Panel>\n      <Tabs.Panel id=\"m\">Discover curated meal plans to simplify your weekly cooking.</Tabs.Panel>\n      <Tabs.Panel id=\"v\">Watch cooking videos to learn new techniques and recipes.</Tabs.Panel>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs-icons-demo": {
    "component": "@/components/docs/navigation/tabs-icons-demo",
    "raw": "'use client'\n\nimport { IconApple, IconClock, IconCut } from 'justd-icons'\nimport { Tabs } from 'ui'\n\nexport default function TabsIconsDemo() {\n  return (\n    <Tabs aria-label=\"Fitness App\">\n      <Tabs.List>\n        <Tabs.Tab id=\"w\">\n          <IconCut /> Workouts\n        </Tabs.Tab>\n        <Tabs.Tab id=\"n\">\n          <IconApple /> Nutrition\n        </Tabs.Tab>\n        <Tabs.Tab id=\"t\">\n          <IconClock /> Tracker\n        </Tabs.Tab>\n      </Tabs.List>\n      <Tabs.Panel id=\"w\">\n        Find a variety of workout plans tailored to your fitness level and goals.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"n\">\n        Get nutrition tips and meal plans to complement your fitness journey.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"t\">Track your progress with detailed statistics and analytics.</Tabs.Panel>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/link-intent-demo": {
    "component": "@/components/docs/navigation/link-intent-demo",
    "raw": "'use client'\n\nimport { Link } from 'ui'\n\nexport default function LinkIntentDemo() {\n  return (\n    <div className=\"flex gap-4\">\n      <Link intent=\"primary\" href=\"#intent-1\">\n        Label\n      </Link>\n      <Link intent=\"secondary\" href=\"#intent-2\">\n        Label\n      </Link>\n      <Link intent=\"lad/primary\" href=\"#intent-3\">\n        Label\n      </Link>\n      <Link intent=\"danger\" href=\"#intent-4\">\n        Label\n      </Link>\n      <Link href=\"#intent-5\">Label</Link>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs-link-demo": {
    "component": "@/components/docs/navigation/tabs-link-demo",
    "raw": "'use client'\n\nimport { Tabs } from 'ui'\n\nconst navs = [\n  { url: '/', label: 'Home' },\n  { url: '/docs/getting-started/introduction', label: 'Docs' },\n  { url: '/components', label: 'Components' },\n  { url: 'https://paranoid.irsyad.co', label: 'Paranoid' }\n]\n\nexport default function TabsLinkDemo() {\n  return (\n    <Tabs aria-label=\"Navbar\">\n      <Tabs.List items={navs}>\n        {(item) => (\n          <Tabs.Tab id={item.label} href={item.url}>\n            {item.label}\n          </Tabs.Tab>\n        )}\n      </Tabs.List>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs-collections-demo": {
    "component": "@/components/docs/navigation/tabs-collections-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Collection } from 'react-aria-components'\nimport { Tabs } from 'ui'\n\nconst tabs = [\n  { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n  { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n  { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n  { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' }\n]\n\nexport default function TabsCollectionsDemo() {\n  return (\n    <Tabs aria-label=\"Project Management\">\n      <Tabs.List aria-label=\"Dynamic tabs\" items={tabs}>\n        {(item) => <Tabs.Tab>{item.title}</Tabs.Tab>}\n      </Tabs.List>\n\n      <Collection items={tabs}>\n        {(item) => <Tabs.Panel key={item.id}>{item.content}</Tabs.Panel>}\n      </Collection>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/pagination-dynamic-demo": {
    "component": "@/components/docs/navigation/pagination-dynamic-demo",
    "raw": "'use client'\n\nimport { Pagination } from 'ui'\n\nconst pages = Array.from({ length: 6 }, (_, i) => ({ value: i + 1 }))\nexport default function PaginationDynamicDemo() {\n  return (\n    <Pagination>\n      <Pagination.List>\n        <Pagination.Item role=\"first\" href=\"#\" />\n        <Pagination.Item role=\"previous\" href=\"#\" />\n        <Pagination.Section aria-label=\"Pagination Segment\" className=\"rounded-lg lg:hidden border\">\n          <Pagination.Item role=\"label\">1</Pagination.Item>\n          <Pagination.Item role=\"separator\" />\n          <Pagination.Item className=\"text-muted-fg\" role=\"label\">\n            10\n          </Pagination.Item>\n        </Pagination.Section>\n        <Pagination.Section\n          aria-label=\"Pagination Segment\"\n          className=\"hidden lg:flex\"\n          items={pages}\n        >\n          {(item) => (\n            <Pagination.Item id={item.value.toString()} isCurrent={item.value === 4} href=\"#\">\n              {item.value}\n            </Pagination.Item>\n          )}\n        </Pagination.Section>\n        <Pagination.Item role=\"next\" href=\"#\" />\n        <Pagination.Item role=\"last\" href=\"#\" />\n      </Pagination.List>\n    </Pagination>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs-responsive-demo": {
    "component": "@/components/docs/navigation/tabs-responsive-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconHamburger } from 'justd-icons'\nimport { Collection } from 'react-aria-components'\nimport { Select, Tabs, useMediaQuery } from 'ui'\n\nconst tabs = [\n  { id: 1, title: 'Overview', content: 'This is the overview tab content.' },\n  { id: 2, title: 'Features', content: 'Details about the features are listed here.' },\n  { id: 3, title: 'Pricing', content: 'Find the pricing information on this tab.' },\n  { id: 4, title: 'Reviews', content: 'Read user reviews and ratings here.' },\n  { id: 5, title: 'Support', content: 'Contact our support team on this tab.' },\n  { id: 6, title: 'Guarantee', content: 'Our satisfaction guarantee details are here.' },\n  { id: 7, title: 'FAQ', content: 'Frequently asked questions are answered here.' }\n]\n\nexport default function TabsResponsiveDemo() {\n  const isMobile = useMediaQuery('(max-width: 600px)')\n  return isMobile ? (\n    <Select className=\"sm:hidden flex\">\n      <Select.Trigger prefix={<IconHamburger />} />\n      <Select.List items={tabs}>\n        {(item) => <Select.Option textValue={item.title}>{item.title}</Select.Option>}\n      </Select.List>\n    </Select>\n  ) : (\n    <Tabs className=\"sm:flex hidden\" aria-label=\"Project Management\">\n      <Tabs.List aria-label=\"Dynamic tabs\" items={tabs}>\n        {(item) => <Tabs.Tab>{item.title}</Tabs.Tab>}\n      </Tabs.List>\n      <Collection items={tabs}>\n        {(item) => <Tabs.Panel key={item.id}>{item.content}</Tabs.Panel>}\n      </Collection>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/pagination-demo": {
    "component": "@/components/docs/navigation/pagination-demo",
    "raw": "'use client'\n\nimport { Pagination } from 'ui'\n\nexport default function PaginationDemo() {\n  return (\n    <Pagination>\n      <Pagination.List>\n        <Pagination.Item role=\"first\" href=\"#\" />\n        <Pagination.Item role=\"previous\" href=\"#\" />\n        <Pagination.Item href=\"#\">1</Pagination.Item>\n        <Pagination.Item href=\"#\" isCurrent>\n          2\n        </Pagination.Item>\n        <Pagination.Item role=\"ellipsis\" />\n        <Pagination.Item role=\"next\" href=\"#\" />\n        <Pagination.Item role=\"last\" href=\"#\" />\n      </Pagination.List>\n    </Pagination>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/simple-pagination-demo": {
    "component": "@/components/docs/navigation/simple-pagination-demo",
    "raw": "'use client'\n\nimport { Pagination } from 'ui'\n\nexport default function SimplePaginationDemo() {\n  return (\n    <Pagination>\n      <Pagination.List>\n        <Pagination.Item role=\"first\" href=\"#\" />\n        <Pagination.Item role=\"previous\" href=\"#\" />\n        <Pagination.Section aria-label=\"Pagination Segment\" className=\"rounded-lg border\">\n          <Pagination.Item role=\"label\">1</Pagination.Item>\n          <Pagination.Item role=\"separator\" />\n          <Pagination.Item className=\"text-muted-fg\" role=\"label\">\n            10\n          </Pagination.Item>\n        </Pagination.Section>\n        <Pagination.Item role=\"next\" href=\"#\" />\n        <Pagination.Item role=\"last\" href=\"#\" />\n      </Pagination.List>\n    </Pagination>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/link-unstyled-demo": {
    "component": "@/components/docs/navigation/link-unstyled-demo",
    "raw": "'use client'\n\nimport { Link } from 'ui'\n\nexport default function LinkUnstyledDemo() {\n  return <Link href=\"#unstyled\">Label</Link>\n}\n",
    "type": "docs"
  },
  "navigation/tabs-orientation-demo": {
    "component": "@/components/docs/navigation/tabs-orientation-demo",
    "raw": "'use client'\n\nimport { Tabs } from 'ui'\n\nexport default function TabsOrientationDemo() {\n  return (\n    <Tabs orientation=\"vertical\" aria-label=\"E-Learning Platform\">\n      <Tabs.List>\n        <Tabs.Tab id=\"c\">Courses</Tabs.Tab>\n        <Tabs.Tab id=\"e\">Exams</Tabs.Tab>\n        <Tabs.Tab id=\"g\">Grades</Tabs.Tab>\n        <Tabs.Tab id=\"f\">Forums</Tabs.Tab>\n        <Tabs.Tab id=\"p\">Profile</Tabs.Tab>\n      </Tabs.List>\n      <Tabs.Panel id=\"c\">\n        Enroll in courses and access learning materials on various subjects.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"e\">Take practice exams and quizzes to test your knowledge.</Tabs.Panel>\n      <Tabs.Panel id=\"g\">View your grades and track your academic progress.</Tabs.Panel>\n      <Tabs.Panel id=\"f\">\n        Participate in discussion forums with other students and instructors.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"p\">Update your profile and customize your learning preferences.</Tabs.Panel>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/link-button-demo": {
    "component": "@/components/docs/navigation/link-button-demo",
    "raw": "'use client'\n\nimport { buttonStyles, Link } from 'ui'\n\nexport default function LinkButtonDemo() {\n  return (\n    <div className=\"flex gap-2\">\n      <Link className={buttonStyles()} href=\"#use-as-button\">\n        Link\n      </Link>\n      <Link className={buttonStyles({ appearance: 'outline' })} href=\"#use-as-button\">\n        Link\n      </Link>\n      <Link\n        className={buttonStyles({ appearance: 'plain', shape: 'circle' })}\n        href=\"#use-as-button\"\n      >\n        Link\n      </Link>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/link-demo": {
    "component": "@/components/docs/navigation/link-demo",
    "raw": "'use client'\n\nimport { Link } from 'ui'\n\nexport default function LinkDemo() {\n  return (\n    <Link intent=\"primary\" href=\"#basic\">\n      Label\n    </Link>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/breadcrumbs-demo": {
    "component": "@/components/docs/navigation/breadcrumbs-demo",
    "raw": "'use client'\n\nimport { Breadcrumb, Breadcrumbs } from 'ui'\n\nexport default function BreadcrumbsDemo() {\n  return (\n    <Breadcrumbs onAction={() => {}}>\n      <Breadcrumb href=\"/\">Home</Breadcrumb>\n      <Breadcrumb href=\"/design-system\">Design System</Breadcrumb>\n      <Breadcrumb>Collections</Breadcrumb>\n    </Breadcrumbs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/link-disabled-demo": {
    "component": "@/components/docs/navigation/link-disabled-demo",
    "raw": "'use client'\n\nimport { Link } from 'ui'\n\nexport default function LinkDisabledDemo() {\n  return (\n    <div className=\"flex gap-4\">\n      <Link isDisabled intent=\"primary\" href=\"#intent-1\">\n        Label\n      </Link>\n      <Link isDisabled intent=\"secondary\" href=\"#intent-2\">\n        Label\n      </Link>\n      <Link isDisabled intent=\"lad/primary\" href=\"#intent-3\">\n        Label\n      </Link>\n      <Link isDisabled intent=\"danger\" href=\"#intent-4\">\n        Label\n      </Link>\n      <Link isDisabled href=\"#intent-5\">\n        Label\n      </Link>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs-disabled-demo": {
    "component": "@/components/docs/navigation/tabs-disabled-demo",
    "raw": "'use client'\n\nimport { Tabs } from 'ui'\n\nexport default function TabsDisabledDemo() {\n  return (\n    <Tabs disabledKeys={['c', 'a']} aria-label=\"Services\">\n      <Tabs.List>\n        <Tabs.Tab id=\"o\">Overview</Tabs.Tab>\n        <Tabs.Tab id=\"c\">Contact</Tabs.Tab>\n        <Tabs.Tab id=\"a\">About Us</Tabs.Tab>\n      </Tabs.List>\n      <Tabs.Panel id=\"o\">\n        Welcome to our service! Here, you’ll find a brief overview of what we offer, our mission,\n        and how we strive to provide value to our customers.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"c\">\n        Get in touch with us through our contact page. We are here to help you with any inquiries,\n        support requests, or feedback you may have.\n      </Tabs.Panel>\n      <Tabs.Panel id=\"a\">\n        Learn more about our company, our history, and the team behind our success. We are dedicated\n        to delivering the best service to our customers.\n      </Tabs.Panel>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "controls/slider-range-demo": {
    "component": "@/components/docs/controls/slider-range-demo",
    "raw": "'use client'\n\nimport { Slider } from 'ui'\n\nexport default function SliderRangeDemo() {\n  return <Slider defaultValue={[25, 75]} label=\"Distance Range\" />\n}\n",
    "type": "docs"
  },
  "controls/context-menu-disabled-demo": {
    "component": "@/components/docs/controls/context-menu-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ContextMenu } from 'ui'\n\nexport default function ContextMenuDisabledDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n      <ContextMenu.Content>\n        <ContextMenu.Item id=\"view\">View</ContextMenu.Item>\n        <ContextMenu.Item id=\"edit\">Edit</ContextMenu.Item>\n        <ContextMenu.Item id=\"gsu\" isDisabled>\n          Generate Short URL\n        </ContextMenu.Item>\n      </ContextMenu.Content>\n    </ContextMenu>\n  )\n}\n",
    "type": "docs"
  },
  "controls/toolbar-disabled-demo": {
    "component": "@/components/docs/controls/toolbar-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n  IconAlignmentJustify,\n  IconAlignmentJustifyFill,\n  IconAlignmentRight,\n  IconAlignmentRightFill,\n  IconCamera,\n  IconCameraFill,\n  IconCursor,\n  IconCursorFill,\n  IconGallery,\n  IconGalleryFill,\n  IconPencilBox,\n  IconPencilBoxFill,\n  IconToolbox,\n  IconToolboxFill\n} from 'justd-icons'\nimport { Toggle, Toolbar } from 'ui'\n\nexport default function ToolbarDisabledDemo() {\n  return (\n    <Toolbar aria-label=\"Toolbox\">\n      <Toolbar.Group aria-label=\"Toolbox\">\n        <Toggle isDisabled aria-label=\"Cursor\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconCursorFill /> : <IconCursor />}</>}\n        </Toggle>\n        <Toggle aria-label=\"Pencil Box\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconPencilBoxFill /> : <IconPencilBox />}</>}\n        </Toggle>\n        <Toggle aria-label=\"Pencil Box\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconToolboxFill /> : <IconToolbox />}</>}\n        </Toggle>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Toolbar.Group isDisabled aria-label=\"Gallery\">\n        <Toolbar.Item aria-label=\"Camera\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconCameraFill /> : <IconCamera />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Gallery\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconGalleryFill /> : <IconGallery />}</>}\n        </Toolbar.Item>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Toolbar.Group aria-label=\"Alignment\">\n        <Toggle aria-label=\"Align Right\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentRightFill /> : <IconAlignmentRight />}</>\n          )}\n        </Toggle>\n        <Toggle aria-label=\"Align Justify\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentJustifyFill /> : <IconAlignmentJustify />}</>\n          )}\n        </Toggle>\n      </Toolbar.Group>\n    </Toolbar>\n  )\n}\n",
    "type": "docs"
  },
  "controls/slider-orientation-demo": {
    "component": "@/components/docs/controls/slider-orientation-demo",
    "raw": "'use client'\n\nimport React, { useState } from 'react'\n\nimport { Card, Description, Slider } from 'ui'\n\nexport default function SliderOrientationDemo() {\n  const [equalizer, setEqualizer] = useState({\n    subBass: 40,\n    bass: 50,\n    lowMid: 60,\n    mid: 70,\n    highMid: 65,\n    presence: 75,\n    brilliance: 80\n  })\n\n  const handleSliderChange = (name: string, value: number) => {\n    setEqualizer((prev) => ({ ...prev, [name]: value }))\n  }\n\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex justify-center [&>*]:w-6 gap-4\">\n        <Slider\n          aria-label=\"Sub Bass\"\n          value={equalizer.subBass}\n          onChange={(newValue) => handleSliderChange('subBass', newValue as number)}\n          orientation=\"vertical\"\n        />\n        <Slider\n          aria-label=\"Bass\"\n          value={equalizer.bass}\n          onChange={(newValue) => handleSliderChange('bass', newValue as number)}\n          orientation=\"vertical\"\n        />\n        <Slider\n          aria-label=\"Low Mid\"\n          value={equalizer.lowMid}\n          onChange={(newValue) => handleSliderChange('lowMid', newValue as number)}\n          orientation=\"vertical\"\n        />\n        <Slider\n          aria-label=\"Mid\"\n          value={equalizer.mid}\n          onChange={(newValue) => handleSliderChange('mid', newValue as number)}\n          orientation=\"vertical\"\n        />\n        <Slider\n          aria-label=\"High Mid\"\n          value={equalizer.highMid}\n          onChange={(newValue) => handleSliderChange('highMid', newValue as number)}\n          orientation=\"vertical\"\n        />\n        <Slider\n          aria-label=\"Presence\"\n          value={equalizer.presence}\n          onChange={(newValue) => handleSliderChange('presence', newValue as number)}\n          orientation=\"vertical\"\n        />\n        <Slider\n          aria-label=\"Brilliance\"\n          value={equalizer.brilliance}\n          onChange={(newValue) => handleSliderChange('brilliance', newValue as number)}\n          orientation=\"vertical\"\n        />\n      </div>\n      <Description className=\"mt-6 block text-center\">Equilizer</Description>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "controls/command-menu-disabled-demo": {
    "component": "@/components/docs/controls/command-menu-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, CommandMenu } from 'ui'\n\nexport default function CommandMenuDisabledDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Section heading=\"Suggestions\">\n            <CommandMenu.Item>\n              PhpStorm\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              WebStorm\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item disabled>\n              Warp\n              <CommandMenu.Description>Need to enable</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item disabled>\n              Sublime Text\n              <CommandMenu.Description>Need to enable</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              VS Code\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item disabled>\n              Atom\n              <CommandMenu.Description>Killed</CommandMenu.Description>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/switch-variant-demo": {
    "component": "@/components/docs/controls/switch-variant-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Select, Switch } from 'ui'\n\nconst items = ['primary', 'secondary', 'success', 'danger', 'warning', 'info'].map((item) => ({\n  value: item,\n  label: item\n}))\nexport default function SwitchVariantDemo() {\n  const [intent, setIntent] = React.useState('primary')\n\n  return (\n    <>\n      <OptionPreview>\n        <Select selectedKey={intent} onSelectionChange={(v) => setIntent(v as any)}>\n          <Select.Trigger />\n          <Select.List items={items}>\n            {(item) => (\n              <Select.Option id={item.value} textValue={item.value}>\n                {item.label}\n              </Select.Option>\n            )}\n          </Select.List>\n        </Select>\n      </OptionPreview>\n      <Switch defaultSelected intent={intent as any}>\n        Label\n      </Switch>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/toolbar-demo": {
    "component": "@/components/docs/controls/toolbar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n  IconAlignmentCenter,\n  IconAlignmentCenterFill,\n  IconAlignmentJustify,\n  IconAlignmentJustifyFill,\n  IconAlignmentLeft,\n  IconAlignmentLeftFill,\n  IconAlignmentRight,\n  IconAlignmentRightFill,\n  IconBold,\n  IconBoldFill,\n  IconChevronDown,\n  IconGallery,\n  IconGrid4,\n  IconItalic,\n  IconItalicFill,\n  IconLink,\n  IconRedo,\n  IconStrikeThrough,\n  IconStrikeThroughFill,\n  IconUnderline,\n  IconUnderlineFill,\n  IconUndo\n} from 'justd-icons'\nimport { Button, Checkbox, Menu, Toolbar } from 'ui'\n\nexport default function ToolbarDemo() {\n  return (\n    <Toolbar aria-label=\"Toolbars\">\n      <Toolbar.Group aria-label=\"Text Formatting Options\">\n        <Toolbar.Item defaultSelected aria-label=\"Bold\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconBoldFill /> : <IconBold />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Italic\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconItalicFill /> : <IconItalic />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Underline\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconUnderlineFill /> : <IconUnderline />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Strikethrough\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconStrikeThroughFill /> : <IconStrikeThrough />}</>\n          )}\n        </Toolbar.Item>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Toolbar.Group aria-label=\"Alignment\">\n        <Toolbar.Item aria-label=\"Align Left\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentLeftFill /> : <IconAlignmentLeft />}</>\n          )}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Align Center\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentCenterFill /> : <IconAlignmentCenter />}</>\n          )}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Align Right\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentRightFill /> : <IconAlignmentRight />}</>\n          )}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Align Justify\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentJustifyFill /> : <IconAlignmentJustify />}</>\n          )}\n        </Toolbar.Item>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Checkbox>Spell Check</Checkbox>\n      <Toolbar.Group className=\"ml-auto\">\n        <Menu>\n          <Button aria-label=\"Other options\" appearance=\"outline\" size=\"small\">\n            Options...\n            <IconChevronDown />\n          </Button>\n          <Menu.Content showArrow placement=\"bottom right\">\n            <Menu.Item>\n              <IconUndo />\n              Undo\n            </Menu.Item>\n            <Menu.Item>\n              <IconRedo />\n              Redo\n            </Menu.Item>\n            <Menu.Item>\n              <IconLink />\n              Insert Link\n            </Menu.Item>\n            <Menu.Item>\n              <IconGallery />\n              Insert Image\n            </Menu.Item>\n            <Menu.Item>\n              <IconGrid4 />\n              Insert Grid\n            </Menu.Item>\n          </Menu.Content>\n        </Menu>\n      </Toolbar.Group>\n    </Toolbar>\n  )\n}\n",
    "type": "docs"
  },
  "controls/command-menu-section-demo": {
    "component": "@/components/docs/controls/command-menu-section-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, CommandMenu } from 'ui'\n\nexport default function CommandMenuSectionDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Section heading=\"Pages\">\n            <CommandMenu.Item asChild>\n              <a href=\"/\">Home</a>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <a href=\"/docs/getting-started/installation\">Docs</a>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <a href=\"/components\">Components</a>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n          <CommandMenu.Separator />\n          <CommandMenu.Section heading=\"Users\">\n            {users.map((user) => (\n              <CommandMenu.Item key={user.id}>{user.name}</CommandMenu.Item>\n            ))}\n          </CommandMenu.Section>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n  { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n  { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n  { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n  { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n  { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n  {\n    id: 7,\n    name: 'Miss Jacinthe Gerlach DVM',\n    image_url: 'https://i.pravatar.cc/150?img=7'\n  },\n  {\n    id: 8,\n    name: 'Miss Stephania Schaefer Sr.',\n    image_url: 'https://i.pravatar.cc/150?img=8'\n  },\n  { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n  { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n",
    "type": "docs"
  },
  "controls/command-menu-trigger-by-keyboard-demo": {
    "component": "@/components/docs/controls/command-menu-trigger-by-keyboard-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCreditCard, IconCube, IconGear, IconHome2, IconNotes, IconShield } from 'justd-icons'\nimport Link from 'next/link'\nimport { CommandMenu } from 'ui'\n\nexport default function CommandMenuTriggerByKeyboardDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === '/' && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setIsOpen((open: boolean) => !open)\n      }\n    }\n\n    document.addEventListener('keydown', down)\n\n    return () => document.removeEventListener('keydown', down)\n  }, [setIsOpen])\n  return (\n    <>\n      ⌘ /\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Section separator heading=\"Pages\">\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconHome2 /> Home\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconNotes /> Docs\n                <CommandMenu.Keyboard keys=\"⌘k\" />\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconCube /> Components\n              </Link>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n          <CommandMenu.Section heading=\"Dashboard\">\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconCreditCard /> Billing\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconGear /> Settings\n                <CommandMenu.Keyboard keys=\"⌘s\" />\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconShield /> Security\n              </Link>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/accordion-default-expand-demo": {
    "component": "@/components/docs/controls/accordion-default-expand-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Accordion } from 'ui'\n\nexport default function AccordionDefaultExpandDemo() {\n  return (\n    <Accordion defaultExpandedKeys={[1, 2]}>\n      {faqs.map((item, index) => (\n        <Accordion.Item key={index} currentId={index}>\n          <Accordion.Trigger>{item.q}</Accordion.Trigger>\n          <Accordion.Content>{item.a}</Accordion.Content>\n        </Accordion.Item>\n      ))}\n    </Accordion>\n  )\n}\n\nconst faqs = [\n  {\n    q: 'How do I reset my password?',\n    a: \"You can reset your password by going to the settings page and clicking on 'Reset Password'.\"\n  },\n  {\n    q: 'Can I change my subscription plan?',\n    a: 'Yes, you can upgrade or downgrade your subscription plan at any time from your account settings.'\n  },\n  {\n    q: 'Where can I view my past orders?',\n    a: \"Your past orders can be viewed in the 'Orders' section of your account dashboard.\"\n  },\n  {\n    q: 'What is the return policy?',\n    a: 'Our return policy allows you to return products within 30 days of purchase for a full refund or exchange.'\n  },\n  {\n    q: 'How do I contact customer support?',\n    a: 'You can contact customer support via email at support@example.com or through our online chat system.'\n  }\n]\n",
    "type": "docs"
  },
  "controls/context-menu-separator-demo": {
    "component": "@/components/docs/controls/context-menu-separator-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ContextMenu } from 'ui'\n\nexport default function ContextMenuSeparatorDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n      <ContextMenu.Content>\n        <ContextMenu.Item id=\"view\">View</ContextMenu.Item>\n        <ContextMenu.Item id=\"edit\">Edit</ContextMenu.Item>\n        <ContextMenu.Separator />\n        <ContextMenu.Item id=\"gsu\">Generate Short URL</ContextMenu.Item>\n      </ContextMenu.Content>\n    </ContextMenu>\n  )\n}\n",
    "type": "docs"
  },
  "controls/accordion-demo": {
    "component": "@/components/docs/controls/accordion-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Accordion } from 'ui'\n\nexport default function AccordionDemo() {\n  return (\n    <Accordion>\n      <Accordion.Item currentId={1}>\n        <Accordion.Trigger>What is a VPS?</Accordion.Trigger>\n        <Accordion.Content>\n          A VPS is a Virtual Private Server, which provides dedicated resources on a server shared\n          with other users, offering more control and customization than shared hosting.\n        </Accordion.Content>\n      </Accordion.Item>\n\n      <Accordion.Item currentId={2}>\n        <Accordion.Trigger>What is cloud hosting?</Accordion.Trigger>\n        <Accordion.Content>\n          Cloud hosting utilizes multiple servers to balance load and maximize uptime. Instead of\n          being hosted on a single server, your data and resources are spread across multiple\n          servers.\n        </Accordion.Content>\n      </Accordion.Item>\n\n      <Accordion.Item currentId={3}>\n        <Accordion.Trigger>What is shared hosting?</Accordion.Trigger>\n        <Accordion.Content>\n          Shared hosting is a type of web hosting where multiple websites share the same server and\n          its resources. It's an affordable option, but may have limitations on performance and\n          customization.\n        </Accordion.Content>\n      </Accordion.Item>\n      <Accordion.Item currentId={4}>\n        <Accordion.Trigger>What is dedicated hosting?</Accordion.Trigger>\n        <Accordion.Content>\n          Dedicated hosting means your website is hosted on a single server exclusively reserved for\n          your site. This provides maximum performance and customization, but at a higher cost.\n        </Accordion.Content>\n      </Accordion.Item>\n    </Accordion>\n  )\n}\n",
    "type": "docs"
  },
  "controls/accordion-disabled-demo": {
    "component": "@/components/docs/controls/accordion-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Accordion } from 'ui'\n\nexport default function AccordionDisabledDemo() {\n  return (\n    <Accordion disabledKeys={[1, 2, 4]}>\n      {faqs.map((item, index) => (\n        <Accordion.Item key={index} currentId={index}>\n          <Accordion.Trigger>{item.q}</Accordion.Trigger>\n          <Accordion.Content>{item.a}</Accordion.Content>\n        </Accordion.Item>\n      ))}\n    </Accordion>\n  )\n}\n\nconst faqs = [\n  {\n    q: 'Do you offer gift wrapping options?',\n    a: 'Yes, we provide gift wrapping services for a small additional charge at checkout.'\n  },\n  {\n    q: 'Can I return a gift card?',\n    a: 'Sorry, gift cards are non-refundable and cannot be returned.'\n  },\n  {\n    q: 'What are your store hours?',\n    a: 'Our store is open from 9 AM to 9 PM on weekdays and 10 AM to 6 PM on weekends.'\n  },\n  {\n    q: 'Do you have a loyalty program?',\n    a: 'Yes, we have a loyalty program where you can earn points for every purchase and redeem them for discounts.'\n  },\n  {\n    q: 'How do I update my billing information?',\n    a: 'You can update your billing information through your account settings on our website.'\n  },\n  {\n    q: 'Are there any discounts for bulk orders?',\n    a: 'Yes, we offer discounts on bulk orders. Please contact our sales team for more details.'\n  }\n]\n",
    "type": "docs"
  },
  "controls/slider-controlled-demo": {
    "component": "@/components/docs/controls/slider-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Slider } from 'ui'\n\nexport default function SliderControlledDemo() {\n  const [temperature, setTemperature] = React.useState<number>(31)\n  const [saturation, setSaturation] = React.useState<number[]>([21, 86])\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <Slider\n          value={temperature}\n          onChange={(v) => setTemperature(v as number)}\n          label=\"Temperature\"\n          description={`Current temperature: ${temperature ?? '-'}`}\n        />\n      </div>\n      <div>\n        <Slider\n          value={saturation}\n          onChange={(v) => setSaturation(v as number[])}\n          label=\"Saturation\"\n          description={`Current saturation: ${saturation ?? '-'}`}\n        />\n      </div>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "controls/slider-demo": {
    "component": "@/components/docs/controls/slider-demo",
    "raw": "'use client'\n\nimport { Slider } from 'ui'\n\nexport default function SliderDemo() {\n  return <Slider label=\"Volume\" />\n}\n",
    "type": "docs"
  },
  "controls/slider-prefix-suffix-demo": {
    "component": "@/components/docs/controls/slider-prefix-suffix-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconVolumeFull, IconVolumeOff } from 'justd-icons'\nimport { Slider } from 'ui'\n\nexport default function SliderPrefixSuffixDemo() {\n  const [volume, setVolume] = React.useState<number>(0.5)\n  return (\n    <div className=\"max-w-2xl items-center flex gap-4 [&>[data-slot=icon]]:translate-y-3.5 [&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:shrink-0\">\n      <IconVolumeOff />\n      <Slider value={volume} onChange={(v) => setVolume(v as number)} label=\"Volume\" />\n      <IconVolumeFull />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "controls/toolbar-orientation-demo": {
    "component": "@/components/docs/controls/toolbar-orientation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n  IconAlignmentCenter,\n  IconAlignmentCenterFill,\n  IconAlignmentJustify,\n  IconAlignmentJustifyFill,\n  IconAlignmentLeft,\n  IconAlignmentLeftFill,\n  IconCamera,\n  IconCameraFill,\n  IconCursor,\n  IconCursorFill,\n  IconDotsVertical,\n  IconGallery,\n  IconGalleryFill,\n  IconGrid4,\n  IconLink,\n  IconPencilBox,\n  IconPencilBoxFill,\n  IconRedo,\n  IconToolbox,\n  IconToolboxFill,\n  IconUndo\n} from 'justd-icons'\nimport { Button, Menu, Toggle, Toolbar } from 'ui'\n\nexport default function ToolbarOrientationDemo() {\n  return (\n    <Toolbar aria-label=\"Toolbox\" orientation=\"vertical\">\n      <Toolbar.Group aria-label=\"Toolbox\">\n        <Toolbar.Item aria-label=\"Cursor\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconCursorFill /> : <IconCursor />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Pencil Box\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconPencilBoxFill /> : <IconPencilBox />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Pencil Box\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconToolboxFill /> : <IconToolbox />}</>}\n        </Toolbar.Item>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Toolbar.Group aria-label=\"Gallery\">\n        <Toolbar.Item aria-label=\"Camera\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconCameraFill /> : <IconCamera />}</>}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Gallery\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => <>{isSelected ? <IconGalleryFill /> : <IconGallery />}</>}\n        </Toolbar.Item>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Toolbar.Group aria-label=\"Alignment\">\n        <Toggle aria-label=\"Align Left\" size=\"square-petite\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentLeftFill /> : <IconAlignmentLeft />}</>\n          )}\n        </Toggle>\n        <Toolbar.Item aria-label=\"Align Center\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentCenterFill /> : <IconAlignmentCenter />}</>\n          )}\n        </Toolbar.Item>\n        <Toolbar.Item aria-label=\"Align Justify\" appearance=\"outline\">\n          {({ isSelected }) => (\n            <>{isSelected ? <IconAlignmentJustifyFill /> : <IconAlignmentJustify />}</>\n          )}\n        </Toolbar.Item>\n      </Toolbar.Group>\n      <Toolbar.Separator />\n      <Toolbar.Group>\n        <Menu>\n          <Button aria-label=\"Other options\" appearance=\"outline\" size=\"square-petite\">\n            <IconDotsVertical />\n          </Button>\n          <Menu.Content showArrow placement=\"right\">\n            <Menu.Item>\n              <IconUndo />\n              Undo\n            </Menu.Item>\n            <Menu.Item>\n              <IconRedo />\n              Redo\n            </Menu.Item>\n            <Menu.Item>\n              <IconLink />\n              Insert Link\n            </Menu.Item>\n            <Menu.Item>\n              <IconGallery />\n              Insert Image\n            </Menu.Item>\n            <Menu.Item>\n              <IconGrid4 />\n              Insert Grid\n            </Menu.Item>\n          </Menu.Content>\n        </Menu>\n      </Toolbar.Group>\n    </Toolbar>\n  )\n}\n",
    "type": "docs"
  },
  "controls/slider-disabled-demo": {
    "component": "@/components/docs/controls/slider-disabled-demo",
    "raw": "'use client'\n\nimport { Slider } from 'ui'\n\nexport default function SliderDisabledDemo() {\n  return <Slider isDisabled label=\"Volume\" />\n}\n",
    "type": "docs"
  },
  "controls/context-menu-demo": {
    "component": "@/components/docs/controls/context-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ContextMenu } from 'ui'\n\nexport default function ContextMenuDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n      <ContextMenu.Content className=\"sm:min-w-56\">\n        <ContextMenu.Item>Back</ContextMenu.Item>\n        <ContextMenu.Item isDisabled>Forward</ContextMenu.Item>\n        <ContextMenu.Item>Reload</ContextMenu.Item>\n        <ContextMenu.Separator />\n        <ContextMenu.Item>Bookmark</ContextMenu.Item>\n        <ContextMenu.Item>Save as</ContextMenu.Item>\n        <ContextMenu.Item>\n          Select all\n          <ContextMenu.Keyboard keys=\"⌘A\" />\n        </ContextMenu.Item>\n        <ContextMenu.Separator />\n        <ContextMenu.Item>View source</ContextMenu.Item>\n        <ContextMenu.Item>Inspect Accessibility</ContextMenu.Item>\n        <ContextMenu.Item>Inspect</ContextMenu.Item>\n      </ContextMenu.Content>\n    </ContextMenu>\n  )\n}\n",
    "type": "docs"
  },
  "controls/command-menu-demo": {
    "component": "@/components/docs/controls/command-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconBill, IconCube, IconGear, IconHome, IconNotes, IconShield } from 'justd-icons'\nimport Link from 'next/link'\nimport { Avatar, Button, CommandMenu } from 'ui'\n\nexport default function CommandMenuDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Section separator heading=\"Pages\">\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconHome /> Home\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconNotes /> Docs\n                <CommandMenu.Keyboard keys=\"⌘k\" />\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconCube /> Components\n              </Link>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n          <CommandMenu.Section separator heading=\"Dashboard\">\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconBill /> Billing\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconGear /> Settings\n                <CommandMenu.Keyboard keys=\"⌘s\" />\n              </Link>\n            </CommandMenu.Item>\n            <CommandMenu.Item asChild>\n              <Link href=\"#\">\n                <IconShield /> Security\n              </Link>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n          <CommandMenu.Section heading=\"Team\">\n            {users.map((user) => (\n              <CommandMenu.Item key={user.id}>\n                <Avatar src={user.image_url} />\n                {user.name}\n              </CommandMenu.Item>\n            ))}\n          </CommandMenu.Section>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n  { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n  { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n  { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n  { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' }\n]\n",
    "type": "docs"
  },
  "controls/context-menu-danger-demo": {
    "component": "@/components/docs/controls/context-menu-danger-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ContextMenu } from 'ui'\n\nexport default function ContextMenuDangerDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n      <ContextMenu.Content>\n        <ContextMenu.Item>Open</ContextMenu.Item>\n        <ContextMenu.Item>Rename</ContextMenu.Item>\n        <ContextMenu.Item>Duplicate</ContextMenu.Item>\n        <ContextMenu.Item>Share</ContextMenu.Item>\n        <ContextMenu.Separator />\n        <ContextMenu.Item isDanger>Delete</ContextMenu.Item>\n      </ContextMenu.Content>\n    </ContextMenu>\n  )\n}\n",
    "type": "docs"
  },
  "controls/slider-step-demo": {
    "component": "@/components/docs/controls/slider-step-demo",
    "raw": "'use client'\n\nimport { Slider } from 'ui'\n\nexport default function SliderStepDemo() {\n  return <Slider step={10} description=\"Step in 10\" label=\"Progress tracking\" />\n}\n",
    "type": "docs"
  },
  "controls/switch-demo": {
    "component": "@/components/docs/controls/switch-demo",
    "raw": "'use client'\n\nimport { useTheme } from 'next-themes'\nimport { Switch } from 'ui'\n\nexport default function SwitchDemo() {\n  const { resolvedTheme, setTheme } = useTheme()\n  return (\n    <Switch onChange={() => setTheme(resolvedTheme === 'light' ? 'dark' : 'light')}>\n      Switch Theme\n    </Switch>\n  )\n}\n",
    "type": "docs"
  },
  "controls/context-menu-item-details-demo": {
    "component": "@/components/docs/controls/context-menu-item-details-demo",
    "raw": "import { ContextMenu } from 'ui'\n\nexport default function ContextMenuItemDetailsDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n      <ContextMenu.Content items={roles}>\n        {(item) => (\n          <ContextMenu.Item id={item.id} textValue={item.name}>\n            <ContextMenu.ItemDetails label={item.name} description={item.description} />\n          </ContextMenu.Item>\n        )}\n      </ContextMenu.Content>\n    </ContextMenu>\n  )\n}\n\nconst roles = [\n  { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n  { id: 2, name: 'Editor', description: 'Can edit content but has limited access to settings' },\n  { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n  { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n  { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n",
    "type": "docs"
  },
  "controls/command-menu-separator-demo": {
    "component": "@/components/docs/controls/command-menu-separator-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, CommandMenu } from 'ui'\n\nexport default function CommandMenuSeparatorDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Profile Overview</a>\n          </CommandMenu.Item>\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Profile Settings</a>\n          </CommandMenu.Item>\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Security Settings</a>\n          </CommandMenu.Item>\n          <CommandMenu.Separator />\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Notification Preferences</a>\n          </CommandMenu.Item>\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Privacy Settings</a>\n          </CommandMenu.Item>\n          <CommandMenu.Separator />\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Billing Information</a>\n          </CommandMenu.Item>\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Subscription Plans</a>\n          </CommandMenu.Item>\n          <CommandMenu.Separator />\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Connected Apps</a>\n          </CommandMenu.Item>\n          <CommandMenu.Item asChild>\n            <a href=\"#\">Logout</a>\n          </CommandMenu.Item>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/accordion-border-hidden-demo": {
    "component": "@/components/docs/controls/accordion-border-hidden-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n  IconBell,\n  IconCreditCard,\n  IconDownload,\n  IconSettings,\n  IconShield,\n  IconSupport\n} from 'justd-icons'\nimport { Accordion } from 'ui'\n\nexport default function AccordionWithIconDemo() {\n  return (\n    <Accordion hideBorder>\n      {items.map((item, index) => (\n        <Accordion.Item key={index} currentId={index}>\n          <Accordion.Trigger>{item.title}</Accordion.Trigger>\n          <Accordion.Content>{item.description}</Accordion.Content>\n        </Accordion.Item>\n      ))}\n    </Accordion>\n  )\n}\n\nconst items = [\n  {\n    icon: <IconSettings />,\n    title: 'Personal Settings',\n    description:\n      'You can update your profile, change your password, and manage your account settings here.'\n  },\n  {\n    icon: <IconBell />,\n    title: 'Notifications',\n    description:\n      'Manage your notifications preferences, including alerts, emails, and push notifications.'\n  },\n  {\n    icon: <IconShield />,\n    title: 'Privacy Options',\n    description:\n      'Adjust your privacy settings to control who can see your information and contact you.'\n  },\n  {\n    icon: <IconCreditCard />,\n    title: 'Payment Methods',\n    description:\n      'Add, remove, or update your payment methods including credit cards and digital wallets.'\n  },\n  {\n    icon: <IconSupport />,\n    title: 'Support Center',\n    description: 'Find help with common issues, or contact support for further assistance.'\n  },\n  {\n    icon: <IconDownload />,\n    title: 'Download Data',\n    description:\n      'Request a download of all your data we have stored, including account activity and user data.'\n  }\n]\n",
    "type": "docs"
  },
  "controls/command-menu-keyboard-demo": {
    "component": "@/components/docs/controls/command-menu-keyboard-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, CommandMenu } from 'ui'\n\nexport default function CommandMenuKeyboardDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Item>\n            Account Settings\n            <CommandMenu.Keyboard keys=\"⌘A\" />\n          </CommandMenu.Item>\n\n          <CommandMenu.Item>\n            Profile\n            <CommandMenu.Keyboard keys=\"⌘P\" />\n          </CommandMenu.Item>\n\n          <CommandMenu.Item>\n            Notifications\n            <CommandMenu.Keyboard keys=\"⌘N\" />\n          </CommandMenu.Item>\n\n          <CommandMenu.Item>\n            Privacy Settings\n            <CommandMenu.Keyboard keys=\"⌘S\" />\n          </CommandMenu.Item>\n\n          <CommandMenu.Item>\n            Billing Information\n            <CommandMenu.Keyboard keys=\"⌘B\" />\n          </CommandMenu.Item>\n\n          <CommandMenu.Item>\n            Logout\n            <CommandMenu.Keyboard keys=\"⌘L\" />\n          </CommandMenu.Item>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/command-menu-description-demo": {
    "component": "@/components/docs/controls/command-menu-description-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCube } from 'justd-icons'\nimport { Button, CommandMenu } from 'ui'\n\nexport default function CommandMenuDescriptionDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu\n        messageOnEmpty={false}\n        hideCloseButton\n        hideSearchIndicator\n        isOpen={isOpen}\n        onOpenChange={setIsOpen}\n      >\n        <CommandMenu.Input placeholder=\"Search for apps and commands...\" />\n        <CommandMenu.Empty className=\"grid place-content-center\">\n          <div className=\"text-center\">\n            <IconCube className=\"inline\" />\n            <p className=\"mt-2\">No results found.</p>\n          </div>\n        </CommandMenu.Empty>\n\n        <CommandMenu.List>\n          <CommandMenu.Section separator heading=\"Suggestions\">\n            <CommandMenu.Item>\n              PhpStorm\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              WebStorm\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              Warp\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n\n          <CommandMenu.Section separator heading=\"Applications\">\n            <CommandMenu.Item>\n              Terminal\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              Docker\n              <CommandMenu.Description>Application</CommandMenu.Description>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n\n          <CommandMenu.Section separator heading=\"Commands\">\n            <CommandMenu.Item>\n              git status\n              <CommandMenu.Description>Command</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              bun add\n              <CommandMenu.Description>Command</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              composer require\n              <CommandMenu.Description>Command</CommandMenu.Description>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n\n          <CommandMenu.Section heading=\"System Settings\">\n            <CommandMenu.Item>\n              Display Brightness\n              <CommandMenu.Description>System Settings</CommandMenu.Description>\n            </CommandMenu.Item>\n            <CommandMenu.Item>\n              Sound Output\n              <CommandMenu.Description>System Settings</CommandMenu.Description>\n            </CommandMenu.Item>\n          </CommandMenu.Section>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/command-menu-controlled-demo": {
    "component": "@/components/docs/controls/command-menu-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Avatar, Button, CommandMenu } from 'ui'\n\nexport default function CommandMenuControlledDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  const [value, setValue] = React.useState('')\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu onValueChange={setValue} value={value} isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input defaultValue={value} placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          {users.map((user) => (\n            <CommandMenu.Item key={user.id} value={user.name}>\n              <Avatar src={user.image_url} />\n              {user.name}{' '}\n              {user.name === value && (\n                <CommandMenu.Description>Selected: {value}</CommandMenu.Description>\n              )}\n            </CommandMenu.Item>\n          ))}\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n  { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n  { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n  { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n  { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n  { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n  {\n    id: 7,\n    name: 'Miss Jacinthe Gerlach DVM',\n    image_url: 'https://i.pravatar.cc/150?img=7'\n  },\n  {\n    id: 8,\n    name: 'Miss Stephania Schaefer Sr.',\n    image_url: 'https://i.pravatar.cc/150?img=8'\n  },\n  { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n  { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n",
    "type": "docs"
  },
  "controls/switch-controlled-demo": {
    "component": "@/components/docs/controls/switch-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, Switch } from 'ui'\n\nexport default function SwitchControlledDemo() {\n  const [darkMode, setDarkMode] = React.useState(false)\n  return (\n    <>\n      <Switch isSelected={darkMode} onChange={setDarkMode} value=\"dark_mode\">\n        Enable Dark Mode\n      </Switch>\n\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        Dark Mode is <strong>{darkMode ? 'enabled' : 'disabled'}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/context-menu-with-icon-demo": {
    "component": "@/components/docs/controls/context-menu-with-icon-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconDuplicate, IconFolder, IconHighlight, IconTrash, IconUpload } from 'justd-icons'\nimport { ContextMenu } from 'ui'\n\nexport default function ContextMenuWithIconDemo() {\n  return (\n    <ContextMenu>\n      <ContextMenu.Trigger>Right click me</ContextMenu.Trigger>\n      <ContextMenu.Content>\n        <ContextMenu.Item>\n          <IconFolder />\n          Open\n        </ContextMenu.Item>\n        <ContextMenu.Item>\n          <IconHighlight />\n          Rename\n        </ContextMenu.Item>\n        <ContextMenu.Item>\n          <IconDuplicate />\n          Duplicate\n        </ContextMenu.Item>\n        <ContextMenu.Item>\n          <IconUpload />\n          Share\n        </ContextMenu.Item>\n        <ContextMenu.Separator />\n        <ContextMenu.Item isDanger>\n          <IconTrash />\n          Delete\n        </ContextMenu.Item>\n      </ContextMenu.Content>\n    </ContextMenu>\n  )\n}\n",
    "type": "docs"
  },
  "controls/accordion-hide-indicator-demo": {
    "component": "@/components/docs/controls/accordion-hide-indicator-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Accordion } from 'ui'\n\nexport default function AccordionHideIndicatorDemo() {\n  return (\n    <Accordion hideIndicator>\n      {faqs.map((item, index) => (\n        <Accordion.Item key={index} currentId={index}>\n          <Accordion.Trigger>{item.q}</Accordion.Trigger>\n          <Accordion.Content>{item.a}</Accordion.Content>\n        </Accordion.Item>\n      ))}\n    </Accordion>\n  )\n}\n\nconst faqs = [\n  {\n    q: 'What payment methods are accepted?',\n    a: 'We accept all major credit cards, PayPal, and Apple Pay.'\n  },\n  {\n    q: 'How long does shipping take?',\n    a: 'Shipping times vary by location but typically take between 3-7 business days.'\n  },\n  {\n    q: 'Can I track my order?',\n    a: 'Yes, you can track your order using the tracking link provided in your shipping confirmation email.'\n  }\n]\n",
    "type": "docs"
  },
  "controls/command-menu-danger-item-demo": {
    "component": "@/components/docs/controls/command-menu-danger-item-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, CommandMenu } from 'ui'\n\nexport default function CommandMenuDangerItemDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button appearance=\"outline\" onPress={() => setIsOpen(true)}>\n        Open\n      </Button>\n      <CommandMenu isOpen={isOpen} onOpenChange={setIsOpen}>\n        <CommandMenu.Input placeholder=\"Quick search...\" />\n        <CommandMenu.List>\n          <CommandMenu.Section>\n            <CommandMenu.Item>System Shutdown</CommandMenu.Item>\n            <CommandMenu.Item isDanger>Format Disk</CommandMenu.Item>\n            <CommandMenu.Item>Restart Service</CommandMenu.Item>\n            <CommandMenu.Item>Empty Trash</CommandMenu.Item>\n            <CommandMenu.Item>Overwrite File</CommandMenu.Item>\n            <CommandMenu.Item isDanger>Reset Factory Settings</CommandMenu.Item>\n            <CommandMenu.Item>Disconnect Network</CommandMenu.Item>\n          </CommandMenu.Section>\n        </CommandMenu.List>\n      </CommandMenu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "controls/switch-disabled-demo": {
    "component": "@/components/docs/controls/switch-disabled-demo",
    "raw": "'use client'\n\nimport { Switch } from 'ui'\n\nexport default function SwitchDemo() {\n  return <Switch isDisabled>Dark Mode</Switch>\n}\n",
    "type": "docs"
  },
  "drag-and-drop/drop-zone-and-file-trigger-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-and-file-trigger-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { DropEvent } from '@react-types/shared'\nimport { IconGallery } from 'justd-icons'\nimport { isFileDropItem } from 'react-aria-components'\nimport { Description, DropZone, FileTrigger } from 'ui'\n\nexport default function DropZoneAndFileTriggerDemo() {\n  const [droppedImage, setDroppedImage] = React.useState<string | undefined>(undefined)\n\n  const onDropHandler = async (e: DropEvent) => {\n    const item = e.items\n      .filter(isFileDropItem)\n      .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n    if (item) {\n      const file = await item.getFile()\n      setDroppedImage(URL.createObjectURL(file))\n    }\n  }\n\n  const onSelectHandler = async (e: any) => {\n    if (e) {\n      const files = Array.from([...e])\n      const item = files[0]\n\n      if (item) {\n        setDroppedImage(URL.createObjectURL(item))\n      }\n    }\n  }\n  return (\n    <DropZone\n      getDropOperation={(types) =>\n        types.has('image/jpeg') || types.has('image/png') ? 'copy' : 'cancel'\n      }\n      onDrop={onDropHandler}\n    >\n      {droppedImage ? (\n        <img alt=\"\" src={droppedImage} className=\"aspect-square size-full object-contain\" />\n      ) : (\n        <div className=\"grid space-y-3\">\n          <div className=\"size-12 mx-auto grid place-content-center rounded-full border bg-secondary/70 group-data-[drop-target]:bg-primary/20 group-data-[drop-target]:border-primary/70\">\n            <IconGallery className=\"size-5\" />\n          </div>\n          <div className=\"justify-center flex\">\n            <FileTrigger\n              acceptedFileTypes={['image/png', 'image/jpeg']}\n              allowsMultiple={false}\n              onSelect={onSelectHandler}\n            >\n              Upload a file\n            </FileTrigger>\n          </div>\n          <Description>Or drag and drop PNG, JPG, GIF up to 10MB</Description>\n        </div>\n      )}\n      <input type=\"hidden\" name=\"image\" value={droppedImage} />\n    </DropZone>\n  )\n}\n",
    "type": "docs"
  },
  "drag-and-drop/drop-zone-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DropZone, Label } from 'ui'\n\nexport default function DropZoneDemo() {\n  const [dropped, setDropped] = React.useState(false)\n\n  return (\n    <DropZone onDrop={() => setDropped(true)}>\n      <Label>{dropped ? 'Drop nailed' : 'Toss your stuff here'}</Label>\n    </DropZone>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-wheel-controlled-demo": {
    "component": "@/components/docs/colors/color-wheel-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ControlledValues } from '@/components/docs/colors/controlled-values'\nimport { parseColor } from '@react-stately/color'\nimport { ColorThumb, ColorWheel, ColorWheelTrack } from 'ui'\n\nexport default function ColorWheelControlledDemo() {\n  const [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n  return (\n    <div className=\"grid gap-4 justify-center items-center sm:grid-cols-2\">\n      <div className=\"shrink-0 grid place-content-center\">\n        <ColorWheel\n          aria-label=\"Background color\"\n          value={color}\n          onChange={setColor}\n          outerRadius={105}\n          innerRadius={78}\n        >\n          <ColorWheelTrack />\n          <ColorThumb />\n        </ColorWheel>\n      </div>\n      <ControlledValues color={color} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/controlled-values": {
    "component": "@/components/docs/colors/controlled-values",
    "raw": "import React from 'react'\n\nimport type { ColorFormat } from '@react-types/color'\nimport { Card, ColorSwatch } from 'ui'\n\nconst formats: string[] = ['hex', 'hexa', 'rgb', 'rgba', 'hsl', 'hsla', 'hsb', 'hsba']\nexport function ControlledValues({ color }: { color: any }) {\n  return (\n    <Card className=\"p-3 min-w-[15.5rem] sm:min-w-72 text-center bg-transparent flex flex-col gap-y-2 [&>span]:flex [&>span]:gap-x-6 [&>span]:justify-between\">\n      {formats.map((format) => (\n        <span key={format}>\n          <span className=\"flex gap-x-1.5 items-center\">\n            <ColorSwatch\n              className=\"size-4 rounded\"\n              color={color.toString(format as ColorFormat | 'css' | undefined)}\n            />\n            <span className=\"uppercase text-xs\">{format}</span>\n          </span>\n          <span className=\"text-xs sm:text-sm\">\n            {color.toString(format as ColorFormat | 'css' | undefined)}\n          </span>\n        </span>\n      ))}\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-field-disabled-demo": {
    "component": "@/components/docs/colors/color-field-disabled-demo",
    "raw": "'use client'\n\nimport { ColorField } from 'ui'\n\nexport default function ColorFieldDisabledDemo() {\n  return <ColorField isDisabled label=\"Color\" placeholder=\"#FAFAFA\" />\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-demo": {
    "component": "@/components/docs/colors/color-swatch-demo",
    "raw": "'use client'\n\nimport { ColorSwatch } from 'ui'\n\nexport default function ColorSwatchDemo() {\n  return <ColorSwatch aria-label=\"Current color\" color=\"#0d6efd\" />\n}\n",
    "type": "docs"
  },
  "colors/color-wheel-disabled-demo": {
    "component": "@/components/docs/colors/color-wheel-disabled-demo",
    "raw": "'use client'\n\nimport { ColorThumb, ColorWheel, ColorWheelTrack } from 'ui'\n\nexport default function ColorWheelDisabledDemo() {\n  return (\n    <ColorWheel\n      aria-label=\"Background color is disabled\"\n      isDisabled\n      outerRadius={105}\n      innerRadius={78}\n    >\n      <ColorWheelTrack />\n      <ColorThumb />\n    </ColorWheel>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-field-with-prefix-demo": {
    "component": "@/components/docs/colors/color-field-with-prefix-demo",
    "raw": "'use client'\n\nimport { IconColors } from 'justd-icons'\nimport { ColorField } from 'ui'\n\nexport default function ColorFieldWithPrefixDemo() {\n  return <ColorField label=\"Color\" prefix={<IconColors />} placeholder=\"#FAFAFA\" />\n}\n",
    "type": "docs"
  },
  "colors/color-slider-disabled-demo": {
    "component": "@/components/docs/colors/color-slider-disabled-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from 'ui'\n\nexport default function ColorSliderDisabledDemo() {\n  return <ColorSlider isDisabled channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\" />\n}\n",
    "type": "docs"
  },
  "colors/color-area-channel-demo": {
    "component": "@/components/docs/colors/color-area-channel-demo",
    "raw": "'use client'\n\nimport { ColorArea, ColorThumb } from 'ui'\n\nexport default function ColorAreaChannelDemo() {\n  return (\n    <ColorArea xChannel=\"alpha\" yChannel=\"blue\">\n      <ColorThumb />\n    </ColorArea>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-custom-colors-demo": {
    "component": "@/components/docs/colors/color-picker-custom-colors-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerCustomColorsDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return (\n    <ColorPicker\n      enableColorFormatSelection\n      enableColorSwatch\n      colors={[\n        '#eef8ff',\n        '#d8eeff',\n        '#b9e0ff',\n        '#89cfff',\n        '#52b4ff',\n        '#2a91ff',\n        '#0d6efd',\n        '#0c5ae9',\n        '#1149bc',\n        '#144194',\n        '#11295a'\n      ]}\n      value={color}\n      onChange={setColor}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-with-placeholder-demo": {
    "component": "@/components/docs/colors/color-picker-with-placeholder-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerWithPlaceholderDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return <ColorPicker placeholder=\"Select a color\" value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-area-demo": {
    "component": "@/components/docs/colors/color-area-demo",
    "raw": "'use client'\n\nimport { ColorArea, ColorThumb as Thumb } from 'ui'\n\nexport default function ColorAreaDemo() {\n  return (\n    <ColorArea>\n      <Thumb />\n    </ColorArea>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-controlled-demo": {
    "component": "@/components/docs/colors/color-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ControlledValues } from '@/components/docs/colors/controlled-values'\nimport { type Color } from 'react-aria-components'\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerControlledDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  const colorChangeHandler = (v: Color) => {\n    setColor(v)\n  }\n  return (\n    <div className=\"flex flex-col lg:flex-row gap-2 lg:gap-4\">\n      <ColorPicker className=\"min-w-56\" value={color} onChange={(v) => colorChangeHandler(v)} />\n      <ControlledValues color={color} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-picker-item-disabled-demo": {
    "component": "@/components/docs/colors/color-swatch-picker-item-disabled-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { ControlledValues } from '@/components/docs/colors/controlled-values'\nimport { parseColor } from '@react-stately/color'\nimport { ColorSwatchPicker, ColorSwatchPickerItem } from 'ui'\n\nexport default function ColorSwatchPickerDemo() {\n  const [value, setValue] = React.useState(parseColor('#0d6efd'))\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <ColorSwatchPicker\n        aria-label=\"Pick color\"\n        value={value}\n        onChange={setValue}\n        className=\"flex justify-center gap-2\"\n      >\n        <ColorSwatchPickerItem isDisabled color=\"#f59e0b\" />\n        <ColorSwatchPickerItem color=\"#84cc16\" />\n        <ColorSwatchPickerItem color=\"#0d6efd\" />\n        <ColorSwatchPickerItem isDisabled color=\"#ec4899\" />\n        <ColorSwatchPickerItem isDisabled color=\"#f43f5e\" />\n      </ColorSwatchPicker>\n\n      <ControlledValues color={value} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-slider-demo": {
    "component": "@/components/docs/colors/color-slider-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from 'ui'\n\nexport default function ColorSliderDemo() {\n  return <ColorSlider channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\" />\n}\n",
    "type": "docs"
  },
  "colors/color-field-with-suffix-demo": {
    "component": "@/components/docs/colors/color-field-with-suffix-demo",
    "raw": "'use client'\n\nimport { IconColors } from 'justd-icons'\nimport { ColorField } from 'ui'\n\nexport default function ColorFieldWithSuffixDemo() {\n  return <ColorField label=\"Color\" suffix={<IconColors />} placeholder=\"#FAFAFA\" />\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-controlled-demo": {
    "component": "@/components/docs/colors/color-swatch-controlled-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { ControlledValues } from '@/components/docs/colors/controlled-values'\nimport { parseColor } from '@react-stately/color'\nimport { ColorSwatchPicker, ColorSwatchPickerItem } from 'ui'\n\nexport default function ColorSwatchPickerDemo() {\n  const [value, setValue] = React.useState(parseColor('#0d6efd'))\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <ColorSwatchPicker\n        aria-label=\"Pick color\"\n        value={value}\n        onChange={setValue}\n        className=\"flex justify-center gap-2\"\n      >\n        <ColorSwatchPickerItem color=\"#f59e0b\" />\n        <ColorSwatchPickerItem color=\"#84cc16\" />\n        <ColorSwatchPickerItem color=\"#0d6efd\" />\n        <ColorSwatchPickerItem color=\"#ec4899\" />\n        <ColorSwatchPickerItem color=\"#f43f5e\" />\n      </ColorSwatchPicker>\n      <ControlledValues color={value} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-with-description-demo": {
    "component": "@/components/docs/colors/color-picker-with-description-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerWithDescriptionDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return (\n    <ColorPicker\n      label=\"Theme Color\"\n      description=\"Snag a color for the app theme\"\n      value={color}\n      onChange={setColor}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-field-demo": {
    "component": "@/components/docs/colors/color-field-demo",
    "raw": "'use client'\n\nimport { ColorField } from 'ui'\n\nexport default function ColorFieldDemo() {\n  return <ColorField label=\"Color\" placeholder=\"#FAFAFA\" />\n}\n",
    "type": "docs"
  },
  "colors/color-slider-with-label-demo": {
    "component": "@/components/docs/colors/color-slider-with-label-demo",
    "raw": "import { ColorSlider } from 'ui'\n\nexport default function ColorSliderWithLabelDemo() {\n  return <ColorSlider label=\"Color Customizer\" channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\" />\n}\n",
    "type": "docs"
  },
  "colors/color-area-space-demo": {
    "component": "@/components/docs/colors/color-area-space-demo",
    "raw": "'use client'\n\nimport { ColorArea, ColorThumb } from 'ui'\n\nexport default function ColorAreaSpaceDemo() {\n  return (\n    <ColorArea colorSpace=\"rgb\">\n      <ColorThumb />\n    </ColorArea>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-wheel-demo": {
    "component": "@/components/docs/colors/color-wheel-demo",
    "raw": "'use client'\n\nimport { ColorThumb, ColorWheel, ColorWheelTrack } from 'ui'\n\nexport default function ColorWheelDemo() {\n  return (\n    <ColorWheel aria-label=\"Background color\" outerRadius={105} innerRadius={78}>\n      <ColorWheelTrack />\n      <ColorThumb />\n    </ColorWheel>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-demo": {
    "component": "@/components/docs/colors/color-picker-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return <ColorPicker label=\"Color Picker\" value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-slider-controlled-demo": {
    "component": "@/components/docs/colors/color-slider-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ControlledValues } from '@/components/docs/colors/controlled-values'\nimport { ColorSlider, defaultColor } from 'ui'\n\nexport default function ColorSliderControlledDemo() {\n  const [value, setValue] = React.useState(defaultColor)\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <ColorSlider channel=\"hue\" value={value} onChange={setValue} />\n      <ControlledValues color={value} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-area-controlled-demo": {
    "component": "@/components/docs/colors/color-area-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ControlledValues } from '@/components/docs/colors/controlled-values'\nimport { parseColor } from '@react-stately/color'\nimport { ColorArea, ColorThumb } from 'ui'\n\nexport default function ColorAreaControlledDemo() {\n  const [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n\n  return (\n    <div className=\"flex flex-col lg:flex-row gap-2 lg:gap-4\">\n      <ColorArea value={value} onChange={setValue}>\n        <ColorThumb />\n      </ColorArea>\n      <ControlledValues color={value} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-enable-swatch-demo": {
    "component": "@/components/docs/colors/color-picker-enable-swatch-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type Color } from 'react-aria-components'\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerEnableSwatchDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  const colorChangeHandler = (v: Color) => {\n    setColor(v)\n  }\n  return <ColorPicker enableColorSwatch value={color} onChange={(v) => colorChangeHandler(v)} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-disabled-demo": {
    "component": "@/components/docs/colors/color-picker-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from '@react-stately/color'\nimport { ColorPicker } from 'ui'\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState(parseColor('hsl(216, 98%, 52%)'))\n  return <ColorPicker isDisabled label=\"Color Picker\" value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-with-label-demo": {
    "component": "@/components/docs/colors/color-picker-with-label-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerWithLabelDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return <ColorPicker label=\"Theme Color\" value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-enable-selection-format-demo": {
    "component": "@/components/docs/colors/color-picker-enable-selection-format-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerEnableSelectionFormatDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return <ColorPicker enableColorFormatSelection value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-combination-demo": {
    "component": "@/components/docs/colors/color-picker-combination-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type Color } from 'react-aria-components'\nimport { ColorPicker } from 'ui'\n\nexport default function ColorPickerCombinationDemo() {\n  const [color, setColor] = React.useState('')\n\n  const handleChange = (value: Color) => {\n    setColor(value as unknown as string)\n  }\n  return (\n    <ColorPicker\n      aria-label=\"Color picker\"\n      enableColorFormatSelection\n      enableColorSwatch\n      defaultValue={color}\n      onChange={handleChange}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-area-disabled-demo": {
    "component": "@/components/docs/colors/color-area-disabled-demo",
    "raw": "'use client'\n\nimport { ColorArea, ColorThumb as Thumb } from 'ui'\n\nexport default function ColorAreaDisabledDemo() {\n  return (\n    <ColorArea isDisabled>\n      <Thumb />\n    </ColorArea>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-picker-demo": {
    "component": "@/components/docs/colors/color-swatch-picker-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { parseColor } from '@react-stately/color'\nimport { ColorSwatchPicker, ColorSwatchPickerItem } from 'ui'\n\nexport default function ColorSwatchPickerDemo() {\n  const [value, setValue] = React.useState(parseColor('#0d6efd'))\n  return (\n    <ColorSwatchPicker\n      aria-label=\"Pick color\"\n      value={value}\n      onChange={setValue}\n      className=\"grid grid-cols-3 lg:grid-cols-6 gap-2\"\n    >\n      <ColorSwatchPickerItem color=\"#f59e0b\" />\n      <ColorSwatchPickerItem color=\"#84cc16\" />\n      <ColorSwatchPickerItem color=\"#0d6efd\" />\n      <ColorSwatchPickerItem color=\"#ec4899\" />\n      <ColorSwatchPickerItem color=\"#f43f5e\" />\n    </ColorSwatchPicker>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-slider-without-output-demo": {
    "component": "@/components/docs/colors/color-slider-without-output-demo",
    "raw": "'use client'\n\nimport { ColorSlider } from 'ui'\n\nexport default function ColorSliderWithoutOutputDemo() {\n  return <ColorSlider channel=\"hue\" showOutput={false} defaultValue=\"hsl(0, 100%, 50%)\" />\n}\n",
    "type": "docs"
  },
  "colors/color-field-controlled-demo": {
    "component": "@/components/docs/colors/color-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ControlledValues } from '@/components/docs/colors/controlled-values'\nimport { type Color, parseColor } from '@react-stately/color'\nimport { ColorField } from 'ui'\n\nexport default function ColorFieldControlledDemo() {\n  const [color, setColor] = React.useState(parseColor('#FAFAFA'))\n  return (\n    <div className=\"flex flex-col lg:flex-row gap-2 lg:gap-4\">\n      <ColorField\n        className=\"min-w-56\"\n        value={color}\n        aria-label=\"Pick a color\"\n        onChange={(newColor: Color | null) => newColor && setColor(newColor)}\n        placeholder=\"#FAFAFA\"\n      />\n      <ControlledValues color={color} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select-disabled-demo": {
    "component": "@/components/docs/pickers/select-disabled-demo",
    "raw": "'use client'\n\nimport { Select } from 'ui'\n\nconst software = [\n  { id: 1, name: 'Adobe Photoshop' }\n  //...\n]\n\nexport default function SelectDisabledDemo() {\n  return (\n    <Select label=\"Design software\" isDisabled placeholder=\"Select a software\">\n      <Select.Trigger />\n      <Select.List items={software}>\n        {(item) => (\n          <Select.Option id={item.id} textValue={item.name}>\n            {item.name}\n          </Select.Option>\n        )}\n      </Select.List>\n    </Select>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/multiple-select-disabled-demo": {
    "component": "@/components/docs/pickers/multiple-select-disabled-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\nimport type { SelectedKey } from 'ui'\nimport { MultipleSelect, Tag } from 'ui'\n\nexport default function MultipleSelectDisabledDemo() {\n  const selectedItems = useListData<SelectedKey>({\n    initialItems: []\n  })\n  return (\n    <MultipleSelect\n      isDisabled\n      className=\"max-w-xs\"\n      label=\"Fruits\"\n      selectedItems={selectedItems}\n      items={fruits}\n      tag={(item) => <Tag.Item textValue={item.name}>{item.name}</Tag.Item>}\n    >\n      {(item) => {\n        return <MultipleSelect.Option textValue={item.name}>{item.name}</MultipleSelect.Option>\n      }}\n    </MultipleSelect>\n  )\n}\n\nconst fruits: SelectedKey[] = [{ id: 1, name: 'Apple' }]\n",
    "type": "docs"
  },
  "pickers/multiple-select-min-max-demo": {
    "component": "@/components/docs/pickers/multiple-select-min-max-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\nimport type { SelectedKey } from 'ui'\nimport { MultipleSelect, Tag } from 'ui'\n\nconst tags = [\n  { id: 1, name: 'Cooking' },\n  { id: 2, name: 'Gardening' },\n  { id: 3, name: 'Meditation' },\n  { id: 4, name: 'Parenting' },\n  { id: 5, name: 'DIY Projects' },\n  { id: 6, name: 'Mindfulness' },\n  { id: 7, name: 'Travel Tips' },\n  { id: 8, name: 'Pet Care' },\n  { id: 9, name: 'Home Decor' },\n  { id: 10, name: 'Sustainable Living' }\n]\n\nexport default function MultipleSelectMinMaxDemo() {\n  const selectedItems = useListData<SelectedKey>({\n    initialItems: [tags[0]]\n  })\n  return (\n    <MultipleSelect\n      className=\"max-w-xs\"\n      label=\"Select tags\"\n      description=\"You can select up to 4 tags\"\n      max={4}\n      selectedItems={selectedItems}\n      items={tags}\n      tag={(item) => <Tag.Item textValue={item.name}>{item.name}</Tag.Item>}\n    >\n      {(item) => {\n        return <MultipleSelect.Option textValue={item.name}>{item.name}</MultipleSelect.Option>\n      }}\n    </MultipleSelect>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-controlled-demo": {
    "component": "@/components/docs/pickers/combo-box-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ComboBox, Description } from 'ui'\n\nconst sports = [\n  { id: 1, name: 'Football' },\n  { id: 2, name: 'Basketball' },\n  { id: 3, name: 'Baseball' },\n  { id: 4, name: 'Soccer' },\n  { id: 5, name: 'Tennis' },\n  { id: 6, name: 'Cricket' },\n  { id: 7, name: 'Hockey' },\n  { id: 8, name: 'Rugby' },\n  { id: 9, name: 'Golf' }\n]\n\nexport default function ComboBoxControlledDemo() {\n  const [sport, setSport] = React.useState('')\n  return (\n    <>\n      <ComboBox\n        onInputChange={setSport}\n        inputValue={sport}\n        placeholder=\"Select a sports\"\n        label=\"Sports\"\n      >\n        <ComboBox.Input />\n        <ComboBox.List items={sports}>\n          {(item) => (\n            <ComboBox.Option key={item.id} id={item.id} textValue={item.name}>\n              {item.name}\n            </ComboBox.Option>\n          )}\n        </ComboBox.List>\n      </ComboBox>\n      <Description className=\"mt-2 block [&>strong]:text-fg text-muted-fg\">\n        You have selected: <strong>{sport}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/multiple-select-demo": {
    "component": "@/components/docs/pickers/multiple-select-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\nimport type { SelectedKey } from 'ui'\nimport { MultipleSelect, Tag } from 'ui'\n\nexport default function MultipleSelectDemo() {\n  const selectedItems = useListData<SelectedKey>({\n    initialItems: [fruits[0]]\n  })\n  return (\n    <MultipleSelect\n      className=\"max-w-xs\"\n      label=\"Fruits\"\n      selectedItems={selectedItems}\n      items={fruits}\n      tag={(item) => <Tag.Item textValue={item.name}>{item.name}</Tag.Item>}\n    >\n      {(item) => {\n        return <MultipleSelect.Option textValue={item.name}>{item.name}</MultipleSelect.Option>\n      }}\n    </MultipleSelect>\n  )\n}\n\nconst fruits: SelectedKey[] = [\n  { id: 1, name: 'Apple' },\n  { id: 2, name: 'Banana' },\n  { id: 3, name: 'Cherry' },\n  { id: 4, name: 'Date' },\n  { id: 5, name: 'Elderberry' },\n  { id: 6, name: 'Fig' },\n  { id: 7, name: 'Grape' },\n  { id: 8, name: 'Honeydew' },\n  { id: 9, name: 'Kiwi' },\n  { id: 10, name: 'Lemon' },\n  { id: 11, name: 'Mango' },\n  { id: 12, name: 'Nectarine' },\n  { id: 13, name: 'Orange' },\n  { id: 14, name: 'Papaya' },\n  { id: 15, name: 'Quince' },\n  { id: 16, name: 'Raspberry' },\n  { id: 17, name: 'Strawberry' },\n  { id: 18, name: 'Tangerine' },\n  { id: 19, name: 'Ugli Fruit' },\n  { id: 20, name: 'Watermelon' }\n]\n",
    "type": "docs"
  },
  "pickers/combo-box-readonly-demo": {
    "component": "@/components/docs/pickers/combo-box-readonly-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from 'ui'\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n  //...\n]\nexport default function ComboBoxReadonlyDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isReadOnly>\n      <ComboBox.List items={users}>\n        {(item) => (\n          <ComboBox.Option key={item.id} id={item.id} textValue={item.name}>\n            <Avatar src={item.image_url} />\n            {item.name}\n          </ComboBox.Option>\n        )}\n      </ComboBox.List>\n    </ComboBox>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-demo": {
    "component": "@/components/docs/pickers/combo-box-demo",
    "raw": "'use client'\n\nimport { ComboBox } from 'ui'\n\nexport default function ComboBoxDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\">\n      <ComboBox.Input />\n      <ComboBox.List items={users}>\n        {(item) => (\n          <ComboBox.Option id={item.id} textValue={item.name}>\n            {item.name}\n          </ComboBox.Option>\n        )}\n      </ComboBox.List>\n    </ComboBox>\n  )\n}\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n  { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n  { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n  { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n  { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n  { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n  {\n    id: 7,\n    name: 'Miss Jacinthe Gerlach DVM',\n    image_url: 'https://i.pravatar.cc/150?img=7'\n  },\n  {\n    id: 8,\n    name: 'Miss Stephania Schaefer Sr.',\n    image_url: 'https://i.pravatar.cc/150?img=8'\n  },\n  { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n  { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n",
    "type": "docs"
  },
  "pickers/select-demo": {
    "component": "@/components/docs/pickers/select-demo",
    "raw": "'use client'\n\nimport { Select } from 'ui'\n\nexport const software = [\n  { id: 1, name: 'Adobe Photoshop' },\n  { id: 2, name: 'Sketch' },\n  { id: 3, name: 'Figma' },\n  { id: 4, name: 'Adobe XD' },\n  { id: 5, name: 'InVision' }\n]\nexport default function SelectDemo() {\n  return (\n    <Select label=\"Design software\" placeholder=\"Select a software\">\n      <Select.Trigger />\n      <Select.List items={software}>\n        {(item) => (\n          <Select.Option id={item.id} textValue={item.name}>\n            {item.name}\n          </Select.Option>\n        )}\n      </Select.List>\n    </Select>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/multiple-select-controlled-demo": {
    "component": "@/components/docs/pickers/multiple-select-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { useListData } from 'react-stately'\nimport type { SelectedKey } from 'ui'\nimport { Description, MultipleSelect, Tag } from 'ui'\n\nconst tags = [\n  { id: 1, name: 'Travel' },\n  { id: 2, name: 'Food' },\n  { id: 3, name: 'Fashion' },\n  { id: 4, name: 'Music' },\n  { id: 5, name: 'Photography' }\n]\n\nexport default function MultipleSelectControlledDemo() {\n  const selectedItems = useListData<SelectedKey>({\n    initialItems: []\n  })\n\n  return (\n    <>\n      <MultipleSelect\n        className=\"max-w-xs\"\n        onItemInserted={(key) => console.log('on item inserted', key)}\n        onItemCleared={(key) => console.log('on item cleared', key)}\n        label=\"Select tags\"\n        selectedItems={selectedItems}\n        items={tags}\n        tag={(item) => <Tag.Item textValue={item.name}>{item.name}</Tag.Item>}\n      >\n        {(item) => {\n          return (\n            <MultipleSelect.Option id={item.id} textValue={item.name}>\n              {item.name}\n            </MultipleSelect.Option>\n          )\n        }}\n      </MultipleSelect>\n      {selectedItems.items.length > 0 && (\n        <Description className=\"mt-2 max-w-xs block [&>strong]:text-fg text-muted-fg\">\n          You have selected:{' '}\n          <strong>{selectedItems.items.map((item) => item.name).join(', ')}</strong>\n        </Description>\n      )}\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select-validation-demo": {
    "component": "@/components/docs/pickers/select-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, Select } from 'ui'\n\nconst software = [\n  { id: 1, name: 'Adobe Photoshop' }\n  //...\n]\n\nexport default function SelectValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()} className=\"space-y-2\">\n      <Select label=\"Design software\" placeholder=\"Select a software\" isRequired>\n        <Select.Trigger />\n        <Select.List items={software}>\n          {(item) => (\n            <Select.Option id={item.id} textValue={item.name}>\n              {item.name}\n            </Select.Option>\n          )}\n        </Select.List>\n      </Select>\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/multiple-select-intent-demo": {
    "component": "@/components/docs/pickers/multiple-select-intent-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\nimport type { SelectedKey } from 'ui'\nimport { MultipleSelect, Tag } from 'ui'\n\nexport default function MultipleSelectIntentDemo() {\n  const selectedItems = useListData<SelectedKey>({\n    initialItems: [fruits[0]]\n  })\n  return (\n    <MultipleSelect\n      className=\"max-w-xs\"\n      intent=\"secondary\"\n      label=\"Fruits\"\n      selectedItems={selectedItems}\n      items={fruits}\n      tag={(item) => <Tag.Item textValue={item.name}>{item.name}</Tag.Item>}\n    >\n      {(item) => {\n        return <MultipleSelect.Option textValue={item.name}>{item.name}</MultipleSelect.Option>\n      }}\n    </MultipleSelect>\n  )\n}\n\nconst fruits: SelectedKey[] = [\n  { id: 1, name: 'Apple' },\n  { id: 2, name: 'Banana' },\n  { id: 3, name: 'Cherry' },\n  { id: 4, name: 'Date' },\n  { id: 5, name: 'Elderberry' },\n  { id: 6, name: 'Fig' },\n  { id: 7, name: 'Grape' },\n  { id: 8, name: 'Honeydew' },\n  { id: 9, name: 'Kiwi' },\n  { id: 10, name: 'Lemon' },\n  { id: 11, name: 'Mango' },\n  { id: 12, name: 'Nectarine' },\n  { id: 13, name: 'Orange' },\n  { id: 14, name: 'Papaya' },\n  { id: 15, name: 'Quince' },\n  { id: 16, name: 'Raspberry' },\n  { id: 17, name: 'Strawberry' },\n  { id: 18, name: 'Tangerine' },\n  { id: 19, name: 'Ugli Fruit' },\n  { id: 20, name: 'Watermelon' }\n]\n",
    "type": "docs"
  },
  "pickers/combo-box-avatar-demo": {
    "component": "@/components/docs/pickers/combo-box-avatar-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from 'ui'\n\nexport default function ComboBoxAvatarDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isRequired>\n      <ComboBox.Input />\n      <ComboBox.List items={users}>\n        {(item) => (\n          <ComboBox.Option id={item.id} textValue={item.name}>\n            <Avatar src={item.image_url} />\n            {item.name}\n          </ComboBox.Option>\n        )}\n      </ComboBox.List>\n    </ComboBox>\n  )\n}\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n  { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n  { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n  { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n  { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n  { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n  {\n    id: 7,\n    name: 'Miss Jacinthe Gerlach DVM',\n    image_url: 'https://i.pravatar.cc/150?img=7'\n  },\n  {\n    id: 8,\n    name: 'Miss Stephania Schaefer Sr.',\n    image_url: 'https://i.pravatar.cc/150?img=8'\n  },\n  { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n  { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n",
    "type": "docs"
  },
  "pickers/select-item-details-demo": {
    "component": "@/components/docs/pickers/select-item-details-demo",
    "raw": "'use client'\n\nimport { Select } from 'ui'\n\nexport default function SelectItemDetailsDemo() {\n  return (\n    <Select label=\"Roles\" placeholder=\"Select a role\">\n      <Select.Trigger />\n      <Select.List items={roles}>\n        {(item) => (\n          <Select.Option id={item.id} textValue={item.name}>\n            <Select.OptionDetails label={item.name} description={item.description} />\n          </Select.Option>\n        )}\n      </Select.List>\n    </Select>\n  )\n}\n\nconst roles = [\n  { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n  { id: 2, name: 'Editor', description: 'Can edit content but has limited access to settings' },\n  { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n  { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n  { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n",
    "type": "docs"
  },
  "pickers/select-controlled-demo": {
    "component": "@/components/docs/pickers/select-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Key } from 'react-aria-components'\nimport { Description, Select } from 'ui'\n\nexport const movies = [\n  { id: 1, title: 'Inception' },\n  { id: 2, title: 'The Dark Knight' },\n  { id: 3, title: 'Interstellar' },\n  { id: 4, title: 'The Matrix' },\n  { id: 5, title: 'Pulp Fiction' }\n]\n\nexport default function SelectControlledDemo() {\n  const [movie, setMovie] = React.useState<Key>('')\n  return (\n    <>\n      <Select\n        selectedKey={movie}\n        onSelectionChange={setMovie}\n        label=\"Movies\"\n        placeholder=\"Select a movie\"\n      >\n        <Select.Trigger />\n        <Select.List items={movies}>\n          {(item) => (\n            <Select.Option id={item.id} textValue={item.title}>\n              {item.title}\n            </Select.Option>\n          )}\n        </Select.List>\n      </Select>\n      <Description className=\"mt-2 block [&>strong]:text-fg text-muted-fg\">\n        You have selected: <strong>{movie}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/multiple-select-shape-demo": {
    "component": "@/components/docs/pickers/multiple-select-shape-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\nimport type { SelectedKey } from 'ui'\nimport { MultipleSelect, Tag } from 'ui'\n\nexport default function MultipleSelectShapeDemo() {\n  const selectedItems = useListData<SelectedKey>({\n    initialItems: [fruits[0]]\n  })\n  return (\n    <MultipleSelect\n      className=\"max-w-xs\"\n      label=\"Fruits\"\n      shape=\"circle\"\n      selectedItems={selectedItems}\n      items={fruits}\n      tag={(item) => <Tag.Item textValue={item.name}>{item.name}</Tag.Item>}\n    >\n      {(item) => {\n        return <MultipleSelect.Option textValue={item.name}>{item.name}</MultipleSelect.Option>\n      }}\n    </MultipleSelect>\n  )\n}\n\nconst fruits: SelectedKey[] = [\n  { id: 1, name: 'Apple' },\n  { id: 2, name: 'Banana' },\n  { id: 3, name: 'Cherry' },\n  { id: 4, name: 'Date' },\n  { id: 5, name: 'Elderberry' },\n  { id: 6, name: 'Fig' },\n  { id: 7, name: 'Grape' },\n  { id: 8, name: 'Honeydew' },\n  { id: 9, name: 'Kiwi' },\n  { id: 10, name: 'Lemon' },\n  { id: 11, name: 'Mango' },\n  { id: 12, name: 'Nectarine' },\n  { id: 13, name: 'Orange' },\n  { id: 14, name: 'Papaya' },\n  { id: 15, name: 'Quince' },\n  { id: 16, name: 'Raspberry' },\n  { id: 17, name: 'Strawberry' },\n  { id: 18, name: 'Tangerine' },\n  { id: 19, name: 'Ugli Fruit' },\n  { id: 20, name: 'Watermelon' }\n]\n",
    "type": "docs"
  },
  "pickers/combo-box-section-demo": {
    "component": "@/components/docs/pickers/combo-box-section-demo",
    "raw": "'use client'\n\nimport { ComboBox } from 'ui'\n\nexport default function ComboBoxSectionDemo() {\n  return (\n    <ComboBox placeholder=\"Select a author\" label=\"Authors\">\n      <ComboBox.Input />\n      <ComboBox.List items={movies}>\n        {(movie) => (\n          <ComboBox.Section title={movie.title} items={movie.genres}>\n            {(genre) => <ComboBox.Option textValue={genre.name}>{genre.name}</ComboBox.Option>}\n          </ComboBox.Section>\n        )}\n      </ComboBox.List>\n    </ComboBox>\n  )\n}\n\nconst movies = [\n  {\n    id: 1,\n    title: 'Inception',\n    genres: [\n      {\n        id: 101,\n        name: 'Sci-Fi'\n      },\n      {\n        id: 102,\n        name: 'Thriller'\n      }\n    ]\n  },\n  {\n    id: 2,\n    title: 'Titanic',\n    genres: [\n      {\n        id: 201,\n        name: 'Romance'\n      },\n      {\n        id: 202,\n        name: 'Drama'\n      }\n    ]\n  },\n  {\n    id: 3,\n    title: 'The Matrix',\n    genres: [\n      {\n        id: 301,\n        name: 'Action'\n      },\n      {\n        id: 302,\n        name: 'Sci-Fi'\n      }\n    ]\n  },\n  {\n    id: 4,\n    title: 'Gladiator',\n    genres: [\n      {\n        id: 401,\n        name: 'Action'\n      },\n      {\n        id: 402,\n        name: 'Drama'\n      }\n    ]\n  },\n  {\n    id: 5,\n    title: 'Casablanca',\n    genres: [\n      {\n        id: 501,\n        name: 'Romance'\n      },\n      {\n        id: 502,\n        name: 'Drama'\n      }\n    ]\n  }\n]\n",
    "type": "docs"
  },
  "pickers/select-section-demo": {
    "component": "@/components/docs/pickers/select-section-demo",
    "raw": "'use client'\n\nimport { Select } from 'ui'\n\nexport default function SelectSectionDemo() {\n  return (\n    <Select label=\"Countries\" placeholder=\"Select a country\">\n      <Select.Trigger />\n      <Select.List items={countries}>\n        {(country) => (\n          <Select.Section title={country.name} items={country.cities}>\n            {(city) => <Select.Option textValue={city.name}>{city.name}</Select.Option>}\n          </Select.Section>\n        )}\n      </Select.List>\n    </Select>\n  )\n}\n\nconst countries = [\n  {\n    id: 1,\n    name: 'Egypt',\n    cities: [\n      {\n        id: 101,\n        name: 'Cairo'\n      },\n      {\n        id: 102,\n        name: 'Alexandria'\n      },\n      {\n        id: 103,\n        name: 'Giza'\n      },\n      {\n        id: 104,\n        name: 'Luxor'\n      }\n    ]\n  },\n  {\n    id: 2,\n    name: 'Indonesia',\n    cities: [\n      {\n        id: 201,\n        name: 'Jakarta'\n      },\n      {\n        id: 202,\n        name: 'Bali'\n      },\n      {\n        id: 203,\n        name: 'Surabaya'\n      },\n      {\n        id: 204,\n        name: 'Bandung'\n      },\n      {\n        id: 205,\n        name: 'Medan'\n      }\n    ]\n  },\n  {\n    id: 3,\n    name: 'United States',\n    cities: [\n      {\n        id: 301,\n        name: 'New York City'\n      },\n      {\n        id: 302,\n        name: 'Los Angeles'\n      },\n      {\n        id: 303,\n        name: 'Chicago'\n      },\n      {\n        id: 304,\n        name: 'Houston'\n      }\n    ]\n  },\n  {\n    id: 4,\n    name: 'Canada',\n    cities: [\n      {\n        id: 401,\n        name: 'Toronto'\n      },\n      {\n        id: 402,\n        name: 'Vancouver'\n      },\n      {\n        id: 403,\n        name: 'Montreal'\n      }\n    ]\n  },\n  {\n    id: 5,\n    name: 'Australia',\n    cities: [\n      {\n        id: 501,\n        name: 'Sydney'\n      },\n      {\n        id: 502,\n        name: 'Melbourne'\n      },\n      {\n        id: 503,\n        name: 'Brisbane'\n      }\n    ]\n  },\n  {\n    id: 6,\n    name: 'Germany',\n    cities: [\n      {\n        id: 601,\n        name: 'Berlin'\n      },\n      {\n        id: 602,\n        name: 'Munich'\n      },\n      {\n        id: 603,\n        name: 'Frankfurt'\n      },\n      {\n        id: 604,\n        name: 'Hamburg'\n      }\n    ]\n  },\n  {\n    id: 7,\n    name: 'Japan',\n    cities: [\n      {\n        id: 701,\n        name: 'Tokyo'\n      },\n      {\n        id: 702,\n        name: 'Osaka'\n      },\n      {\n        id: 703,\n        name: 'Kyoto'\n      }\n    ]\n  }\n]\n",
    "type": "docs"
  },
  "pickers/combo-box-invalid-demo": {
    "component": "@/components/docs/pickers/combo-box-invalid-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from 'ui'\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n  //...\n]\nexport default function ComboBoxInvalidDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isInvalid>\n      <ComboBox.List items={users}>\n        {(item) => (\n          <ComboBox.Option key={item.id} id={item.id} textValue={item.name}>\n            <Avatar src={item.image_url} />\n            {item.name}\n          </ComboBox.Option>\n        )}\n      </ComboBox.List>\n    </ComboBox>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-disabled-demo": {
    "component": "@/components/docs/pickers/combo-box-disabled-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from 'ui'\n\nexport default function ComboBoxDisabledDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isDisabled>\n      <ComboBox.Input />\n      <ComboBox.List items={users}>\n        {(item) => (\n          <ComboBox.Option key={item.id} id={item.id} textValue={item.name}>\n            <Avatar src={item.image_url} />\n            {item.name}\n          </ComboBox.Option>\n        )}\n      </ComboBox.List>\n    </ComboBox>\n  )\n}\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n  //...\n]\n",
    "type": "docs"
  },
  "pickers/combo-box-validation-demo": {
    "component": "@/components/docs/pickers/combo-box-validation-demo",
    "raw": "'use client'\n\nimport { Avatar, Button, ComboBox, Form } from 'ui'\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n  //...\n]\nexport default function ComboBoxValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()} className=\"space-y-2\">\n      <ComboBox placeholder=\"Select a user\" label=\"Users\" isRequired>\n        <ComboBox.Input />\n        <ComboBox.List items={users}>\n          {(item) => (\n            <ComboBox.Option key={item.id} id={item.id} textValue={item.name}>\n              <Avatar src={item.image_url} />\n              {item.name}\n            </ComboBox.Option>\n          )}\n        </ComboBox.List>\n      </ComboBox>\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/separator-demo": {
    "component": "@/components/docs/surfaces/separator-demo",
    "raw": "'use client'\n\nimport { Separator } from 'ui'\n\nexport default function SeparatorDemo() {\n  return <Separator />\n}\n",
    "type": "docs"
  },
  "surfaces/grid-gap-demo": {
    "component": "@/components/docs/surfaces/grid-gap-demo",
    "raw": "import { Grid } from 'ui'\n\nexport default function GridGapDemo() {\n  return (\n    <Grid\n      columns={{\n        initial: 4,\n        sm: 5,\n        md: 6\n      }}\n      gap={{\n        initial: 2,\n        sm: 4\n      }}\n    >\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/show-more-controlled-demo": {
    "component": "@/components/docs/surfaces/show-more-controlled-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconChevronLgDown } from 'justd-icons'\nimport { ShowMore } from 'ui'\n\nexport default function ShowMoreControlledDemo() {\n  const [isExpanded, setIsExpanded] = React.useState(false)\n  return (\n    <div className=\"py-6\">\n      <ShowMore onChange={setIsExpanded} isSelected={isExpanded}>\n        {isExpanded ? 'Expand' : 'Collapse'}\n        <IconChevronLgDown\n          className={`${isExpanded ? 'rotate-180' : ''} size-4 transition-transform duration-200`}\n        />\n      </ShowMore>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-collections-demo": {
    "component": "@/components/docs/surfaces/grid-collections-demo",
    "raw": "'use client'\n\nimport { Card, Grid } from 'ui'\n\nexport default function GridCollectionsDemo() {\n  return (\n    <Grid aria-label=\"List articles\" columns={{ initial: 1, sm: 2, '2xl': 3 }} gap={2}>\n      <Grid.Collection items={articles}>\n        {(item) => (\n          <Grid.Item>\n            <Card>\n              <Card.Header>\n                <Card.Title>{item.title}</Card.Title>\n                <Card.Description>{item.description}</Card.Description>\n              </Card.Header>\n            </Card>\n          </Grid.Item>\n        )}\n      </Grid.Collection>\n    </Grid>\n  )\n}\n\nconst articles = [\n  {\n    id: 1,\n    title: 'Understanding React Hooks',\n    description:\n      \"Get the lowdown on React Hooks, how to use 'em, and best practices for those sleek functional components.\"\n  },\n  {\n    id: 2,\n    title: 'Mastering TypeScript',\n    description:\n      'Dive deep into TypeScript, from basic stuff to pro features, for building rock-solid apps.'\n  },\n  {\n    id: 3,\n    title: 'Laravel Eloquent Tips',\n    description:\n      'Check out advanced tricks for using Laravel Eloquent ORM to make your database game strong.'\n  },\n  {\n    id: 4,\n    title: 'Building with Next.js',\n    description:\n      'A full-on tutorial on creating server-rendered React apps with the Next.js framework.'\n  },\n  {\n    id: 5,\n    title: 'Inertia.js for Full-Stack Devs',\n    description:\n      'Learn how Inertia.js smooths out the gap between client-side frameworks and server-side apps.'\n  },\n  {\n    id: 6,\n    title: 'Optimizing Web Performance',\n    description: 'Tips and tricks to boost the performance and speed of your web apps.'\n  }\n]\n",
    "type": "docs"
  },
  "surfaces/card-login-form-demo": {
    "component": "@/components/docs/surfaces/card-login-form-demo",
    "raw": "'use client'\n\nimport { Button, Card, Checkbox, Link, TextField } from 'ui'\n\nexport default function CardLoginFormDemo() {\n  return (\n    <Card className=\"max-w-md mx-auto\">\n      <Card.Header>\n        <Card.Title>Login</Card.Title>\n        <Card.Description>Don't loose the level, just keep on going.</Card.Description>\n      </Card.Header>\n      <Card.Content className=\"space-y-6\">\n        <TextField isRequired label=\"Email\" placeholder=\"Enter your email\" />\n        <TextField isRequired label=\"Password\" type=\"password\" placeholder=\"Enter your password\" />\n        <div className=\"flex justify-between items-center\">\n          <Checkbox>Remember me</Checkbox>\n          <Link intent=\"primary\" href=\"#\">\n            Forgot password?\n          </Link>\n        </div>\n      </Card.Content>\n      <Card.Footer>\n        <Button className=\"w-full\">Login</Button>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-basic-demo": {
    "component": "@/components/docs/surfaces/grid-basic-demo",
    "raw": "'use client'\n\nimport { Grid } from 'ui'\n\nexport default function GridBasicDemo() {\n  return (\n    <div>\n      <Grid columns={6}>\n        <Grid.Item>\n          <div className=\"p-4 border-l border-y h-32\" />\n        </Grid.Item>\n        <Grid.Item>\n          <div className=\"p-4 border-l border-y h-32\" />\n        </Grid.Item>\n        <Grid.Item>\n          <div className=\"p-4 border-l border-y h-32\" />\n        </Grid.Item>\n        <Grid.Item>\n          <div className=\"p-4 border-l border-y h-32\" />\n        </Grid.Item>\n        <Grid.Item>\n          <div className=\"p-4 border-l border-y h-32\" />\n        </Grid.Item>\n        <Grid.Item>\n          <div className=\"p-4 border-l border-y h-32 border-r\" />\n        </Grid.Item>\n      </Grid>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/show-more-as-text-demo": {
    "component": "@/components/docs/surfaces/show-more-as-text-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { ShowMore } from 'ui'\n\nexport default function ShowMoreAsTextDemo() {\n  return (\n    <div className=\"py-6\">\n      <ShowMore as=\"text\" text=\"Or continue with\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/heading-tracking-demo": {
    "component": "@/components/docs/surfaces/heading-tracking-demo",
    "raw": "import { Heading } from 'ui'\n\nexport default function HeadingTrackingDemo() {\n  return <Heading tracking=\"tighter\">The quick brown fox jumps over the lazy dog</Heading>\n}\n",
    "type": "docs"
  },
  "surfaces/show-more-orientation-demo": {
    "component": "@/components/docs/surfaces/show-more-orientation-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { ShowMore } from 'ui'\n\nexport default function ShowMoreOrientationDemo() {\n  return <ShowMore orientation=\"vertical\" as=\"text\" text=\"Or\" className=\"h-56\" />\n}\n",
    "type": "docs"
  },
  "surfaces/card-table-demo": {
    "component": "@/components/docs/surfaces/card-table-demo",
    "raw": "'use client'\n\nimport { IconDotsVertical, IconEye, IconHighlight, IconTrash } from 'justd-icons'\nimport { Card, Menu, Pagination, Table } from 'ui'\n\nexport default function CardTableDemo() {\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Title>Users</Card.Title>\n        <Card.Description>Manage users, groups, and roles.</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        <Table aria-label=\"Users\">\n          <Table.Header>\n            <Table.Column>#</Table.Column>\n            <Table.Column isRowHeader>Name</Table.Column>\n            <Table.Column>Gender</Table.Column>\n            <Table.Column>Age</Table.Column>\n            <Table.Column>Occupation</Table.Column>\n            <Table.Column />\n          </Table.Header>\n          <Table.Body items={users}>\n            {(item) => (\n              <Table.Row id={item.id}>\n                <Table.Cell>{item.id}</Table.Cell>\n                <Table.Cell>{item.name}</Table.Cell>\n                <Table.Cell>{item.gender}</Table.Cell>\n                <Table.Cell>{item.age}</Table.Cell>\n                <Table.Cell>{item.occupation}</Table.Cell>\n                <Table.Cell className=\"flex justify-end\">\n                  <Menu>\n                    <Menu.Trigger>\n                      <IconDotsVertical />\n                    </Menu.Trigger>\n                    <Menu.Content showArrow placement=\"left\">\n                      <Menu.Item>\n                        <IconEye /> View\n                      </Menu.Item>\n                      <Menu.Item>\n                        <IconHighlight /> Edit\n                      </Menu.Item>\n                      <Menu.Separator />\n                      <Menu.Item isDanger>\n                        <IconTrash /> Delete\n                      </Menu.Item>\n                    </Menu.Content>\n                  </Menu>\n                </Table.Cell>\n              </Table.Row>\n            )}\n          </Table.Body>\n        </Table>\n      </Card.Content>\n      <Card.Footer>\n        <Pagination>\n          <Pagination.List>\n            <Pagination.Item role=\"first\" />\n            <Pagination.Item role=\"previous\" />\n            <Pagination.Section className=\"lg:hidden rounded-lg border\">\n              <Pagination.Item role=\"label\">1</Pagination.Item>\n              <Pagination.Item role=\"separator\" />\n              <Pagination.Item className=\"text-muted-fg\" role=\"label\">\n                {users.length}\n              </Pagination.Item>\n            </Pagination.Section>\n            <Pagination.Section className=\"lg:flex hidden\" items={pages}>\n              {(item) => (\n                <Pagination.Item id={item.value.toString()} isCurrent={item.value === 4} href=\"#\">\n                  {item.value}\n                </Pagination.Item>\n              )}\n            </Pagination.Section>\n            <Pagination.Item role=\"next\" />\n            <Pagination.Item role=\"last\" />\n          </Pagination.List>\n        </Pagination>\n      </Card.Footer>\n    </Card>\n  )\n}\n\nconst users = [\n  {\n    id: 1,\n    name: 'John Doe',\n    gender: 'Male',\n    age: 30,\n    occupation: 'Software Engineer'\n  },\n  {\n    id: 2,\n    name: 'Jane Smith',\n    gender: 'Female',\n    age: 25,\n    occupation: 'Marketing Manager'\n  },\n  {\n    id: 3,\n    name: 'Bob Johnson',\n    gender: 'Male',\n    age: 40,\n    occupation: 'Doctor'\n  },\n  {\n    id: 4,\n    name: 'Emily Chen',\n    gender: 'Female',\n    age: 28,\n    occupation: 'Teacher'\n  },\n  {\n    id: 5,\n    name: 'Michael Brown',\n    gender: 'Male',\n    age: 35,\n    occupation: 'Lawyer'\n  },\n  {\n    id: 6,\n    name: 'Sarah Lee',\n    gender: 'Female',\n    age: 32,\n    occupation: 'Designer'\n  },\n  {\n    id: 7,\n    name: 'Kevin White',\n    gender: 'Male',\n    age: 45,\n    occupation: 'CEO'\n  },\n  {\n    id: 8,\n    name: 'Lisa Nguyen',\n    gender: 'Female',\n    age: 29,\n    occupation: 'Engineer'\n  },\n  {\n    id: 9,\n    name: 'David Kim',\n    gender: 'Male',\n    age: 38,\n    occupation: 'Consultant'\n  },\n  {\n    id: 10,\n    name: 'Hannah Patel',\n    gender: 'Female',\n    age: 26,\n    occupation: 'Writer'\n  }\n]\nconst pages = Array.from({ length: users.length / 2 }, (_, i) => ({ value: i + 1 }))\n",
    "type": "docs"
  },
  "surfaces/heading-level-demo": {
    "component": "@/components/docs/surfaces/heading-level-demo",
    "raw": "import { Heading } from 'ui'\n\nexport default function HeadingLevelDemo() {\n  return <Heading level={2}>The quick brown fox jumps over the lazy dog</Heading>\n}\n",
    "type": "docs"
  },
  "surfaces/separator-orientation-demo": {
    "component": "@/components/docs/surfaces/separator-orientation-demo",
    "raw": "'use client'\n\nimport { Separator } from 'ui'\n\nexport default function SeparatorDemo() {\n  return <Separator orientation=\"vertical\" className=\"h-32\" />\n}\n",
    "type": "docs"
  },
  "surfaces/grid-responsive-demo": {
    "component": "@/components/docs/surfaces/grid-responsive-demo",
    "raw": "'use client'\n\nimport { Grid } from 'ui'\n\nexport default function GridResponsiveDemo() {\n  return (\n    <Grid\n      columns={{\n        initial: 3,\n        sm: 4,\n        md: 5,\n        xl: 6\n      }}\n      gap={{\n        initial: 2,\n        sm: 3,\n        lg: 4\n      }}\n    >\n      <Grid.Item>\n        <div className=\"p-4 border h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-32\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-32\" />\n      </Grid.Item>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-item-demo": {
    "component": "@/components/docs/surfaces/grid-item-demo",
    "raw": "'use client'\n\nimport { Grid } from 'ui'\n\nexport default function GridItemDemo() {\n  return (\n    <Grid debug columns={3} gap={4}>\n      <Grid.Item\n        colSpan={{\n          initial: 1,\n          sm: 2\n        }}\n        className=\"w-full h-24 grid place-content-center\"\n      >\n        1\n      </Grid.Item>\n      <Grid.Item className=\"w-full h-24 grid place-content-center\">2</Grid.Item>\n      <Grid.Item\n        colSpan={{\n          initial: 1,\n          sm: 3\n        }}\n        className=\"w-full h-24 grid place-content-center\"\n      >\n        3\n      </Grid.Item>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-debug-demo": {
    "component": "@/components/docs/surfaces/grid-debug-demo",
    "raw": "'use client'\n\nimport { Grid } from 'ui'\n\nexport default function GridDebugDemo() {\n  return (\n    <Grid debug columns={3} gap={4}>\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n      <Grid.Item className=\"w-full h-24\" />\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/heading-demo": {
    "component": "@/components/docs/surfaces/heading-demo",
    "raw": "import { Heading } from 'ui'\n\nexport default function HeadingDemo() {\n  return <Heading>The quick brown fox jumps over the lazy dog</Heading>\n}\n",
    "type": "docs"
  },
  "surfaces/card-demo": {
    "component": "@/components/docs/surfaces/card-demo",
    "raw": "'use client'\n\nimport { Button, Card } from 'ui'\n\nexport default function CardDemo() {\n  return (\n    <Card className=\"max-w-lg\">\n      <Card.Header>\n        <Card.Title>Monthly Report</Card.Title>\n        <Card.Description>Financial summary for June</Card.Description>\n      </Card.Header>\n      <Card.Content>\n        The monthly financial report shows a 15% increase in revenue compared to last month.\n      </Card.Content>\n      <Card.Footer>\n        <Button>View Details</Button>\n      </Card.Footer>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/show-more-demo": {
    "component": "@/components/docs/surfaces/show-more-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconChevronLgDown } from 'justd-icons'\nimport { cn, ShowMore } from 'ui'\n\nexport default function ShowMoreDemo() {\n  return (\n    <div className=\"py-6\">\n      <ShowMore>\n        {({ isSelected }) => (\n          <>\n            Show {isSelected ? 'less' : 'more'}\n            <IconChevronLgDown\n              className={cn(\n                isSelected ? 'rotate-180' : '',\n                'size-4 transition-transform duration-200'\n              )}\n            />\n          </>\n        )}\n      </ShowMore>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-gap-x-y-demo": {
    "component": "@/components/docs/surfaces/grid-gap-x-y-demo",
    "raw": "'use client'\n\nimport { Grid } from 'ui'\n\nexport default function GridGapXYDemo() {\n  return (\n    <Grid\n      columns={{\n        initial: 3,\n        sm: 4,\n        md: 6\n      }}\n      gapX={{\n        initial: 2,\n        sm: 4\n      }}\n      gapY={{\n        initial: 4,\n        sm: 6\n      }}\n    >\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n      <Grid.Item>\n        <div className=\"p-4 border h-24\" />\n      </Grid.Item>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/toast-description-demo": {
    "component": "@/components/docs/statuses/toast-description-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\nimport { Button } from 'ui'\n\nexport default function ToastDescriptionDemo() {\n  return (\n    <Button\n      onPress={() =>\n        toast('Cart Updated', {\n          description: 'Your item’s in the cart. Tap here to check it out.'\n        })\n      }\n    >\n      Add to Cart\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/meter-decimal-format-demo": {
    "component": "@/components/docs/statuses/meter-decimal-format-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Meter } from 'ui'\n\nexport default function MeterDecimalFormatDemo() {\n  return (\n    <Meter\n      formatOptions={{\n        style: 'decimal',\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      }}\n      label=\"Progress\"\n      value={75.25}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "statuses/badge-demo": {
    "component": "@/components/docs/statuses/badge-demo",
    "raw": "'use client'\n\nimport { Badge } from 'ui'\n\nexport default function BadgeDemo() {\n  return <Badge>Label</Badge>\n}\n",
    "type": "docs"
  },
  "statuses/skeleton-shape-demo": {
    "component": "@/components/docs/statuses/skeleton-shape-demo",
    "raw": "import { Card, Skeleton } from 'ui'\n\nexport default function SkeletonShapeDemo() {\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex gap-2\">\n        <Skeleton intent=\"lighter\" shape=\"circle\" className=\"size-8\" />\n        <div className=\"space-y-1\">\n          <Skeleton intent=\"muted\" shape=\"circle\" className=\"h-4 w-56\" />\n          <Skeleton intent=\"muted\" shape=\"circle\" className=\"h-4 w-10\" />\n        </div>\n      </div>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/progress-bar-demo": {
    "component": "@/components/docs/statuses/progress-bar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ProgressBar } from 'ui'\n\nexport default function ProgressBarDemo() {\n  const [value, setValue] = React.useState(1)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev < 100 ? prev + 1 : 100))\n    }, 200)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <ProgressBar label=\"Loading…\" value={value} />\n}\n",
    "type": "docs"
  },
  "statuses/loader-demo": {
    "component": "@/components/docs/statuses/loader-demo",
    "raw": "import { Loader } from 'ui'\n\nexport default function LoaderDemo() {\n  return <Loader />\n}\n",
    "type": "docs"
  },
  "statuses/skeleton-intent-demo": {
    "component": "@/components/docs/statuses/skeleton-intent-demo",
    "raw": "import { Card, Skeleton } from 'ui'\n\nexport default function SkeletonIntentDemo() {\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex gap-2\">\n        <Skeleton intent=\"lighter\" className=\"size-8\" />\n        <div className=\"space-y-1\">\n          <Skeleton intent=\"muted\" className=\"h-3.5 w-20\" />\n          <Skeleton intent=\"muted\" className=\"h-3.5 w-48\" />\n        </div>\n      </div>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/loader-variant-demo": {
    "component": "@/components/docs/statuses/loader-variant-demo",
    "raw": "import { Loader } from 'ui'\n\nexport default function LoaderVariantDemo() {\n  return (\n    <div className=\"flex gap-6\">\n      <Loader variant=\"ring\" />\n      <Loader variant=\"spin\" />\n      <Loader variant=\"bars\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/indeterminate-progress-bar-demo": {
    "component": "@/components/docs/statuses/indeterminate-progress-bar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ProgressBar } from 'ui'\n\nexport default function ProgressBarDemo() {\n  const [value, setValue] = React.useState(1)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev < 100 ? prev + 1 : 100))\n    }, 50)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <ProgressBar label=\"Loading…\" isIndeterminate value={value} />\n}\n",
    "type": "docs"
  },
  "statuses/skeleton-demo": {
    "component": "@/components/docs/statuses/skeleton-demo",
    "raw": "import { Card, Skeleton } from 'ui'\n\nexport default function SkeletonDemo() {\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex gap-2\">\n        <Skeleton shape=\"circle\" className=\"size-6\" />\n        <div className=\"space-y-1\">\n          <Skeleton className=\"h-3 w-56\" />\n          <Skeleton className=\"h-3 w-10\" />\n        </div>\n      </div>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/loader-intent-demo": {
    "component": "@/components/docs/statuses/loader-intent-demo",
    "raw": "import { Loader } from 'ui'\n\nexport default function LoaderIntentDemo() {\n  return (\n    <div className=\"flex gap-6\">\n      <Loader variant=\"spin\" size=\"medium\" intent=\"current\" />\n      <Loader variant=\"spin\" size=\"medium\" intent=\"primary\" />\n      <Loader variant=\"spin\" size=\"medium\" intent=\"secondary\" />\n      <Loader variant=\"spin\" size=\"medium\" intent=\"success\" />\n      <Loader variant=\"spin\" size=\"medium\" intent=\"warning\" />\n      <Loader variant=\"spin\" size=\"medium\" intent=\"danger\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/toast-action-demo": {
    "component": "@/components/docs/statuses/toast-action-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\nimport { Button } from 'ui'\n\nexport default function ToastActionDemo() {\n  return (\n    <div className=\"flex gap-3\">\n      <Button\n        appearance=\"outline\"\n        size=\"small\"\n        onPress={() =>\n          toast('New comment on your post!', {\n            action: {\n              label: 'View',\n              onClick: () => alert('Viewed')\n            }\n          })\n        }\n      >\n        Action\n      </Button>\n      <Button\n        appearance=\"outline\"\n        size=\"small\"\n        onPress={() =>\n          toast('New comment on your post!', {\n            action: {\n              label: 'View',\n              onClick: () => alert('Viewed')\n            },\n            cancel: {\n              label: 'Cancel',\n              onClick: () => alert('Cancelled')\n            }\n          })\n        }\n      >\n        Do or Not\n      </Button>\n      <Button\n        appearance=\"outline\"\n        size=\"small\"\n        onPress={() =>\n          toast('New comment on your post!', {\n            cancel: {\n              label: 'Cancel',\n              onClick: () => alert('Cancelled')\n            }\n          })\n        }\n      >\n        Cancel\n      </Button>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/badge-shape-demo": {
    "component": "@/components/docs/statuses/badge-shape-demo",
    "raw": "'use client'\n\nimport { Badge } from 'ui'\n\nexport default function BadgeShapeDemo() {\n  return <Badge shape=\"circle\">Label</Badge>\n}\n",
    "type": "docs"
  },
  "statuses/note-demo": {
    "component": "@/components/docs/statuses/note-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Note } from 'ui'\n\nconst notes = ['info', 'primary', 'secondary', 'warning', 'danger', 'success'].map((n) => ({\n  name: n\n}))\n\nexport default function NoteDemo() {\n  return (\n    <Note>\n      We hook you up with top-tier migration services in our startup plan. Wanna roll with it? Hit\n      us up here.\n    </Note>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/toast-status-demo": {
    "component": "@/components/docs/statuses/toast-status-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\nimport { Button } from 'ui'\n\nexport default function ToastStatusDemo() {\n  return (\n    <div className=\"flex flex-wrap gap-3\">\n      <Button appearance=\"outline\" onPress={() => toast.error('The registration failed')}>\n        Error\n      </Button>\n      <Button\n        appearance=\"outline\"\n        onPress={() => toast.success('The registration was successful.')}\n      >\n        Success\n      </Button>\n      <Button\n        appearance=\"outline\"\n        onPress={() => toast.warning('There was an issue during registration')}\n      >\n        Warning\n      </Button>\n      <Button appearance=\"outline\" onPress={() => toast.info('Email is already registered.')}>\n        Info\n      </Button>\n      <Button\n        appearance=\"outline\"\n        onPress={() => {\n          toast.promise(wait(2000), {\n            loading: 'Deleting database...',\n            success: 'Database deleted.',\n            error: 'Failed to delete database.'\n          })\n        }}\n      >\n        Promise / Loading\n      </Button>\n    </div>\n  )\n}\n\nfunction wait(number: number) {\n  return new Promise((resolve) => setTimeout(resolve, number))\n}\n",
    "type": "docs"
  },
  "statuses/note-intent-demo": {
    "component": "@/components/docs/statuses/note-intent-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Note, Select } from 'ui'\n\nconst notes = ['info', 'primary', 'secondary', 'warning', 'danger', 'success'].map((n) => ({\n  name: n\n}))\n\nexport default function NoteIntentDemo() {\n  const [selected, setSelected] = React.useState<any>('primary')\n  return (\n    <>\n      <OptionPreview>\n        <Select\n          className=\"[&_button]:h-9\"\n          selectedKey={selected}\n          onSelectionChange={setSelected}\n          placeholder=\"Choose an intent\"\n        >\n          <Select.Trigger />\n          <Select.List items={notes}>\n            {(item) => (\n              <Select.Option id={item.name} textValue={item.name}>\n                {item.name}\n              </Select.Option>\n            )}\n          </Select.List>\n        </Select>\n      </OptionPreview>\n      <div className=\"max-w-md\">\n        <Note intent={selected as any}>\n          We hook you up with top-tier migration services in our startup plan. Wanna roll with it?\n          Hit us up here.\n        </Note>\n      </div>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/meter-currency-format-demo": {
    "component": "@/components/docs/statuses/meter-currency-format-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Meter } from 'ui'\n\nexport default function MeterCurrencyFormatDemo() {\n  return <Meter label=\"Revenue\" formatOptions={{ style: 'currency', currency: 'USD' }} value={15} />\n}\n",
    "type": "docs"
  },
  "statuses/toast-positions-demo": {
    "component": "@/components/docs/statuses/toast-positions-demo",
    "raw": "'use client'\n\nimport { toast, type ToastT } from 'sonner'\nimport { Button } from 'ui'\n\nconst positions: ToastT['position'][] = [\n  'top-left',\n  'top-right',\n  'bottom-left',\n  'bottom-right',\n  'top-center',\n  'bottom-center'\n]\n\nexport default function ToastPositionsDemo() {\n  return (\n    <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-4\">\n      {positions.map((position) => (\n        <Button\n          appearance=\"outline\"\n          size=\"small\"\n          key={position}\n          onPress={() =>\n            toast('The registration is successful, click here to continue.', { position })\n          }\n        >\n          {position}\n        </Button>\n      ))}\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/note-hide-indicator-demo": {
    "component": "@/components/docs/statuses/note-hide-indicator-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Note } from 'ui'\n\nexport default function NoteHideIndicatorDemo() {\n  return (\n    <>\n      <Note hideIndicator>\n        You need to be careful with this note. This is a note without indicator.\n      </Note>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/badge-intent-demo": {
    "component": "@/components/docs/statuses/badge-intent-demo",
    "raw": "'use client'\n\nimport { Badge } from 'ui'\n\nexport default function BadgeIntentDemo() {\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      {['primary', 'secondary', 'success', 'info', 'warning', 'danger', 'light', 'dark'].map(\n        (intent, index) => (\n          <Badge key={index} intent={intent as any}>\n            {intent}\n          </Badge>\n        )\n      )}\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/toast-demo": {
    "component": "@/components/docs/statuses/toast-demo",
    "raw": "'use client'\n\nimport { toast } from 'sonner'\nimport { Button } from 'ui'\n\nexport default function ToastDemo() {\n  return (\n    <Button onPress={() => toast('The registration is successful, click here to continue.')}>\n      Show Toast\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/meter-demo": {
    "component": "@/components/docs/statuses/meter-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Meter } from 'ui'\n\nexport default function MeterDemo() {\n  const [value, setValue] = React.useState(1)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev < 100 ? prev + 1 : 100))\n    }, 50)\n\n    return () => clearInterval(interval)\n  }, [])\n  return <Meter label=\"Storage space\" value={value} />\n}\n",
    "type": "docs"
  },
  "statuses/loader-size-demo": {
    "component": "@/components/docs/statuses/loader-size-demo",
    "raw": "import { Loader } from 'ui'\n\nexport default function LoaderSizeDemo() {\n  return (\n    <div className=\"flex gap-6\">\n      <Loader size=\"small\" />\n      <Loader size=\"medium\" />\n      <Loader size=\"large\" />\n      <Loader size=\"extra-large\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu-collection-demo": {
    "component": "@/components/docs/collections/menu-collection-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Menu } from 'ui'\n\nexport default function MenuCollectionDemo() {\n  return (\n    <Menu>\n      <Button appearance=\"outline\">Open</Button>\n      <Menu.Content className=\"min-w-64\" placement=\"bottom\" items={categories}>\n        {(item) => <Menu.Item id={item.slug}>{item.name}</Menu.Item>}\n      </Menu.Content>\n    </Menu>\n  )\n}\n\nconst categories = [\n  {\n    name: 'Technology',\n    slug: 'technology'\n  },\n  {\n    name: 'Health',\n    slug: 'health'\n  },\n  {\n    name: 'Business',\n    slug: 'business'\n  },\n  {\n    name: 'Travel',\n    slug: 'travel'\n  },\n  {\n    name: 'Education',\n    slug: 'education'\n  },\n  {\n    name: 'Entertainment',\n    slug: 'entertainment'\n  },\n  {\n    name: 'Sports',\n    slug: 'sports'\n  },\n  {\n    name: 'Fashion',\n    slug: 'fashion'\n  },\n  {\n    name: 'Food',\n    slug: 'food'\n  },\n  {\n    name: 'Science',\n    slug: 'science'\n  }\n]\n",
    "type": "docs"
  },
  "collections/tag-group-disabled-demo": {
    "component": "@/components/docs/collections/tag-group-disabled-demo",
    "raw": "import { androidBrands } from '@/components/docs/collections/tag-group-demo'\nimport { Tag } from 'ui'\n\nexport default function TagGroupDisabledDemo() {\n  return (\n    <div className=\"space-y-6\">\n      <Tag.Group\n        disabledKeys={androidBrands.filter((brand) => !brand.available).map((brand) => brand.id)}\n        label=\"Disabled Key\"\n        selectionMode=\"multiple\"\n      >\n        <Tag.List items={androidBrands}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n\n      <Tag.Group label=\"Disabled by Tag\" selectionMode=\"multiple\">\n        <Tag.List items={androidBrands}>\n          {(item) => <Tag.Item isDisabled={item.available}>{item.name}</Tag.Item>}\n        </Tag.List>\n      </Tag.Group>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "collections/single-menu-demo": {
    "component": "@/components/docs/collections/single-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Placement } from '@react-types/overlays'\nimport type { Selection } from 'react-aria-components'\nimport { Button, Menu } from 'ui'\n\nexport const placements = [\n  'bottom',\n  'bottom left',\n  'bottom right',\n  'bottom start',\n  'bottom end',\n  'top',\n  'top left',\n  'top right',\n  'top start',\n  'top end',\n  'left',\n  'left top',\n  'left bottom',\n  'start',\n  'start top',\n  'start bottom',\n  'right',\n  'right top',\n  'right bottom',\n  'end',\n  'end top',\n  'end bottom'\n].map((item, i) => ({ id: i, name: item }))\n\nexport default function SingleMenuDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set(['bottom']))\n  return (\n    <Menu>\n      <Button appearance=\"outline\">Placement</Button>\n      <Menu.Content\n        placement={Array.from(selected)[0] as Placement}\n        selectionMode=\"single\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n        items={placements}\n        className=\"max-h-72 min-w-52\"\n      >\n        {(item) => <Menu.Radio id={item.name}>{item.name}</Menu.Radio>}\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/choicebox-single-selection-demo": {
    "component": "@/components/docs/collections/choicebox-single-selection-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Choicebox } from 'ui'\n\nexport default function ChoiceboxSingleSelectionDemo() {\n  return (\n    <Choicebox aria-label=\"Select packages\" selectionMode=\"single\" items={packages}>\n      {(item) => <Choicebox.Item {...item} />}\n    </Choicebox>\n  )\n}\n\nconst packages = [\n  {\n    id: 'sm',\n    title: 'Small',\n    description: 'Perfect for beginners. Basic resources for light projects.'\n  },\n  {\n    id: 'md',\n    title: 'Medium',\n    description: 'Great for growing sites. More power and storage.'\n  },\n  {\n    id: 'lg',\n    title: 'Large',\n    description: 'Ideal for busy sites. Lots of resources and support.'\n  },\n  {\n    id: 'xl',\n    title: 'Extra Large',\n    description: 'Max power for demanding applications. Top-tier performance.'\n  }\n]\n",
    "type": "docs"
  },
  "collections/multiple-menu-demo": {
    "component": "@/components/docs/collections/multiple-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type Selection } from '@react-types/shared'\nimport { Button, Menu } from 'ui'\n\nexport default function MultipleMenuDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set(['autoPlay']))\n  return (\n    <Menu>\n      <Button appearance=\"outline\">Open</Button>\n      <Menu.Content\n        placement=\"bottom\"\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        <Menu.Section items={items} title=\"Content Preferences\">\n          {(item) => (\n            <Menu.Checkbox id={item.slug} textValue={item.name}>\n              {item.name}\n            </Menu.Checkbox>\n          )}\n        </Menu.Section>\n      </Menu.Content>\n    </Menu>\n  )\n}\n\nconst items = [\n  {\n    name: 'Auto-Play Videos',\n    slug: 'autoPlay'\n  },\n  {\n    name: 'High-Quality Streaming',\n    slug: 'highQuality'\n  },\n  {\n    name: 'Exclusive Releases',\n    slug: 'exclusiveContent'\n  },\n  {\n    name: 'Default Subtitles',\n    slug: 'subtitles'\n  },\n  {\n    name: 'Personalized Recommendations',\n    slug: 'recommendations'\n  },\n  {\n    name: 'Background Play',\n    slug: 'backgroundPlay'\n  },\n  {\n    name: 'Allow Downloads',\n    slug: 'download'\n  }\n]\n",
    "type": "docs"
  },
  "collections/choicebox-controlled-demo": {
    "component": "@/components/docs/collections/choicebox-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\nimport { Choicebox, Description } from 'ui'\n\nexport default function ChoiceboxControlledDemo() {\n  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([packages[0].id]))\n  return (\n    <>\n      <Choicebox\n        aria-label=\"Select packages\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n        items={packages}\n      >\n        {(item) => <Choicebox.Item {...item} />}\n      </Choicebox>\n\n      <Description className=\"mt-2 block [&>strong]:text-fg text-muted-fg\">\n        You have selected: <strong>{Array.from(selectedKeys).join(', ')}</strong>\n      </Description>\n    </>\n  )\n}\n\nconst packages = [\n  {\n    id: 'sm',\n    title: 'Small',\n    description: 'Perfect for beginners. Basic resources for light projects.'\n  },\n  {\n    id: 'md',\n    title: 'Medium',\n    description: 'Great for growing sites. More power and storage.'\n  },\n  {\n    id: 'lg',\n    title: 'Large',\n    description: 'Ideal for busy sites. Lots of resources and support.'\n  },\n  {\n    id: 'xl',\n    title: 'Extra Large',\n    description: 'Max power for demanding applications. Top-tier performance.'\n  }\n]\n",
    "type": "docs"
  },
  "collections/grid-list-drag-between-item-demo": {
    "component": "@/components/docs/collections/grid-list-drag-between-item-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport GridListDragDemo from '@/components/docs/collections/grid-list-drag-demo'\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\nimport { GridList } from 'ui'\n\nexport default function GridListDragBetweenItemDemo() {\n  const list = useListData({\n    initialItems: [\n      { id: 6, name: 'The Byrds' },\n      { id: 7, name: 'The Yardbirds' }\n    ]\n  })\n\n  const { dragAndDropHooks } = useDragAndDrop({\n    async onInsert(e) {\n      const items = await Promise.all(\n        e.items.map(async (item) => {\n          const name = item.kind === 'text' ? await item.getText('text/plain') : item.name\n          return { id: Math.random(), name }\n        })\n      )\n\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...items)\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...items)\n      }\n    }\n  })\n\n  return (\n    <div className=\"grid gap-4 lg:grid-cols-3\">\n      <GridListDragDemo />\n      <GridList aria-label=\"Droppable list\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\n        {(item) => <GridList.Item>{item.name}</GridList.Item>}\n      </GridList>\n      <OtherEmptyList />\n    </div>\n  )\n}\n\nexport function OtherEmptyList() {\n  const list = useListData({\n    initialItems: [{ id: 7, name: 'The Who' }]\n  })\n\n  const { dragAndDropHooks } = useDragAndDrop({\n    async onInsert(e) {\n      const items = await Promise.all(\n        e.items.map(async (item) => {\n          const name = item.kind === 'text' ? await item.getText('text/plain') : item.name\n          return { id: Math.random(), name }\n        })\n      )\n\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...items)\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...items)\n      }\n    }\n  })\n\n  return (\n    <GridList\n      aria-label=\"Droppable list\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n      renderEmptyState={() => <GridList.EmptyState>No bands selected</GridList.EmptyState>}\n    >\n      {(item) => <GridList.Item>{item.name}</GridList.Item>}\n    </GridList>\n  )\n}\n",
    "type": "docs"
  },
  "collections/list-box-demo": {
    "component": "@/components/docs/collections/list-box-demo",
    "raw": "'use client'\n\nimport { ListBox } from 'ui'\n\nexport default function ListBoxDemo() {\n  return (\n    <ListBox items={rockPopBands} selectionMode=\"single\" aria-label=\"Bands\">\n      {(item) => <ListBox.Item id={item.id}>{item.name}</ListBox.Item>}\n    </ListBox>\n  )\n}\n\nconst rockPopBands = [\n  { id: '1', name: 'Nirvana' },\n  { id: '2', name: 'Radiohead' },\n  { id: '3', name: 'Foo Fighters' },\n  { id: '4', name: 'Arctic Monkeys' },\n  { id: '5', name: 'The Strokes' }\n]\n",
    "type": "docs"
  },
  "collections/list-box-multiple-demo": {
    "component": "@/components/docs/collections/list-box-multiple-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\nimport { Description, ListBox } from 'ui'\n\nexport default function ListBoxControlledDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set(['2']))\n  return (\n    <>\n      <ListBox\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n        items={fruits}\n        aria-label=\"Fruits\"\n        selectionMode=\"multiple\"\n      >\n        {(fruit) => (\n          <ListBox.Item id={fruit.id} textValue={fruit.name}>\n            {fruit.name}\n          </ListBox.Item>\n        )}\n      </ListBox>\n\n      {[...selected].length > 0 && (\n        <Description className=\"mt-4 block\">\n          Selected: {selected === 'all' ? 'All selected' : [...selected].join(', ')}\n        </Description>\n      )}\n    </>\n  )\n}\n\nconst fruits = [\n  {\n    id: 1,\n    name: 'Apple'\n  },\n  {\n    id: 2,\n    name: 'Banana'\n  },\n  {\n    id: 3,\n    name: 'Orange'\n  },\n  {\n    id: 4,\n    name: 'Strawberry'\n  },\n  {\n    id: 5,\n    name: 'Grapes'\n  },\n  {\n    id: 6,\n    name: 'Mango'\n  },\n  {\n    id: 7,\n    name: 'Pineapple'\n  }\n]\n",
    "type": "docs"
  },
  "collections/grid-list-multiple-demo": {
    "component": "@/components/docs/collections/grid-list-multiple-demo",
    "raw": "'use client'\n\nimport { GridList } from 'ui'\n\nexport default function GridListMultipleDemo() {\n  return (\n    <div>\n      <GridList\n        items={items}\n        aria-label=\"Select items\"\n        selectionMode=\"multiple\"\n        className=\"min-w-64\"\n      >\n        {(item) => <GridList.Item>{item.name}</GridList.Item>}\n      </GridList>\n    </div>\n  )\n}\n\nconst items = [\n  { id: '1', name: 'The Beatles' },\n  { id: '2', name: 'Led Zeppelin' },\n  { id: '3', name: 'Pink Floyd' },\n  { id: '4', name: 'Queen' },\n  { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/table-demo": {
    "component": "@/components/docs/collections/table-demo",
    "raw": "'use client'\n\nimport { NumberFormatter } from '@internationalized/number'\nimport { IconDotsVertical } from 'justd-icons'\nimport { Card, Menu, Table } from 'ui'\n\nexport default function TableDemo() {\n  const formatter = new NumberFormatter('en-US', { style: 'currency', currency: 'USD' })\n\n  const priceFormat = (price: number) => formatter.format(price)\n  return (\n    <Card>\n      <Table aria-label=\"Products\">\n        <Table.Header>\n          <Table.Column>#</Table.Column>\n          <Table.Column isRowHeader>Name</Table.Column>\n          <Table.Column>Category</Table.Column>\n          <Table.Column>Price</Table.Column>\n          <Table.Column>Stock</Table.Column>\n          <Table.Column />\n        </Table.Header>\n        <Table.Body items={products}>\n          {(item) => (\n            <Table.Row id={item.id}>\n              <Table.Cell>{item.id}</Table.Cell>\n              <Table.Cell>{item.name}</Table.Cell>\n              <Table.Cell>{item.category}</Table.Cell>\n              <Table.Cell>{priceFormat(item.price)}</Table.Cell>\n              <Table.Cell>{item.stock}</Table.Cell>\n              <Table.Cell>\n                <div className=\"flex justify-end\">\n                  <Menu>\n                    <Menu.Trigger>\n                      <IconDotsVertical />\n                    </Menu.Trigger>\n                    <Menu.Content aria-label=\"Actions\" showArrow placement=\"left\">\n                      <Menu.Item>View</Menu.Item>\n                      <Menu.Item>Edit</Menu.Item>\n                      <Menu.Separator />\n                      <Menu.Item isDanger>Delete</Menu.Item>\n                    </Menu.Content>\n                  </Menu>\n                </div>\n              </Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n    </Card>\n  )\n}\n\nexport const products = [\n  { id: '1', name: 'iPhone 13', category: 'Electronics', price: 799, brand: 'Apple', stock: 150 },\n  {\n    id: '2',\n    name: 'Galaxy S21',\n    category: 'Electronics',\n    price: 699,\n    brand: 'Samsung',\n    stock: 200\n  },\n  { id: '3', name: 'MacBook Pro', category: 'Computers', price: 1299, brand: 'Apple', stock: 80 },\n  { id: '4', name: 'Dell XPS 13', category: 'Computers', price: 999, brand: 'Dell', stock: 50 },\n  {\n    id: '5',\n    name: 'Sony WH-1000XM4',\n    category: 'Headphones',\n    price: 349,\n    brand: 'Sony',\n    stock: 120\n  },\n  { id: '6', name: 'AirPods Pro', category: 'Headphones', price: 249, brand: 'Apple', stock: 180 },\n  {\n    id: '7',\n    name: 'Fitbit Charge 5',\n    category: 'Wearables',\n    price: 179,\n    brand: 'Fitbit',\n    stock: 75\n  }\n]\n",
    "type": "docs"
  },
  "collections/menu-respect-screen-demo": {
    "component": "@/components/docs/collections/menu-respect-screen-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { buttonStyles, Menu } from 'ui'\n\nexport default function MenuRespectScreenDemo() {\n  return (\n    <Menu respectScreen={false}>\n      <Menu.Trigger className={buttonStyles({ appearance: 'outline' })}>Open</Menu.Trigger>\n      <Menu.Content placement=\"bottom\" className=\"min-w-48\">\n        <Menu.Item>Dashboard</Menu.Item>\n        <Menu.Item>Reports</Menu.Item>\n        <Menu.Item>Settings</Menu.Item>\n        <Menu.Item>Security</Menu.Item>\n        <Menu.Item>Privacy</Menu.Item>\n        <Menu.Item>Help</Menu.Item>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu-danger-demo": {
    "component": "@/components/docs/collections/menu-danger-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Menu } from 'ui'\n\nexport default function MenuDangerDemo() {\n  return (\n    <Menu>\n      <Menu.Trigger>Open</Menu.Trigger>\n      <Menu.Content className=\"min-w-48\" placement=\"bottom\">\n        <Menu.Item>View</Menu.Item>\n        <Menu.Item>Edit</Menu.Item>\n        <Menu.Separator />\n        <Menu.Item isDanger>Delete</Menu.Item>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu-section-demo": {
    "component": "@/components/docs/collections/menu-section-demo",
    "raw": "'use client'\n\nimport { Menu } from 'ui'\n\nexport default function MenuSectionDemo() {\n  return (\n    <Menu>\n      <Menu.Trigger>Open</Menu.Trigger>\n      <Menu.Content className=\"min-w-64\" items={cities} placement=\"bottom\">\n        {(city) => (\n          <Menu.Section title={city.name} items={city.landmarks}>\n            {(landmark) => <Menu.Item textValue={landmark.name}>{landmark.name}</Menu.Item>}\n          </Menu.Section>\n        )}\n      </Menu.Content>\n    </Menu>\n  )\n}\n\nconst cities = [\n  {\n    id: 1,\n    name: 'New York City',\n    landmarks: [\n      {\n        id: 101,\n        name: 'Statue of Liberty'\n      },\n      {\n        id: 102,\n        name: 'Central Park'\n      },\n      {\n        id: 103,\n        name: 'Empire State Building'\n      },\n      {\n        id: 104,\n        name: 'Times Square'\n      }\n    ]\n  },\n  {\n    id: 2,\n    name: 'Paris',\n    landmarks: [\n      {\n        id: 201,\n        name: 'Eiffel Tower'\n      },\n      {\n        id: 202,\n        name: 'Louvre Museum'\n      },\n      {\n        id: 203,\n        name: 'Notre-Dame Cathedral'\n      },\n      {\n        id: 204,\n        name: 'Champs-Élysées'\n      }\n    ]\n  },\n  {\n    id: 3,\n    name: 'Tokyo',\n    landmarks: [\n      {\n        id: 301,\n        name: 'Tokyo Tower'\n      },\n      {\n        id: 302,\n        name: 'Shibuya Crossing'\n      },\n      {\n        id: 303,\n        name: 'Senso-ji Temple'\n      },\n      {\n        id: 304,\n        name: 'Meiji Shrine'\n      },\n      {\n        id: 305,\n        name: 'Tokyo Skytree'\n      }\n    ]\n  },\n  {\n    id: 4,\n    name: 'London',\n    landmarks: [\n      {\n        id: 401,\n        name: 'Big Ben'\n      },\n      {\n        id: 402,\n        name: 'Tower of London'\n      },\n      {\n        id: 403,\n        name: 'Buckingham Palace'\n      },\n      {\n        id: 404,\n        name: 'London Eye'\n      },\n      {\n        id: 405,\n        name: 'Westminster Abbey'\n      }\n    ]\n  },\n  {\n    id: 5,\n    name: 'Rome',\n    landmarks: [\n      {\n        id: 501,\n        name: 'Colosseum'\n      },\n      {\n        id: 502,\n        name: 'Vatican City'\n      },\n      {\n        id: 503,\n        name: 'Trevi Fountain'\n      },\n      {\n        id: 504,\n        name: 'Pantheon'\n      }\n    ]\n  },\n  {\n    id: 6,\n    name: 'Sydney',\n    landmarks: [\n      {\n        id: 601,\n        name: 'Sydney Opera House'\n      },\n      {\n        id: 602,\n        name: 'Sydney Harbour Bridge'\n      },\n      {\n        id: 603,\n        name: 'Bondi Beach'\n      },\n      {\n        id: 604,\n        name: 'Royal Botanic Garden'\n      }\n    ]\n  },\n  {\n    id: 7,\n    name: 'Dubai',\n    landmarks: [\n      {\n        id: 701,\n        name: 'Burj Khalifa'\n      },\n      {\n        id: 702,\n        name: 'Palm Jumeirah'\n      },\n      {\n        id: 703,\n        name: 'Dubai Mall'\n      },\n      {\n        id: 704,\n        name: 'Burj Al Arab'\n      }\n    ]\n  },\n  {\n    id: 8,\n    name: 'Moscow',\n    landmarks: [\n      {\n        id: 801,\n        name: 'Red Square'\n      },\n      {\n        id: 802,\n        name: 'Kremlin'\n      },\n      {\n        id: 803,\n        name: \"St. Basil's Cathedral\"\n      },\n      {\n        id: 804,\n        name: 'Bolshoi Theatre'\n      }\n    ]\n  },\n  {\n    id: 9,\n    name: 'Cairo',\n    landmarks: [\n      {\n        id: 901,\n        name: 'Pyramids of Giza'\n      },\n      {\n        id: 902,\n        name: 'Great Sphinx of Giza'\n      },\n      {\n        id: 903,\n        name: 'Egyptian Museum'\n      }\n    ]\n  },\n  {\n    id: 10,\n    name: 'Rio de Janeiro',\n    landmarks: [\n      {\n        id: 1001,\n        name: 'Christ the Redeemer'\n      },\n      {\n        id: 1002,\n        name: 'Sugarloaf Mountain'\n      },\n      {\n        id: 1003,\n        name: 'Copacabana Beach'\n      },\n      {\n        id: 1004,\n        name: 'Maracanã Stadium'\n      }\n    ]\n  }\n]\n",
    "type": "docs"
  },
  "collections/choicebox-disabled-demo": {
    "component": "@/components/docs/collections/choicebox-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Choicebox } from 'ui'\n\nexport default function ChoiceboxDisabledDemo() {\n  return (\n    <Choicebox aria-label=\"Select packages\" selectionMode=\"multiple\" items={packages}>\n      {(item) => <Choicebox.Item isDisabled={['sm', 'lg'].includes(item.id)} {...item} />}\n    </Choicebox>\n  )\n}\n\nconst packages = [\n  {\n    id: 'sm',\n    title: 'Small',\n    description: 'Perfect for beginners. Basic resources for light projects.'\n  },\n  {\n    id: 'md',\n    title: 'Medium',\n    description: 'Great for growing sites. More power and storage.'\n  },\n  {\n    id: 'lg',\n    title: 'Large',\n    description: 'Ideal for busy sites. Lots of resources and support.'\n  },\n  {\n    id: 'xl',\n    title: 'Extra Large',\n    description: 'Max power for demanding applications. Top-tier performance.'\n  }\n]\n",
    "type": "docs"
  },
  "collections/tag-group-demo": {
    "component": "@/components/docs/collections/tag-group-demo",
    "raw": "'use client'\n\nimport { Tag } from 'ui'\n\nexport const androidBrands = [\n  { id: '1', name: 'Samsung', available: false },\n  { id: '2', name: 'OnePlus', available: true },\n  { id: '3', name: 'Google', available: true },\n  { id: '4', name: 'Xiaomi', available: false }\n]\n\nexport default function TagGroupDemo() {\n  return (\n    <Tag.Group label=\"Android Brands\" selectionMode=\"multiple\">\n      <Tag.List items={androidBrands}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n    </Tag.Group>\n  )\n}\n",
    "type": "docs"
  },
  "collections/list-box-item-details-demo": {
    "component": "@/components/docs/collections/list-box-item-details-demo",
    "raw": "'use client'\n\nimport { ListBox } from 'ui'\n\nexport default function ListBoxItemDetailsDemo() {\n  return (\n    <ListBox defaultSelectedKeys={[2]} items={roles} aria-label=\"Bands\">\n      {(item) => (\n        <ListBox.Item id={item.id}>\n          <ListBox.ItemDetails label={item.name} description={item.description} />\n        </ListBox.Item>\n      )}\n    </ListBox>\n  )\n}\n\nconst roles = [\n  { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n  { id: 2, name: 'Editor', description: 'Can edit content but has limited access to settings' },\n  { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n  { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n  { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n",
    "type": "docs"
  },
  "collections/menu-with-arrow-demo": {
    "component": "@/components/docs/collections/menu-with-arrow-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconHashtag, IconHeadphones, IconLogout, IconPlus, IconSettings } from 'justd-icons'\nimport { Avatar, Menu } from 'ui'\n\nexport default function MenuWithArrowDemo() {\n  return (\n    <>\n      <Menu>\n        <Menu.Trigger aria-label=\"Open Menu\">\n          <Avatar className=\"size-10\" src=\"https://github.com/irsyadadl.png\" />\n        </Menu.Trigger>\n        <Menu.Content placement=\"bottom\" showArrow className=\"min-w-64\">\n          <Menu.Section>\n            <Menu.Header separator>\n              <span className=\"block\">Irsyad A. Panjaitan</span>\n              <span className=\"font-normal text-muted-fg\">@irsyadadl</span>\n            </Menu.Header>\n          </Menu.Section>\n          <Menu.Item>\n            <IconSettings />\n            Settings\n          </Menu.Item>\n          <Menu.Item href=\"#\">\n            <IconPlus />\n            Create Team\n          </Menu.Item>\n          <Menu.Item href=\"#\">\n            <IconHashtag />\n            Command Menu\n            <Menu.Keyboard keys=\"⌘K\" />\n          </Menu.Item>\n          <Menu.Separator />\n          <Menu.Item href=\"#\">\n            <IconHeadphones />\n            Contact Support\n          </Menu.Item>\n          <Menu.Separator />\n          <Menu.Item>\n            <IconLogout />\n            Log out\n          </Menu.Item>\n        </Menu.Content>\n      </Menu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu-with-icon-demo": {
    "component": "@/components/docs/collections/menu-with-icon-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n  IconCommandRegular,\n  IconDashboard,\n  IconDeviceDesktop,\n  IconHeadphones,\n  IconLogout,\n  IconMoon,\n  IconSettings,\n  IconSun\n} from 'justd-icons'\nimport { useTheme } from 'next-themes'\nimport { Avatar, Menu } from 'ui'\n\nexport default function MenuWithIconDemo() {\n  const { resolvedTheme, setTheme } = useTheme()\n  return (\n    <Menu>\n      <Menu.Trigger>\n        <Avatar className=\"size-10\" src=\"https://github.com/irsyadadl.png\" />\n      </Menu.Trigger>\n      <Menu.Content placement=\"bottom\" showArrow className=\"sm:min-w-64\">\n        <Menu.Section>\n          <Menu.Header separator>\n            <span className=\"block\">Irsyad A. Panjaitan</span>\n            <span className=\"font-normal text-muted-fg\">@irsyadadl</span>\n          </Menu.Header>\n        </Menu.Section>\n\n        <Menu.Item href=\"#dashboard\">\n          <IconDashboard />\n          Dashboard\n        </Menu.Item>\n        <Menu.Item href=\"#settings\">\n          <IconSettings />\n          Settings\n        </Menu.Item>\n        <Menu.Separator />\n        <Menu.Item>\n          <IconCommandRegular />\n          Command Menu\n        </Menu.Item>\n        <Menu.Submenu>\n          <Menu.Item>\n            {resolvedTheme === 'light' ? (\n              <IconSun />\n            ) : resolvedTheme === 'dark' ? (\n              <IconMoon />\n            ) : (\n              <IconDeviceDesktop />\n            )}\n            Switch theme\n          </Menu.Item>\n          <Menu.Content>\n            <Menu.Item onAction={() => setTheme('system')}>\n              <IconDeviceDesktop /> System\n            </Menu.Item>\n            <Menu.Item onAction={() => setTheme('dark')}>\n              <IconMoon /> Dark\n            </Menu.Item>\n            <Menu.Item onAction={() => setTheme('light')}>\n              <IconSun /> Light\n            </Menu.Item>\n          </Menu.Content>\n        </Menu.Submenu>\n        <Menu.Separator />\n        <Menu.Item href=\"#contact-s\">\n          <IconHeadphones />\n          Contact Support\n        </Menu.Item>\n        <Menu.Separator />\n        <Menu.Item href=\"#logout\">\n          <IconLogout />\n          Log out\n        </Menu.Item>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/list-box-section-demo": {
    "component": "@/components/docs/collections/list-box-section-demo",
    "raw": "'use client'\n\nimport { ListBox } from 'ui'\n\nexport default function ListBoxSectionDemo() {\n  return (\n    <ListBox items={bands} aria-label=\"Bands\" selectionMode=\"multiple\">\n      {(item) => (\n        <ListBox.Section items={item.albums} title={item.name} id={item.id}>\n          {(album) => <ListBox.Item key={album.id}>{album.name}</ListBox.Item>}\n        </ListBox.Section>\n      )}\n    </ListBox>\n  )\n}\n\nconst bands = [\n  {\n    id: 1,\n    name: 'The Beatles',\n    albums: [\n      {\n        id: 101,\n        name: 'Abbey Road'\n      },\n      {\n        id: 102,\n        name: \"Sgt. Pepper's Lonely Hearts Club Band\"\n      },\n      {\n        id: 103,\n        name: 'Revolver'\n      }\n    ]\n  },\n  {\n    id: 2,\n    name: 'Led Zeppelin',\n    albums: [\n      {\n        id: 201,\n        name: 'Led Zeppelin IV'\n      },\n      {\n        id: 202,\n        name: 'Physical Graffiti'\n      },\n      {\n        id: 203,\n        name: 'Houses of the Holy'\n      },\n      {\n        id: 204,\n        name: 'Led Zeppelin II'\n      }\n    ]\n  },\n  {\n    id: 3,\n    name: 'Pink Floyd',\n    albums: [\n      {\n        id: 301,\n        name: 'The Dark Side of the Moon'\n      },\n      {\n        id: 302,\n        name: 'The Wall'\n      },\n      {\n        id: 303,\n        name: 'Wish You Were Here'\n      },\n      {\n        id: 304,\n        name: 'Animals'\n      },\n      {\n        id: 305,\n        name: 'Meddle'\n      }\n    ]\n  },\n  {\n    id: 4,\n    name: 'Queen',\n    albums: [\n      {\n        id: 401,\n        name: 'A Night at the Opera'\n      },\n      {\n        id: 402,\n        name: 'News of the World'\n      },\n      {\n        id: 403,\n        name: 'Sheer Heart Attack'\n      },\n      {\n        id: 404,\n        name: 'The Game'\n      },\n      {\n        id: 405,\n        name: 'Jazz'\n      },\n      {\n        id: 406,\n        name: 'Queen II'\n      }\n    ]\n  },\n  {\n    id: 5,\n    name: 'The Rolling Stones',\n    albums: [\n      {\n        id: 501,\n        name: 'Let It Bleed'\n      },\n      {\n        id: 502,\n        name: 'Sticky Fingers'\n      },\n      {\n        id: 503,\n        name: 'Exile on Main St.'\n      },\n      {\n        id: 504,\n        name: 'Beggars Banquet'\n      },\n      {\n        id: 505,\n        name: 'Some Girls'\n      },\n      {\n        id: 506,\n        name: 'Tattoo You'\n      }\n    ]\n  },\n  {\n    id: 6,\n    name: 'Nirvana',\n    albums: [\n      {\n        id: 601,\n        name: 'Nevermind'\n      },\n      {\n        id: 602,\n        name: 'In Utero'\n      },\n      {\n        id: 603,\n        name: 'Bleach'\n      }\n    ]\n  },\n  {\n    id: 7,\n    name: 'The Doors',\n    albums: [\n      {\n        id: 701,\n        name: 'The Doors'\n      },\n      {\n        id: 702,\n        name: 'L.A. Woman'\n      },\n      {\n        id: 703,\n        name: 'Strange Days'\n      },\n      {\n        id: 704,\n        name: 'Morrison Hotel'\n      }\n    ]\n  },\n  {\n    id: 8,\n    name: 'Radiohead',\n    albums: [\n      {\n        id: 801,\n        name: 'OK Computer'\n      },\n      {\n        id: 802,\n        name: 'Kid A'\n      },\n      {\n        id: 803,\n        name: 'The Bends'\n      },\n      {\n        id: 804,\n        name: 'In Rainbows'\n      }\n    ]\n  },\n  {\n    id: 9,\n    name: 'AC/DC',\n    albums: [\n      {\n        id: 901,\n        name: 'Back in Black'\n      },\n      {\n        id: 902,\n        name: 'Highway to Hell'\n      },\n      {\n        id: 903,\n        name: 'Let There Be Rock'\n      }\n    ]\n  },\n  {\n    id: 10,\n    name: 'The Who',\n    albums: [\n      {\n        id: 1001,\n        name: \"Who's Next\"\n      },\n      {\n        id: 1002,\n        name: 'Tommy'\n      },\n      {\n        id: 1003,\n        name: 'Quadrophenia'\n      },\n      {\n        id: 1004,\n        name: 'My Generation'\n      },\n      {\n        id: 1005,\n        name: 'The Who Sell Out'\n      }\n    ]\n  }\n]\n",
    "type": "docs"
  },
  "collections/list-box-rearrange-demo": {
    "component": "@/components/docs/collections/list-box-rearrange-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\nimport { ListBox } from 'ui'\n\nexport default function ListBoxRearrangeDemo() {\n  const list = useListData({\n    initialItems: [\n      { id: '1', name: 'Nirvana' },\n      { id: '2', name: 'Radiohead' },\n      { id: '3', name: 'Foo Fighters' },\n      { id: '4', name: 'Arctic Monkeys' },\n      { id: '5', name: 'The Strokes' }\n    ]\n  })\n\n  const { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) => [...keys].map((key) => ({ 'text/plain': list.getItem(key).name })),\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys)\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys)\n      }\n    }\n  })\n\n  return (\n    <ListBox\n      items={list.items}\n      aria-label=\"Bands\"\n      selectionMode=\"multiple\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      {(item) => <ListBox.Item key={item.id}>{item.name}</ListBox.Item>}\n    </ListBox>\n  )\n}\n",
    "type": "docs"
  },
  "collections/table-sorting-demo": {
    "component": "@/components/docs/collections/table-sorting-demo",
    "raw": "'use client'\n\nimport { useAsyncList } from '@react-stately/data'\nimport { IconLoader } from 'justd-icons'\nimport { Card, Table } from 'ui'\n\ninterface Character {\n  title: string\n  director: number\n  producer: number\n  release_date: number\n}\n\nexport default function TableSortingDemo() {\n  const list = useAsyncList<Character>({\n    async load({ signal }) {\n      const res = await fetch(`https://swapi.py4e.com/api/films`, {\n        signal\n      })\n      const json = await res.json()\n      return {\n        items: json.results\n      }\n    },\n    async sort({ items, sortDescriptor }) {\n      return {\n        items: items.sort((a, b) => {\n          // @ts-ignore\n          const first = a[sortDescriptor.column]\n          // @ts-ignore\n          const second = b[sortDescriptor.column]\n          let cmp = (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1\n          if (sortDescriptor.direction === 'descending') {\n            cmp *= -1\n          }\n          return cmp\n        })\n      }\n    }\n  })\n  return (\n    <Card>\n      <Table\n        aria-label=\"Movies\"\n        selectionMode=\"multiple\"\n        sortDescriptor={list.sortDescriptor}\n        onSortChange={list.sort}\n      >\n        <Table.Header>\n          <Table.Column id=\"title\" isRowHeader allowsSorting>\n            Title\n          </Table.Column>\n          <Table.Column id=\"director\" allowsSorting>\n            Director\n          </Table.Column>\n          <Table.Column id=\"producer\" allowsSorting>\n            Producer\n          </Table.Column>\n          <Table.Column id=\"release_date\" allowsSorting>\n            Release Date\n          </Table.Column>\n        </Table.Header>\n        <Table.Body\n          items={list.items}\n          renderEmptyState={() => (\n            <div className=\"grid place-content-center p-10\">\n              <IconLoader className=\"animate-spin\" />\n            </div>\n          )}\n        >\n          {(item) => (\n            <Table.Row id={item.title}>\n              <Table.Cell>{item.title}</Table.Cell>\n              <Table.Cell>{item.director}</Table.Cell>\n              <Table.Cell>{item.producer}</Table.Cell>\n              <Table.Cell>{item.release_date}</Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "collections/tag-group-shape-demo": {
    "component": "@/components/docs/collections/tag-group-shape-demo",
    "raw": "'use client'\n\nimport { Tag } from 'ui'\n\nconst carModels = [\n  { id: '1', name: 'Tesla Model S', available: true },\n  { id: '2', name: 'Ford Mustang', available: false },\n  { id: '3', name: 'Chevrolet Camaro', available: true },\n  { id: '4', name: 'BMW M3', available: false },\n  { id: '5', name: 'Audi R8', available: true }\n]\n\nexport default function TagGroupIntentDemo() {\n  return (\n    <div className=\"space-y-6 max-w-sm\">\n      <Tag.Group shape=\"square\" intent=\"danger\" label=\"Car Models\" selectionMode=\"multiple\">\n        <Tag.List items={carModels}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n      <Tag.Group shape=\"circle\" intent=\"warning\" label=\"Car Models\" selectionMode=\"multiple\">\n        <Tag.List items={carModels}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "collections/table-bulk-demo": {
    "component": "@/components/docs/collections/table-bulk-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\nimport { Card, Description, Table } from 'ui'\n\nexport default function TableBulkDemo() {\n  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set())\n  return (\n    <>\n      <Card>\n        <Table\n          aria-label=\"Books\"\n          selectionMode=\"multiple\"\n          selectedKeys={selectedKeys}\n          onSelectionChange={setSelectedKeys}\n        >\n          <Table.Header>\n            <Table.Column>#</Table.Column>\n            <Table.Column isRowHeader>Title</Table.Column>\n            <Table.Column>Author</Table.Column>\n            <Table.Column>Genre</Table.Column>\n            <Table.Column>Published</Table.Column>\n          </Table.Header>\n          <Table.Body items={books}>\n            {(item) => (\n              <Table.Row>\n                <Table.Cell>{item.id}</Table.Cell>\n                <Table.Cell>{item.title}</Table.Cell>\n                <Table.Cell>{item.author}</Table.Cell>\n                <Table.Cell>{item.genre}</Table.Cell>\n                <Table.Cell>{item.publishedYear}</Table.Cell>\n              </Table.Row>\n            )}\n          </Table.Body>\n        </Table>\n      </Card>\n      <Description className=\"block mt-2 [&>strong]:text-fg text-muted-fg\">\n        {Array.from(selectedKeys).length > 0 ? (\n          <>\n            You have selected: <strong>{Array.from(selectedKeys).join(', ')}</strong>\n          </>\n        ) : (\n          'You have not selected anything.'\n        )}\n      </Description>\n    </>\n  )\n}\n\nexport const books = [\n  {\n    id: '1',\n    title: 'To Kill a Mockingbird',\n    author: 'Harper Lee',\n    genre: 'Fiction',\n    publishedYear: 1960\n  },\n  { id: '2', title: '1984', author: 'George Orwell', genre: 'Dystopian', publishedYear: 1949 },\n  {\n    id: '3',\n    title: 'The Great Gatsby',\n    author: 'F. Scott Fitzgerald',\n    genre: 'Fiction',\n    publishedYear: 1925\n  },\n  {\n    id: '4',\n    title: 'The Catcher in the Rye',\n    author: 'J.D. Salinger',\n    genre: 'Fiction',\n    publishedYear: 1951\n  },\n  {\n    id: '5',\n    title: 'Pride and Prejudice',\n    author: 'Jane Austen',\n    genre: 'Romance',\n    publishedYear: 1813\n  },\n  {\n    id: '6',\n    title: 'The Lord of the Rings',\n    author: 'J.R.R. Tolkien',\n    genre: 'Fantasy',\n    publishedYear: 1954\n  },\n  {\n    id: '7',\n    title: \"Harry Potter and the Sorcerer's Stone\",\n    author: 'J.K. Rowling',\n    genre: 'Fantasy',\n    publishedYear: 1997\n  }\n]\n",
    "type": "docs"
  },
  "collections/command-basic-demo": {
    "component": "@/components/docs/collections/command-basic-demo",
    "raw": "'use client'\n\nimport React, { useState } from 'react'\n\nexport default function CommandBasicDemo() {\n  const [open, setOpen] = useState(false)\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === 'e') {\n        e.preventDefault()\n        setOpen((open: boolean) => !open)\n      }\n    }\n\n    document.addEventListener('keydown', down)\n\n    return () => document.removeEventListener('keydown', down)\n  }, [])\n  return <>{/*  */}</>\n}\n",
    "type": "docs"
  },
  "collections/list-box-controlled-demo": {
    "component": "@/components/docs/collections/list-box-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\nimport { Description, ListBox } from 'ui'\n\nexport default function ListBoxControlledDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set(['2']))\n  return (\n    <>\n      <ListBox\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n        items={fruits}\n        selectionMode=\"single\"\n        aria-label=\"Fruits\"\n      >\n        {(fruit) => (\n          <ListBox.Item id={fruit.id} textValue={fruit.name}>\n            {fruit.name}\n          </ListBox.Item>\n        )}\n      </ListBox>\n\n      {selected && <Description className=\"mt-4 block\">Selected: {selected}</Description>}\n    </>\n  )\n}\n\nconst fruits = [\n  {\n    id: 1,\n    name: 'Apple'\n  },\n  {\n    id: 2,\n    name: 'Banana'\n  },\n  {\n    id: 3,\n    name: 'Orange'\n  },\n  {\n    id: 4,\n    name: 'Strawberry'\n  },\n  {\n    id: 5,\n    name: 'Grapes'\n  },\n  {\n    id: 6,\n    name: 'Mango'\n  },\n  {\n    id: 7,\n    name: 'Pineapple'\n  }\n]\n",
    "type": "docs"
  },
  "collections/grid-list-render-empty-state-demo": {
    "component": "@/components/docs/collections/grid-list-render-empty-state-demo",
    "raw": "'use client'\n\nimport { GridList } from 'ui'\n\nexport default function GridListRenderEmptyStateDemo() {\n  return (\n    <GridList\n      items={items}\n      aria-label=\"Select items\"\n      selectionMode=\"multiple\"\n      className=\"min-w-64\"\n      renderEmptyState={() => <GridList.EmptyState>No bands selected</GridList.EmptyState>}\n    />\n  )\n}\n\nconst items: Iterable<any> | undefined = []\n",
    "type": "docs"
  },
  "collections/tag-group-controlled-demo": {
    "component": "@/components/docs/collections/tag-group-controlled-demo",
    "raw": "import React from 'react'\n\nimport type { Selection } from 'react-aria-components'\nimport { Description, Tag } from 'ui'\n\nconst fruitList = [\n  { id: '1', name: 'Apple', available: false },\n  { id: '2', name: 'Banana', available: true },\n  { id: '3', name: 'Cherry', available: true },\n  { id: '4', name: 'Date', available: false }\n]\n\nexport default function TagGroupControlledDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set([]))\n  return (\n    <div>\n      <Tag.Group selectionMode=\"multiple\" selectedKeys={selected} onSelectionChange={setSelected}>\n        <Tag.List items={fruitList}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n\n      <Description className=\"mt-2 block [&>strong]:text-fg text-muted-fg\">\n        You have selected: <strong>{Array.from(selected).join(', ')}</strong>\n      </Description>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu-item-details-demo": {
    "component": "@/components/docs/collections/menu-item-details-demo",
    "raw": "import { Button, Menu } from 'ui'\n\nexport default function MenuItemDetailsDemo() {\n  return (\n    <Menu>\n      <Button appearance=\"outline\">Open</Button>\n      <Menu.Content placement=\"bottom\" items={roles}>\n        {(item) => (\n          <Menu.Item id={item.id} textValue={item.name}>\n            <Menu.ItemDetails label={item.name} description={item.description} />\n          </Menu.Item>\n        )}\n      </Menu.Content>\n    </Menu>\n  )\n}\n\nconst roles = [\n  { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n  { id: 2, name: 'Editor', description: 'Can edit content but has limited access to settings' },\n  { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n  { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n  { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n",
    "type": "docs"
  },
  "collections/tag-group-with-remove-demo": {
    "component": "@/components/docs/collections/tag-group-with-remove-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\nimport { Tag } from 'ui'\n\nexport default function TagGroupWithRemoveDemo() {\n  const list = useListData({\n    initialItems: [\n      { id: '1', name: 'Ferrari', available: true },\n      { id: '2', name: 'Lamborghini', available: false },\n      { id: '3', name: 'Porsche', available: true },\n      { id: '4', name: 'Bugatti', available: false },\n      { id: '5', name: 'McLaren', available: true },\n      { id: '6', name: 'Aston Martin', available: true },\n      { id: '7', name: 'Bentley', available: false },\n      { id: '8', name: 'Rolls-Royce', available: true },\n      { id: '9', name: 'Maserati', available: false },\n      { id: '10', name: 'Jaguar', available: true }\n    ]\n  })\n\n  return (\n    <Tag.Group\n      selectionMode=\"multiple\"\n      className=\"max-w-sm\"\n      onRemove={(keys) => list.remove(...keys)}\n    >\n      <Tag.List items={list.items}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n    </Tag.Group>\n  )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-controlled-demo": {
    "component": "@/components/docs/collections/grid-list-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\nimport { Description, GridList } from 'ui'\n\nexport default function GridListControlledDemo() {\n  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([]))\n  return (\n    <div>\n      <GridList\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n        items={items}\n        aria-label=\"Select items\"\n        selectionMode=\"multiple\"\n        className=\"min-w-64\"\n      >\n        {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n      </GridList>\n      <Description className=\"mt-2 block [&>strong]:text-fg text-muted-fg\">\n        You have selected: <strong>{Array.from(selectedKeys).join(', ')}</strong>\n      </Description>\n    </div>\n  )\n}\n\nconst items = [\n  { id: '1', name: 'The Beatles' },\n  { id: '2', name: 'Led Zeppelin' },\n  { id: '3', name: 'Pink Floyd' },\n  { id: '4', name: 'Queen' },\n  { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/menu-sub-demo": {
    "component": "@/components/docs/collections/menu-sub-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { buttonStyles, Menu } from 'ui'\n\nexport default function MenuSubDemo() {\n  return (\n    <Menu>\n      <Menu.Trigger className={buttonStyles({ appearance: 'outline' })}>Open</Menu.Trigger>\n      <Menu.Content placement=\"bottom\" className=\"sm:min-w-48\">\n        <Menu.Item>Dashboard</Menu.Item>\n        <Menu.Item>Reports</Menu.Item>\n        <Menu.Separator />\n        <Menu.Submenu>\n          <Menu.Item>Settings</Menu.Item>\n          <Menu.Content>\n            <Menu.Item>General</Menu.Item>\n            <Menu.Item>Security</Menu.Item>\n            <Menu.Item>Privacy</Menu.Item>\n            <Menu.Item>Data Sharing</Menu.Item>\n          </Menu.Content>\n        </Menu.Submenu>\n        <Menu.Item>Help</Menu.Item>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu-basic-demo": {
    "component": "@/components/docs/collections/menu-basic-demo",
    "raw": "'use client'\n\nimport { Menu } from 'ui'\n\nexport default function MenuBasicDemo() {\n  return (\n    <Menu>\n      <Menu.Trigger>Open</Menu.Trigger>\n      <Menu.Content placement=\"bottom\">\n        <Menu.Item>Inbox</Menu.Item>\n        <Menu.Item>Sent</Menu.Item>\n        <Menu.Item>New Message</Menu.Item>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/choicebox-columns-demo": {
    "component": "@/components/docs/collections/choicebox-columns-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Choicebox } from 'ui'\n\nexport default function ChoiceboxColumnsDemo() {\n  return (\n    <Choicebox\n      aria-label=\"Select prices\"\n      gap={2}\n      columns={3}\n      selectionMode=\"multiple\"\n      items={prices}\n    >\n      {(item) => <Choicebox.Item {...item} />}\n    </Choicebox>\n  )\n}\n\nconst prices = [\n  { id: 1, title: 'Basic', description: 'Essentials, get started' },\n  { id: 2, title: 'Standard', description: 'More features, support' },\n  { id: 3, title: 'Premium', description: 'Advanced, growing needs' },\n  { id: 4, title: 'Deluxe', description: 'Top-tier, maximum performance' },\n  { id: 5, title: 'Ultimate', description: 'All-inclusive, every feature' },\n  { id: 6, title: 'Enterprise', description: 'Custom, large-scale operations' }\n]\n",
    "type": "docs"
  },
  "collections/grid-list-disabled-demo": {
    "component": "@/components/docs/collections/grid-list-disabled-demo",
    "raw": "'use client'\n\nimport { GridList } from 'ui'\n\nexport default function GridListDisabledDemo() {\n  return (\n    <GridList\n      items={items}\n      aria-label=\"Select your favorite bands\"\n      selectionMode=\"multiple\"\n      className=\"min-w-64\"\n    >\n      {(item) => (\n        <GridList.Item isDisabled={[2, 5].includes(Number(item.id))} id={item.id}>\n          {item.name}\n        </GridList.Item>\n      )}\n    </GridList>\n  )\n}\n\nconst items = [\n  { id: '1', name: 'The Beatles' },\n  { id: '2', name: 'Led Zeppelin' },\n  { id: '3', name: 'Pink Floyd' },\n  { id: '4', name: 'Queen' },\n  { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/list-box-disabled-demo": {
    "component": "@/components/docs/collections/list-box-disabled-demo",
    "raw": "'use client'\n\nimport { ListBox } from 'ui'\n\nexport default function ListBoxControlledDemo() {\n  return (\n    <>\n      <ListBox\n        disabledKeys={[2, 3, 4, 5]}\n        items={fruits}\n        aria-label=\"Fruits\"\n        selectionMode=\"multiple\"\n      >\n        {(fruit) => <ListBox.Item id={fruit.id}>{fruit.name}</ListBox.Item>}\n      </ListBox>\n    </>\n  )\n}\n\nconst fruits = [\n  {\n    id: 1,\n    name: 'Apple'\n  },\n  {\n    id: 2,\n    name: 'Banana'\n  },\n  {\n    id: 3,\n    name: 'Orange'\n  },\n  {\n    id: 4,\n    name: 'Strawberry'\n  },\n  {\n    id: 5,\n    name: 'Grapes'\n  },\n  {\n    id: 6,\n    name: 'Mango'\n  },\n  {\n    id: 7,\n    name: 'Pineapple'\n  }\n]\n",
    "type": "docs"
  },
  "collections/table-drag-demo": {
    "component": "@/components/docs/collections/table-drag-demo",
    "raw": "'use client'\n\nimport { IconStarFill } from 'justd-icons'\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\nimport { Card, Table } from 'ui'\n\nexport default function TableDragDemo() {\n  const list = useListData({\n    initialItems: movies\n  })\n\n  const { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map((key) => ({\n        'text/plain': list.getItem(key).name\n      })),\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys)\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys)\n      }\n    }\n  })\n  return (\n    <Card>\n      <Table aria-label=\"Movies\" selectionMode=\"multiple\" dragAndDropHooks={dragAndDropHooks}>\n        <Table.Header>\n          <Table.Column>#</Table.Column>\n          <Table.Column isRowHeader>Name</Table.Column>\n          <Table.Column>Genre</Table.Column>\n          <Table.Column>Release</Table.Column>\n          <Table.Column>Rating</Table.Column>\n        </Table.Header>\n        <Table.Body items={list.items}>\n          {(item) => (\n            <Table.Row>\n              <Table.Cell>{item.id}</Table.Cell>\n              <Table.Cell>{item.name}</Table.Cell>\n              <Table.Cell>{item.genre}</Table.Cell>\n              <Table.Cell>{item.releaseYear}</Table.Cell>\n              <Table.Cell>\n                <div className=\"flex items-center gap-x-2\">\n                  <IconStarFill className=\"text-warning size-3.5\" /> <span>{item.rating}</span>\n                </div>\n              </Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n    </Card>\n  )\n}\n\nconst movies = [\n  {\n    id: '1',\n    name: 'The Matrix',\n    genre: 'Sci-Fi',\n    releaseYear: 1999,\n    director: 'Wachowskis',\n    rating: 8.7\n  },\n  {\n    id: '2',\n    name: 'Inception',\n    genre: 'Sci-Fi',\n    releaseYear: 2010,\n    director: 'Christopher Nolan',\n    rating: 8.8\n  },\n  {\n    id: '3',\n    name: 'The Godfather',\n    genre: 'Crime',\n    releaseYear: 1972,\n    director: 'Francis Ford Coppola',\n    rating: 9.2\n  },\n  {\n    id: '4',\n    name: 'Pulp Fiction',\n    genre: 'Crime',\n    releaseYear: 1994,\n    director: 'Quentin Tarantino',\n    rating: 8.9\n  },\n  {\n    id: '5',\n    name: 'The Dark Knight',\n    genre: 'Action',\n    releaseYear: 2008,\n    director: 'Christopher Nolan',\n    rating: 9.0\n  },\n  {\n    id: '6',\n    name: 'Fight Club',\n    genre: 'Drama',\n    releaseYear: 1999,\n    director: 'David Fincher',\n    rating: 8.8\n  },\n  {\n    id: '7',\n    name: 'Forrest Gump',\n    genre: 'Drama',\n    releaseYear: 1994,\n    director: 'Robert Zemeckis',\n    rating: 8.8\n  }\n]\n",
    "type": "docs"
  },
  "collections/tag-group-href-demo": {
    "component": "@/components/docs/collections/tag-group-href-demo",
    "raw": "'use client'\n\nimport { Tag } from 'ui'\n\nconst articles = [\n  { name: 'React Tutorial', url: '#' },\n  { name: 'TypeScript Handbook', url: '#' },\n  { name: 'JavaScript Guide', url: '#' }\n]\n\nexport default function TagGroupControlledDemo() {\n  return (\n    <Tag.Group>\n      <Tag.List items={articles}>\n        {(item) => (\n          <Tag.Item id={item.name} href={item.url}>\n            {item.name}\n          </Tag.Item>\n        )}\n      </Tag.List>\n    </Tag.Group>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu-disabled-demo": {
    "component": "@/components/docs/collections/menu-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Menu } from 'ui'\n\nexport default function MenuDisabledDemo() {\n  return (\n    <Menu>\n      <Menu.Trigger>Open</Menu.Trigger>\n      <Menu.Content className=\"min-w-48\" placement=\"bottom\">\n        <Menu.Item id=\"view\">View</Menu.Item>\n        <Menu.Item id=\"edit\">Edit</Menu.Item>\n        <Menu.Item id=\"gsu\" isDisabled>\n          Generate Short URL\n        </Menu.Item>\n      </Menu.Content>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/choicebox-demo": {
    "component": "@/components/docs/collections/choicebox-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Choicebox } from 'ui'\n\nconst packages = [\n  {\n    id: 1,\n    title: 'Small',\n    description: 'Perfect for beginners. Basic resources for light projects.'\n  },\n  {\n    id: 2,\n    title: 'Medium',\n    description: 'Great for growing sites. More power and storage.'\n  },\n  {\n    id: 3,\n    title: 'Large',\n    description: 'Ideal for busy sites. Lots of resources and support.'\n  },\n  {\n    id: 4,\n    title: 'Extra Large',\n    description: 'Max power for demanding applications. Top-tier performance.'\n  }\n]\n\nexport default function ChoiceboxDemo() {\n  return (\n    <Choicebox aria-label=\"Select items\" selectionMode=\"multiple\">\n      <Choicebox.Item title=\"Basic\" description=\"Just the essentials to get started.\" />\n      <Choicebox.Item title=\"Standard\" description=\"A step up with more features and support.\" />\n      <Choicebox.Item title=\"Premium\" description=\"Advanced options for growing needs.\" />\n      <Choicebox.Item title=\"Deluxe\" description=\"Top-tier features for maximum performance.\" />\n      <Choicebox.Item\n        title=\"Ultimate\"\n        description=\"All-inclusive plan with every feature available.\"\n      />\n      <Choicebox.Item\n        title=\"Enterprise\"\n        description=\"Custom solutions for large-scale operations.\"\n      />\n    </Choicebox>\n  )\n}\n",
    "type": "docs"
  },
  "collections/tag-group-intent-demo": {
    "component": "@/components/docs/collections/tag-group-intent-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { useListData } from 'react-stately'\nimport { Tag } from 'ui'\n\nconst shoes = [\n  { id: '1', name: 'Nike', available: true },\n  { id: '2', name: 'Adidas', available: false },\n  { id: '3', name: 'Puma', available: true },\n  { id: '4', name: 'Reebok', available: true }\n]\n\nexport default function TagGroupIntentDemo() {\n  const shoesList = useListData({\n    initialItems: shoes\n  })\n  return (\n    <div className=\"space-y-2 max-w-sm\">\n      <Tag.Group\n        intent=\"primary\"\n        aria-label=\"Primary Intent\"\n        selectionMode=\"multiple\"\n        onRemove={(keys) => shoesList.remove(...keys)}\n      >\n        <Tag.List items={shoesList.items}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n      <Tag.Group\n        intent=\"secondary\"\n        aria-label=\"Secondary Intent\"\n        selectionMode=\"multiple\"\n        onRemove={(keys) => shoesList.remove(...keys)}\n      >\n        <Tag.List items={shoesList.items}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n      <Tag.Group\n        intent=\"success\"\n        aria-label=\"Success Intent\"\n        selectionMode=\"multiple\"\n        onRemove={(keys) => shoesList.remove(...keys)}\n      >\n        <Tag.List items={shoesList.items}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n      <Tag.Group\n        intent=\"warning\"\n        aria-label=\"Warning Intent\"\n        selectionMode=\"multiple\"\n        onRemove={(keys) => shoesList.remove(...keys)}\n      >\n        <Tag.List items={shoesList.items}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n      <Tag.Group\n        intent=\"danger\"\n        aria-label=\"Danger Intent\"\n        selectionMode=\"multiple\"\n        onRemove={(keys) => shoesList.remove(...keys)}\n      >\n        <Tag.List items={shoesList.items}>{(item) => <Tag.Item>{item.name}</Tag.Item>}</Tag.List>\n      </Tag.Group>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-drag-demo": {
    "component": "@/components/docs/collections/grid-list-drag-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\nimport { GridList } from 'ui'\n\nexport default function GridListDragDemo() {\n  const list = useListData({\n    initialItems: items\n  })\n  const { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) => [...keys].map((key) => ({ 'text/plain': list.getItem(key).name })),\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys)\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys)\n      }\n    }\n  })\n\n  return (\n    <>\n      <GridList\n        items={list.items}\n        aria-label=\"Droppable list\"\n        selectionMode=\"multiple\"\n        dragAndDropHooks={dragAndDropHooks}\n      >\n        {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n      </GridList>\n    </>\n  )\n}\n\nconst items = [\n  { id: 1, name: 'The Beatles' },\n  { id: 2, name: 'Led Zeppelin' },\n  { id: 3, name: 'Pink Floyd' },\n  { id: 4, name: 'Queen' },\n  { id: 5, name: 'The Rolling Stones' },\n  { id: 6, name: 'The Beach Boys' },\n  { id: 7, name: 'The Kinks' },\n  { id: 8, name: 'The Who' }\n]\n",
    "type": "docs"
  },
  "collections/grid-list-demo": {
    "component": "@/components/docs/collections/grid-list-demo",
    "raw": "'use client'\n\nimport { GridList } from 'ui'\n\nexport default function GridListDemo() {\n  return (\n    <GridList items={items} aria-label=\"Select your favorite bands\" className=\"min-w-64\">\n      {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n    </GridList>\n  )\n}\n\nconst items = [\n  { id: '1', name: 'The Beatles' },\n  { id: '2', name: 'Led Zeppelin' },\n  { id: '3', name: 'Pink Floyd' },\n  { id: '4', name: 'Queen' },\n  { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "media/avatar-size-demo": {
    "component": "@/components/docs/media/avatar-size-demo",
    "raw": "'use client'\n\nimport { Avatar } from 'ui'\n\nexport default function AvatarSizeDemo() {\n  return (\n    <div className=\"flex gap-4\">\n      <Avatar size=\"small\" src=\"https://github.com/irsyadadl.png\" />\n      <Avatar size=\"medium\" src=\"https://github.com/irsyadadl.png\" />\n      <Avatar size=\"large\" src=\"https://github.com/irsyadadl.png\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "media/carousel-demo": {
    "component": "@/components/docs/media/carousel-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport Image from 'next/image'\nimport { Carousel } from 'ui'\n\nexport default function CarouselDemo() {\n  return (\n    <Carousel className=\"w-full [&_.xrkr]:h-56 [&_.xrkr]:overflow-hidden [&_.xrkr]:flex [&_.xrkr]:flex-col max-w-xs\">\n      <Carousel.Content>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-1.jpg\"\n            alt=\"image 1\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-2.jpg\"\n            alt=\"image 2\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-3.jpg\"\n            alt=\"image 3\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-4.jpg\"\n            alt=\"image 4\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-5.jpg\"\n            alt=\"image 5\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-6.jpg\"\n            alt=\"image 6\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n        <Carousel.Item className=\"basis-1/2\">\n          <Image\n            className=\"rounded-xl\"\n            src=\"/slides/slide-7.jpg\"\n            alt=\"image 7\"\n            width={400}\n            height={300}\n          />\n        </Carousel.Item>\n      </Carousel.Content>\n\n      <Carousel.Handler>\n        <Carousel.Button slot=\"previous\" />\n        <Carousel.Button slot=\"next\" />\n      </Carousel.Handler>\n    </Carousel>\n  )\n}\n",
    "type": "docs"
  },
  "media/avatar-initials-demo": {
    "component": "@/components/docs/media/avatar-initials-demo",
    "raw": "'use client'\n\nimport { Avatar } from 'ui'\n\nexport default function AvatarInitialsDemo() {\n  return <Avatar initials=\"IR\" />\n}\n",
    "type": "docs"
  },
  "media/carousel-with-collection-demo": {
    "component": "@/components/docs/media/carousel-with-collection-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport Image from 'next/image'\nimport { Card, Carousel } from 'ui'\n\nexport default function CarouselWithCollectionDemo() {\n  return (\n    <Carousel className=\"w-full [&_.xrkr]:overflow-hidden [&_.xrkr]:flex [&_.xrkr]:flex-col max-w-xs\">\n      <Carousel.Content items={items}>\n        {(item) => (\n          <Carousel.Item id={item.id}>\n            <Card className=\"p-1\">\n              <Image\n                className=\"rounded-md h-40 object-center object-cover\"\n                src={`/slides/slide-${item.id}.jpg`}\n                alt=\"image 5\"\n                width={400}\n                height={300}\n              />\n              <Card.Header className=\"p-3\">\n                <Card.Title className=\"line-clamp-1 sm:text-lg\">{item.title}</Card.Title>\n                <Card.Description className=\"line-clamp-2\">{item.description}</Card.Description>\n              </Card.Header>\n            </Card>\n          </Carousel.Item>\n        )}\n      </Carousel.Content>\n\n      <Carousel.Handler>\n        <Carousel.Button slot=\"previous\" />\n        <Carousel.Button slot=\"next\" />\n      </Carousel.Handler>\n    </Carousel>\n  )\n}\n\nconst items = [\n  {\n    id: 1,\n    title: 'Vintage Leather Jacket',\n    description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n  },\n  {\n    id: 2,\n    title: 'Wireless Bluetooth Headphones',\n    description: 'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n  },\n  {\n    id: 3,\n    title: 'Organic Cotton T-Shirt',\n    description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n  },\n  {\n    id: 4,\n    title: 'Stainless Steel Water Bottle',\n    description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n  },\n  {\n    id: 5,\n    title: 'Running Shoes',\n    description: 'Lightweight and comfortable shoes designed for optimal performance.'\n  },\n  {\n    id: 6,\n    title: 'Smartwatch',\n    description: 'Stay connected and track your fitness with this sleek smartwatch.'\n  },\n  {\n    id: 7,\n    title: 'Portable Charger',\n    description: 'Never run out of battery with this high-capacity portable charger.'\n  }\n]\n",
    "type": "docs"
  },
  "media/carousel-api-demo": {
    "component": "@/components/docs/media/carousel-api-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Button } from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { Card, Carousel, type CarouselApi } from 'ui'\n\nexport default function CarouselDApiDemo() {\n  const [api, setApi] = React.useState<CarouselApi>()\n  const [current, setCurrent] = React.useState(0)\n  const [count, setCount] = React.useState(0)\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    setCount(api.scrollSnapList().length)\n    setCurrent(api.selectedScrollSnap() + 1)\n    api.on('select', () => {\n      setCurrent(api.selectedScrollSnap() + 1)\n    })\n  }, [api])\n\n  const handleSelect = (index: number) => {\n    if (api) {\n      api.scrollTo(index)\n      setCurrent(index + 1)\n    }\n  }\n\n  return (\n    <Carousel setApi={setApi} className=\"w-full max-w-sm\">\n      <Carousel.Content items={Array.from({ length: 10 }, (_, id) => ({ id: id + 1 }))}>\n        {({ id }) => (\n          <Carousel.Item id={id}>\n            <Card>\n              <Card.Content className=\"flex aspect-square items-center justify-center p-6\">\n                <span className=\"text-4xl font-semibold\">{id}</span>\n              </Card.Content>\n            </Card>\n          </Carousel.Item>\n        )}\n      </Carousel.Content>\n      <div className=\"flex justify-between mt-4 items-center\">\n        <div className=\"py-2 gap-1 flex text-center text-sm text-muted-foreground\">\n          {Array.from({ length: 10 }).map((_, index) => (\n            <Button\n              className={twJoin(\n                'focus:outline-none transition rounded-xl',\n                current === index + 1\n                  ? 'w-5 h-3 transition-all bg-primary hover:bg-primary/80'\n                  : 'bg-fg/10 hover:bg-fg/15 w-3 h-3'\n              )}\n              aria-label={`Slide ${current} of ${count}`}\n              onPress={() => handleSelect(index)}\n              key={index}\n            />\n          ))}\n        </div>\n\n        <div className=\"space-x-2\">\n          <Carousel.Button slot=\"previous\" />\n          <Carousel.Button slot=\"next\" />\n        </div>\n      </div>\n    </Carousel>\n  )\n}\n",
    "type": "docs"
  },
  "media/avatar-demo": {
    "component": "@/components/docs/media/avatar-demo",
    "raw": "'use client'\n\nimport AvatarGroupDemo from '@/components/docs/media/avatar-group-demo'\n\nexport default function AvatarDemo() {\n  return <AvatarGroupDemo />\n}\n",
    "type": "docs"
  },
  "media/avatar-shape-demo": {
    "component": "@/components/docs/media/avatar-shape-demo",
    "raw": "'use client'\n\nimport { Avatar } from 'ui'\n\nexport default function AvatarShapeDemo() {\n  return (\n    <Avatar shape=\"square\" initials=\"IR\" alt=\"irsyadadl\" src=\"https://github.com/irsyadadl.png\" />\n  )\n}\n",
    "type": "docs"
  },
  "media/carousel-options-demo": {
    "component": "@/components/docs/media/carousel-options-demo",
    "raw": "import * as React from 'react'\n\nimport { Card, Carousel } from 'ui'\n\nexport default function CarouselOptionsDemo() {\n  return (\n    <Carousel\n      opts={{\n        align: 'center',\n        loop: true\n      }}\n      className=\"w-full max-w-2xl\"\n    >\n      <Carousel.Content items={Array.from({ length: 16 }, (_, id) => ({ id: id + 1 }))}>\n        {({ id }) => (\n          <Carousel.Item id={id} className=\"basis-1/2 lg:basis-1/3\">\n            <Card className=\"flex aspect-square items-center justify-center\">\n              <Card.Title>{id}</Card.Title>\n            </Card>\n          </Carousel.Item>\n        )}\n      </Carousel.Content>\n\n      <Carousel.Handler>\n        <Carousel.Button slot=\"previous\" />\n        <Carousel.Button slot=\"next\" />\n      </Carousel.Handler>\n    </Carousel>\n  )\n}\n",
    "type": "docs"
  },
  "media/avatar-group-demo": {
    "component": "@/components/docs/media/avatar-group-demo",
    "raw": "'use client'\n\nimport { Avatar, AvatarGroup } from 'ui'\n\nexport default function AvatarGroupDemo() {\n  return (\n    <AvatarGroup aria-label=\"avatar-group\">\n      <Avatar role=\"avatar-1 \" alt=\"image 1\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=61\" />\n      <Avatar role=\"avatar-2 \" alt=\"image 2\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=62\" />\n      <Avatar role=\"avatar-3 \" alt=\"image 3\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=63\" />\n      <Avatar role=\"avatar-4 \" alt=\"image 4\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=64\" />\n      <Avatar role=\"avatar-5 \" alt=\"image 5\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=65\" />\n    </AvatarGroup>\n  )\n}\n",
    "type": "docs"
  },
  "media/avatar-fallback-demo": {
    "component": "@/components/docs/media/avatar-fallback-demo",
    "raw": "'use client'\n\nimport { Avatar } from 'ui'\n\nexport default function AvatarFallbackDemo() {\n  return <Avatar initials=\"IR\" src=\"https://github.com/irsyadadl.png\" />\n}\n",
    "type": "docs"
  },
  "media/avatar-status-demo": {
    "component": "@/components/docs/media/avatar-status-demo",
    "raw": "import React from 'react'\n\nimport { Avatar } from 'ui'\n\nexport default function AvatarStatusDemo() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex justify-center gap-2\">\n        <Avatar status=\"online\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=58\" />\n        <Avatar\n          shape=\"square\"\n          status=\"online\"\n          initials=\"IR\"\n          src=\"https://i.pravatar.cc/150?img=57\"\n        />\n      </div>\n      <div className=\"flex justify-center gap-2\">\n        <Avatar status=\"online\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=59\" />\n        <Avatar status=\"offline\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=62\" />\n        <Avatar status=\"away\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=63\" />\n        <Avatar status=\"dnd\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=64\" />\n        <Avatar status=\"idle\" initials=\"IR\" src=\"https://i.pravatar.cc/150?img=60\" />\n      </div>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "media/carousel-autoplay-demo": {
    "component": "@/components/docs/media/carousel-autoplay-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport Autoplay from 'embla-carousel-autoplay'\nimport { Card, Carousel } from 'ui'\n\nexport default function CarouselAutoplayDemo() {\n  const plugin = React.useRef(Autoplay({ delay: 1000, stopOnInteraction: true }))\n\n  return (\n    <Carousel\n      onMouseEnter={plugin.current.stop}\n      onMouseLeave={plugin.current.reset}\n      plugins={[plugin.current as any]}\n      opts={{\n        loop: true,\n        align: 'center'\n      }}\n      className=\"w-full [&_.xrkr]:h-56 [&_.xrkr]:overflow-hidden [&_.xrkr]:flex [&_.xrkr]:flex-col max-w-xs\"\n    >\n      <Carousel.Content items={items}>\n        {(item) => (\n          <Carousel.Item id={item.id}>\n            <div className=\"p-1\">\n              <Card>\n                <div className=\"bg-fg/5 border-b flex-1 relative\" />\n                <Card.Header>\n                  <Card.Title className=\"line-clamp-1 sm:text-lg\">{item.title}</Card.Title>\n                  <Card.Description className=\"line-clamp-2\">{item.description}</Card.Description>\n                </Card.Header>\n              </Card>\n            </div>\n          </Carousel.Item>\n        )}\n      </Carousel.Content>\n\n      <Carousel.Handler>\n        <Carousel.Button slot=\"previous\" />\n        <Carousel.Button slot=\"next\" />\n      </Carousel.Handler>\n    </Carousel>\n  )\n}\n\nconst items = [\n  {\n    id: 1,\n    title: 'Vintage Leather Jacket',\n    description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n  },\n  {\n    id: 2,\n    title: 'Wireless Bluetooth Headphones',\n    description: 'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n  },\n  {\n    id: 3,\n    title: 'Organic Cotton T-Shirt',\n    description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n  },\n  {\n    id: 4,\n    title: 'Stainless Steel Water Bottle',\n    description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n  },\n  {\n    id: 5,\n    title: 'Running Shoes',\n    description: 'Lightweight and comfortable shoes designed for optimal performance.'\n  },\n  {\n    id: 6,\n    title: 'Smartwatch',\n    description: 'Stay connected and track your fitness with this sleek smartwatch.'\n  },\n  {\n    id: 7,\n    title: 'Portable Charger',\n    description: 'Never run out of battery with this high-capacity portable charger.'\n  },\n  {\n    id: 8,\n    title: 'Noise-Canceling Earbuds',\n    description: 'Compact and powerful earbuds that block out unwanted noise.'\n  },\n  {\n    id: 9,\n    title: 'Yoga Mat',\n    description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n  },\n  {\n    id: 10,\n    title: 'LED Desk Lamp',\n    description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n  }\n]\n",
    "type": "docs"
  },
  "media/carousel-orientation-demo": {
    "component": "@/components/docs/media/carousel-orientation-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Card, Carousel } from 'ui'\n\nexport default function CarouselOrientationDemo() {\n  return (\n    <Carousel orientation=\"vertical\" className=\"w-full relative max-w-xs\">\n      <Carousel.Content items={items} className=\"h-64 py-4 snap-y\">\n        {(item) => (\n          <Carousel.Item className=\"pt-1 basis-1/2 md:basis-1/3 snap-center\">\n            <Card>\n              <Card.Header>\n                <Card.Title>{item.title}</Card.Title>\n                <Card.Description>{item.description}</Card.Description>\n              </Card.Header>\n            </Card>\n          </Carousel.Item>\n        )}\n      </Carousel.Content>\n\n      <Carousel.Handler>\n        <Carousel.Button slot=\"previous\" />\n        <Carousel.Button slot=\"next\" />\n      </Carousel.Handler>\n    </Carousel>\n  )\n}\n\nconst items = [\n  {\n    id: 1,\n    title: 'Vintage Leather Jacket',\n    description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n  },\n  {\n    id: 2,\n    title: 'Wireless Bluetooth Headphones',\n    description: 'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n  },\n  {\n    id: 3,\n    title: 'Organic Cotton T-Shirt',\n    description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n  },\n  {\n    id: 4,\n    title: 'Stainless Steel Water Bottle',\n    description: 'Keep your drinks cold or hot with this durable, insulated water bottle.'\n  },\n  {\n    id: 5,\n    title: 'Running Shoes',\n    description: 'Lightweight and comfortable shoes designed for optimal performance.'\n  },\n  {\n    id: 6,\n    title: 'Smartwatch',\n    description: 'Stay connected and track your fitness with this sleek smartwatch.'\n  },\n  {\n    id: 7,\n    title: 'Portable Charger',\n    description: 'Never run out of battery with this high-capacity portable charger.'\n  },\n  {\n    id: 8,\n    title: 'Noise-Canceling Earbuds',\n    description: 'Compact and powerful earbuds that block out unwanted noise.'\n  },\n  {\n    id: 9,\n    title: 'Yoga Mat',\n    description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n  },\n  {\n    id: 10,\n    title: 'LED Desk Lamp',\n    description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n  }\n]\n",
    "type": "docs"
  },
  "show-more": {
    "component": "@/components/ui/show-more",
    "raw": "'use client'\n\nimport { Text, ToggleButton } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { buttonStyles } from './button'\n\nconst showMoreStyles = tv({\n  base: 'text-sm leading-6 after:border-muted before:border-muted',\n  variants: {\n    orientation: {\n      vertical: 'mx-1 h-auto self-stretch',\n      horizontal: 'my-0.5 h-px w-full self-stretch'\n    }\n  },\n  compoundVariants: [\n    {\n      orientation: 'vertical',\n      className:\n        'mx-2 flex flex-col items-center before:border-l before:flex-1 before:mb-2 after:border-r after:flex-1 after:mt-2'\n    },\n    {\n      orientation: 'horizontal',\n      className:\n        'self-stretch my-2 flex items-center before:border-t before:flex-1 before:mr-2 after:border-t after:flex-1 after:ml-2'\n    }\n  ],\n  defaultVariants: {\n    orientation: 'horizontal'\n  }\n})\n\ninterface ShowMoreProps extends React.ComponentProps<typeof ToggleButton> {\n  className?: string\n  orientation?: 'horizontal' | 'vertical'\n  as?: 'text' | 'button'\n  text?: string\n}\n\nconst ShowMore = ({\n  as = 'button',\n  orientation = 'horizontal',\n  className,\n  ...props\n}: ShowMoreProps) => {\n  return (\n    <div className={showMoreStyles({ orientation, className })}>\n      {as === 'button' ? (\n        <ToggleButton\n          {...props}\n          className={buttonStyles({ shape: 'circle', appearance: 'outline', size: 'small' })}\n        />\n      ) : (\n        <Text slot=\"description\">{props.text}</Text>\n      )}\n    </div>\n  )\n}\n\nexport { ShowMore }\n",
    "type": "ui"
  },
  "tag-field": {
    "component": "@/components/ui/tag-field",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport type { Key } from 'react-aria-components'\nimport { Group, TextField } from 'react-aria-components'\nimport type { ListData } from 'react-stately'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport type { FieldProps } from './field'\nimport { Description, Input, Label } from './field'\nimport { cn } from './primitive'\nimport type { RestrictedIntent, TagGroupProps } from './tag-group'\nimport { Tag } from './tag-group'\n\nconst tagFieldsStyles = tv({\n  base: ['relative flex min-h-10 flex-row flex-wrap items-center'],\n  variants: {\n    appearance: {\n      outline: [\n        'px-1 rounded-lg shadow-sm border',\n        'has-[input[data-focused=true]]:border-primary',\n        'has-[input[data-invalid=true][data-focused=true]]:border-danger has-[input[data-invalid=true]]:border-danger has-[input[data-invalid=true]]:ring-danger/20',\n        'has-[input[data-focused=true]]:ring-4 has-[input[data-focused=true]]:ring-primary/20'\n      ],\n      plain: ['has-[input[data-focused=true]]:border-transparent']\n    }\n  }\n})\n\ninterface TagItemProps {\n  id: number\n  name: string\n}\n\ninterface TagFieldProps extends Pick<TagGroupProps, 'shape'>, FieldProps {\n  intent?: RestrictedIntent\n  isDisabled?: boolean\n  max?: number\n  className?: string\n  children?: React.ReactNode\n  name?: string\n  list: ListData<TagItemProps>\n  onItemInserted?: (tag: TagItemProps) => void\n  onItemCleared?: (tag: TagItemProps) => void\n  appearance?: 'outline' | 'plain'\n}\n\nconst TagField = ({\n  appearance = 'outline',\n  name,\n  className,\n  list,\n  onItemCleared,\n  onItemInserted,\n  ...props\n}: TagFieldProps) => {\n  const [isInvalid, setIsInvalid] = React.useState(false)\n  const [inputValue, setInputValue] = React.useState('')\n\n  const existingTagCount = list.items.length\n  const maxTags = props.max !== undefined ? props.max : Infinity\n  const maxTagsToAdd = maxTags - existingTagCount\n\n  const insertTag = () => {\n    const tagNames = inputValue.split(/,/)\n    if (maxTagsToAdd <= 0) {\n      setIsInvalid(true)\n      setInputValue('')\n      const timeoutId = setTimeout(() => {\n        setIsInvalid(false)\n      }, 2000)\n\n      return () => clearTimeout(timeoutId)\n    }\n\n    tagNames.slice(0, maxTagsToAdd).forEach((tagName) => {\n      const formattedName = tagName\n        .trim()\n        .replace(/\\s+/g, ' ')\n        .replace(/[\\t\\r\\n]/g, '')\n\n      if (\n        formattedName &&\n        !list.items.some(({ name }) => name.toLowerCase() === formattedName.toLowerCase())\n      ) {\n        const tag = {\n          id: (list.items.at(-1)?.id ?? 0) + 1,\n          name: formattedName\n        }\n\n        list.append(tag)\n        onItemInserted?.(tag)\n      }\n    })\n\n    setInputValue('')\n  }\n\n  const clearInvalidFeedback = () => {\n    if (maxTags - list.items.length <= maxTagsToAdd) {\n      setIsInvalid(false)\n    }\n  }\n\n  const onRemove = (keys: Set<Key>) => {\n    list.remove(...keys)\n    onItemCleared?.(list.getItem([...keys][0]))\n    clearInvalidFeedback()\n  }\n\n  const onKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' || e.key === ',') {\n      e.preventDefault()\n      insertTag()\n    }\n\n    if (e.key === 'Backspace' && inputValue === '') {\n      popLast()\n      clearInvalidFeedback()\n    }\n  }\n\n  const popLast = React.useCallback(() => {\n    if (list.items.length == 0) {\n      return\n    }\n\n    const endKey = list.items[list.items.length - 1]\n\n    if (endKey !== null) {\n      list.remove(endKey.id)\n      onItemCleared?.(list.getItem(endKey.id))\n    }\n  }, [list, onItemCleared])\n\n  return (\n    <div className={cn('flex flex-col gap-1 w-full', className)}>\n      {props.label && <Label>{props.label}</Label>}\n      <Group className={twJoin('flex flex-col', props.isDisabled && 'opacity-50')}>\n        <Tag.Group\n          intent={props.intent}\n          shape={props.shape}\n          aria-label=\"List item inserted\"\n          onRemove={onRemove}\n        >\n          <div className={tagFieldsStyles({ appearance })}>\n            <div className=\"flex flex-1 flex-wrap items-center\">\n              <Tag.List\n                items={list.items}\n                className={twJoin(\n                  list.items.length !== 0\n                    ? appearance === 'outline' && 'py-1.5 px-0.5 gap-1.5'\n                    : 'gap-0',\n                  props.shape === 'square' && '[&_.jdt3lr2x]:rounded-[calc(var(--radius)-4px)]',\n                  '[&_.jdt3lr2x]:cursor-default last:[&_.jdt3lr2x]:-mr-1 outline-none'\n                )}\n              >\n                {(item) => <Tag.Item>{item.name}</Tag.Item>}\n              </Tag.List>\n              <TextField\n                isDisabled={props.isDisabled}\n                aria-label={props?.label ?? (props['aria-label'] || props.placeholder)}\n                isInvalid={isInvalid}\n                onKeyDown={onKeyDown}\n                onChange={setInputValue}\n                value={inputValue}\n                {...props}\n              >\n                <Input\n                  className=\"w-auto inline\"\n                  placeholder={maxTagsToAdd <= 0 ? 'Remove one to add more' : props.placeholder}\n                />\n              </TextField>\n            </div>\n          </div>\n        </Tag.Group>\n        {name && (\n          <input hidden name={name} value={list.items.map((i) => i.name).join(',')} readOnly />\n        )}\n      </Group>\n      {props.description && <Description>{props.description}</Description>}\n    </div>\n  )\n}\n\nexport { TagField, type TagItemProps }\n",
    "type": "ui"
  },
  "note": {
    "component": "@/components/ui/note",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconCircleCheck, IconCircleInfo, IconTriangleInfo } from 'justd-icons'\nimport { Text } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst noteStyles = tv({\n  base: [\n    'my-4 px-5 [&_.nd]:block [&_.nd]:text-sm py-4 overflow-hidden rounded-lg border [&_strong]:font-medium',\n    '[&_[data-slot=icon]]:size-5 [&_[data-slot=icon]]:shrink-0'\n  ],\n  variants: {\n    intent: {\n      primary: [\n        'border-primary-500/20 [&_a]:text-primary-600 text-primary-800 bg-primary-50/50 [&_[data-slot=icon]]:text-primary-600 leading-4',\n        'dark:bg-primary-600/10 dark:text-primary-200 dark:[&_a]:text-primary-50 dark:[&_[data-slot=icon]]:text-primary-400'\n      ],\n      secondary: [\n        'border-zinc-500/20 [&_a]:text-zinc-600 text-zinc-900 bg-zinc-50/50 [&_[data-slot=icon]]:text-zinc-500 leading-4',\n        'dark:bg-zinc-500/10 dark:text-zinc-200 dark:[&_a]:text-zinc-50 dark:[&_[data-slot=icon]]:text-zinc-50'\n      ],\n      info: [\n        'border-lime-500/20 [&_a]:text-lime-600 text-lime-800 bg-lime-50/50 [&_[data-slot=icon]]:text-lime-500 leading-4',\n        'dark:bg-lime-500/10 dark:text-lime-200 dark:[&_a]:text-lime-50 dark:[&_[data-slot=icon]]:text-lime-400'\n      ],\n      warning: [\n        'border-amber-500/20 [&_a]:text-amber-600 text-amber-800 bg-amber-50/50 [&_[data-slot=icon]]:text-amber-500 leading-4',\n        'dark:bg-amber-500/10 dark:text-amber-200 dark:[&_a]:text-amber-50 dark:[&_[data-slot=icon]]:text-amber-400'\n      ],\n      danger: [\n        'border-red-500/20 [&_a]:text-red-600 text-red-800 bg-red-50/50 [&_[data-slot=icon]]:text-red-500 leading-4',\n        'dark:bg-red-500/10 dark:text-red-200 dark:[&_a]:text-red-50 dark:[&_[data-slot=icon]]:text-red-400'\n      ],\n      success: [\n        'border-emerald-500/20 [&_a]:text-emerald-600 text-emerald-900 bg-emerald-50/50 [&_[data-slot=icon]]:text-emerald-600 leading-4',\n        'dark:bg-emerald-500/10 dark:text-emerald-200 dark:[&_a]:text-emerald-50 dark:[&_[data-slot=icon]]:text-emerald-400'\n      ]\n    }\n  },\n  defaultVariants: {\n    intent: 'primary'\n  }\n})\n\ninterface NoteProps\n  extends React.HtmlHTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof noteStyles> {\n  hideIndicator?: boolean\n}\n\nconst Note = ({ hideIndicator = false, intent = 'primary', className, ...props }: NoteProps) => {\n  return (\n    <div className={noteStyles({ intent, className })} {...props}>\n      <div className=\"flex items-start gap-x-2.5\">\n        {!hideIndicator && (\n          <div className=\"w-5 mt-[3.5px]\">\n            {['info', 'primary', 'secondary'].includes(intent) ? (\n              <IconCircleInfo />\n            ) : intent === 'success' ? (\n              <IconCircleCheck />\n            ) : (\n              <IconTriangleInfo />\n            )}\n          </div>\n        )}\n        <Text slot=\"description\" {...props} className=\"nd\">\n          {props.children}\n        </Text>\n      </div>\n    </div>\n  )\n}\n\nexport { Note, type NoteProps }\n",
    "type": "ui"
  },
  "keyboard": {
    "component": "@/components/ui/keyboard",
    "raw": "import * as React from 'react'\n\nimport { Keyboard as KeyboardPrimitive } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst keyboardStyles = tv({\n  slots: {\n    base: '-mr-1 ml-auto hidden items-center gap-[0.25rem] px-1 lg:inline-flex',\n    kbd: [\n      'text-center font-sans capitalize text-muted-fg group-focus:text-fg forced-colors:group-focus:text-[HighlightText]',\n      'inline-grid min-h-5 min-w-5 place-content-center rounded bg-background font-sans text-[.75rem] uppercase text-fg ring-1 ring-fg/10 group-focus:opacity-60'\n    ]\n  }\n})\n\nconst { base, kbd } = keyboardStyles()\n\ninterface KeyboardProps extends React.HTMLAttributes<HTMLElement> {\n  keys: string | string[]\n  classNames?: {\n    base?: string\n    kbd?: string\n  }\n}\n\nconst Keyboard = ({ keys, classNames, className, ...props }: KeyboardProps) => {\n  return (\n    <KeyboardPrimitive className={base({ className: classNames?.base ?? className })} {...props}>\n      {(Array.isArray(keys) ? keys : keys.split('')).map((char, index) => (\n        <kbd\n          key={index}\n          className={kbd({ className: index > 0 && char.length > 1 ? 'pl-1' : classNames?.kbd })}\n        >\n          {char}\n        </kbd>\n      ))}\n    </KeyboardPrimitive>\n  )\n}\n\nexport { Keyboard, type KeyboardProps }\n",
    "type": "ui"
  },
  "date-range-picker": {
    "component": "@/components/ui/date-range-picker",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  DateRangePicker as DateRangePickerPrimitive,\n  type DateRangePickerProps as DateRangePickerPrimitiveProps,\n  type DateValue,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DateInput } from './date-field'\nimport { DatePickerIcon, DatePickerOverlay } from './date-picker'\nimport { Description, FieldError, FieldGroup, Label } from './field'\nimport { ctr } from './primitive'\n\nconst dateRangePickerStyles = tv({\n  slots: {\n    base: 'group flex flex-col gap-1',\n    dateRangePickerInputStart: 'px-2 lg:text-sm font-mono uppercase text-base',\n    dateRangePickerInputEnd: 'flex-1 px-2 py-1.5 font-mono uppercase text-base lg:text-sm',\n    dateRangePickerDash:\n      'text-zinc-800 group-disabled:text-zinc-200 dark:text-zinc-200 group-disabled:dark:text-zinc-600 forced-colors:text-[ButtonText] group-disabled:forced-colors:text-[GrayText]'\n  }\n})\nconst { base, dateRangePickerInputStart, dateRangePickerInputEnd, dateRangePickerDash } =\n  dateRangePickerStyles()\n\ninterface DateRangePickerProps<T extends DateValue> extends DateRangePickerPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst DateRangePicker = <T extends DateValue>({\n  label,\n  className,\n  description,\n  errorMessage,\n  ...props\n}: DateRangePickerProps<T>) => {\n  return (\n    <DateRangePickerPrimitive {...props} className={ctr(className, base())}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup className=\"w-auto min-w-40\">\n        <DateInput slot=\"start\" className={dateRangePickerInputStart()} />\n        <span aria-hidden=\"true\" className={dateRangePickerDash()}>\n          –\n        </span>\n        <DateInput slot=\"end\" className={dateRangePickerInputEnd()} />\n        <DatePickerIcon />\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n      <DatePickerOverlay range />\n    </DateRangePickerPrimitive>\n  )\n}\n\nexport { DateRangePicker, type DateRangePickerProps }\n",
    "type": "ui"
  },
  "list-box": {
    "component": "@/components/ui/list-box",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconHamburger } from 'justd-icons'\nimport {\n  composeRenderProps,\n  ListBox as ListBoxPrimitive,\n  ListBoxItem as ListBoxItemPrimitive,\n  type ListBoxItemProps as ListBoxItemPrimitiveProps,\n  type ListBoxProps as ListBoxPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DropdownItemDetails, DropdownSection } from './dropdown'\nimport { cn } from './primitive'\n\nconst listBoxStyles = tv({\n  base: 'flex max-h-96 w-full min-w-72 flex-col overflow-y-auto rounded-xl border p-1 shadow-xl outline-none'\n})\n\ninterface ListBoxProps<T> extends ListBoxPrimitiveProps<T> {\n  className?: string\n}\n\nconst ListBox = <T extends object>({ children, className, ...props }: ListBoxProps<T>) => (\n  <ListBoxPrimitive {...props} className={listBoxStyles({ className })}>\n    {children}\n  </ListBoxPrimitive>\n)\n\nconst listBoxItemStyles = tv({\n  base: 'my-0.5 cursor-pointer rounded-md p-2 text-base outline-none transition lg:text-sm',\n  variants: {\n    isHovered: { true: 'bg-secondary text-secondary-fg' },\n    isFocused: {\n      true: '[&_[data-slot=icon]]:text-primary-fg [&_[data-slot=label]]:text-primary-fg [&_.text-muted-fg]:text-primary-fg/80 bg-primary text-primary-fg'\n    },\n    isDragging: { true: 'cursor-grabbing bg-secondary text-secondary-fg' },\n    isSelected: { true: 'bg-primary text-primary-fg' },\n    isDisabled: {\n      true: 'opacity-70 cursor-default text-muted-fg'\n    }\n  }\n})\n\ninterface ListBoxItemProps<T extends Object> extends ListBoxItemPrimitiveProps<T> {\n  className?: string\n}\n\nconst ListBoxItem = <T extends object>({ children, className, ...props }: ListBoxItemProps<T>) => {\n  const textValue = typeof children === 'string' ? children : undefined\n\n  return (\n    <ListBoxItemPrimitive\n      textValue={textValue}\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        listBoxItemStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      {(values) => (\n        <div className=\"flex items-center gap-2\">\n          <>\n            {values.allowsDragging && (\n              <IconHamburger\n                className={cn(\n                  'size-4 shrink-0 text-muted-fg transition',\n                  values.isFocused && 'text-fg',\n                  values.isDragging && 'text-fg',\n                  values.isSelected && 'text-primary-fg/70'\n                )}\n              />\n            )}\n            <div className=\"flex flex-col\">\n              {typeof children === 'function' ? children(values) : children}\n            </div>\n          </>\n        </div>\n      )}\n    </ListBoxItemPrimitive>\n  )\n}\n\ninterface ListBoxPickerProps<T> extends ListBoxProps<T> {}\n\nconst ListBoxPicker = <T extends object>({ className, ...props }: ListBoxPickerProps<T>) => {\n  return (\n    <ListBoxPrimitive\n      className={cn('max-h-72 overflow-auto p-1 outline-none', className)}\n      {...props}\n    />\n  )\n}\n\nListBox.Section = DropdownSection\nListBox.ItemDetails = DropdownItemDetails\nListBox.Item = ListBoxItem\nListBox.Picker = ListBoxPicker\n\nexport { ListBox, listBoxStyles, type ListBoxPickerProps }\n",
    "type": "ui"
  },
  "pagination": {
    "component": "@/components/ui/pagination",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  IconChevronLgLeft,\n  IconChevronLgRight,\n  IconChevronsLgLeft,\n  IconChevronsLgRight,\n  IconDotsHorizontal\n} from 'justd-icons'\nimport {\n  composeRenderProps,\n  ListBox,\n  ListBoxItem,\n  type ListBoxItemProps,\n  type ListBoxProps,\n  Section,\n  type SectionProps,\n  Separator\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { buttonStyles } from './button'\nimport { cn } from './primitive'\n\nconst paginationStyles = tv({\n  slots: {\n    pagination: 'mx-auto flex w-full justify-center gap-1',\n    section: 'flex h-9 gap-1',\n    list: 'flex flex-row items-center gap-1',\n    itemButton:\n      'focus-visible:border-primary focus-visible:bg-primary/10 dark:focus-visible:text-primary-100 dark:[&>[data-slot=icon]]:text-primary-100 focus-visible:text-primary-900 [&>[data-slot=icon]]:text-primary-960 focus-visible:ring-4 focus-visible:ring-primary/20',\n    itemLabel: 'h-9 px-3.5 grid place-content-center',\n    itemSeparator: 'h-9 grid place-content-center',\n    itemEllipsis:\n      'flex items-center justify-center focus-visible:border-primary rounded-lg border border-transparent focus:outline-none size-9 focus-visible:bg-primary/10 dark:focus-visible:text-primary-100 dark:[&>[data-slot=icon]]:text-primary-100 focus-visible:text-primary-900 [&>[data-slot=icon]]:text-primary-960 focus-visible:ring-4 focus-visible:ring-primary/20',\n    itemEllipsisIcon: 'flex size-9 items-center justify-center',\n    defaultItem:\n      'focus-visible:border-primary disabled:cursor-default focus-visible:bg-primary/10 dark:focus-visible:text-primary-100 dark:[&>[data-slot=icon]]:text-primary-100 focus-visible:text-primary-900 [&>[data-slot=icon]]:text-primary-960 focus-visible:ring-4 focus-visible:ring-primary/20 disabled:opacity-100',\n    itemSeparatorLine: 'h-5 w-[1.5px] bg-zinc-300 dark:bg-zinc-700 rotate-[14deg] shrink-0'\n  }\n})\n\nconst {\n  pagination,\n  section,\n  list,\n  itemButton,\n  itemLabel,\n  itemSeparator,\n  itemEllipsis,\n  itemEllipsisIcon,\n  defaultItem,\n  itemSeparatorLine\n} = paginationStyles()\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (\n  <nav role=\"navigation\" aria-label=\"pagination\" className={pagination({ className })} {...props} />\n)\n\nconst PaginationSection = <T extends object>({ className, ...props }: SectionProps<T>) => (\n  <Section {...props} className={section({ className })} />\n)\n\nconst PaginationList = <T extends object>({ className, ...props }: ListBoxProps<T>) => {\n  return (\n    <ListBox\n      orientation=\"horizontal\"\n      aria-label={props['aria-label'] || 'Pagination'}\n      layout=\"grid\"\n      className={composeRenderProps(className, (className) => list({ className }))}\n      {...props}\n    />\n  )\n}\n\nconst renderListItem = (\n  props: ListBoxItemProps & {\n    textValue?: string\n    'aria-current'?: string | undefined\n    isDisabled?: boolean\n    className?: string\n  },\n  children: React.ReactNode\n) => <ListBoxItem {...props}>{children}</ListBoxItem>\n\ninterface PaginationItemProps extends ListBoxItemProps {\n  children?: React.ReactNode\n  className?: string\n  intent?:\n    | 'primary'\n    | 'secondary'\n    | 'danger'\n    | 'warning'\n    | 'info'\n    | 'light/dark'\n    | 'success'\n    | 'light'\n    | 'dark'\n  size?: 'medium' | 'large' | 'square-petite' | 'extra-small' | 'small'\n  shape?: 'square' | 'circle'\n  appearance?: 'solid' | 'outline' | 'plain'\n  isCurrent?: boolean\n  role?: 'label' | 'separator' | 'ellipsis' | 'default' | 'last' | 'first' | 'previous' | 'next'\n}\n\nconst PaginationItem = ({\n  role = 'default',\n  size = 'square-petite',\n  appearance = 'outline',\n  intent,\n  shape = 'square',\n  className,\n  isCurrent,\n  children,\n  ...props\n}: PaginationItemProps) => {\n  const textValue =\n    typeof children === 'string'\n      ? children\n      : typeof children === 'number'\n        ? children.toString()\n        : undefined\n\n  const renderPaginationIndicator = (indicator: React.ReactNode) =>\n    renderListItem(\n      {\n        textValue: role,\n        'aria-current': isCurrent ? 'page' : undefined,\n        isDisabled: isCurrent,\n        className: cn(\n          buttonStyles({\n            appearance: 'outline',\n            size: 'square-petite',\n            className: itemButton()\n          }),\n          className\n        ),\n        ...props\n      },\n      indicator\n    )\n\n  switch (role) {\n    case 'label':\n      return renderListItem(\n        {\n          textValue: textValue,\n          className: itemLabel({ className }),\n          ...props\n        },\n        children\n      )\n    case 'separator':\n      return renderListItem(\n        {\n          textValue: 'Separator',\n          className: itemSeparator({ className }),\n          ...props\n        },\n        <Separator orientation=\"vertical\" className={itemSeparatorLine()} />\n      )\n    case 'ellipsis':\n      return renderListItem(\n        {\n          textValue: 'More pages',\n          className: itemEllipsis({ className }),\n          ...props\n        },\n        <span aria-hidden className={itemEllipsisIcon({ className })}>\n          <IconDotsHorizontal />\n        </span>\n      )\n    case 'previous':\n      return renderPaginationIndicator(<IconChevronLgLeft />)\n    case 'next':\n      return renderPaginationIndicator(<IconChevronLgRight />)\n    case 'first':\n      return renderPaginationIndicator(<IconChevronsLgLeft />)\n    case 'last':\n      return renderPaginationIndicator(<IconChevronsLgRight />)\n    default:\n      return renderListItem(\n        {\n          textValue: textValue,\n          'aria-current': isCurrent ? 'page' : undefined,\n          isDisabled: isCurrent,\n          className: cn(\n            buttonStyles({\n              intent: isCurrent ? 'primary' : intent,\n              appearance: isCurrent ? 'solid' : appearance,\n              size,\n              className: defaultItem({ className })\n            }),\n            className\n          ),\n          ...props\n        },\n        children\n      )\n  }\n}\n\nPagination.Item = PaginationItem\nPagination.List = PaginationList\nPagination.Section = PaginationSection\n\nexport { Pagination }\n",
    "type": "ui"
  },
  "link": {
    "component": "@/components/ui/link",
    "raw": "'use client'\n\nimport {\n  composeRenderProps,\n  Link as LinkPrimitive,\n  type LinkProps as LinkPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst linkStyles = tv({\n  base: 'forced-colors:outline-[Highlight] focus-visible:outline-2 outline outline-offset-2 disabled:focus-visible:outline-0 outline-0 outline-primary rounded disabled:opacity-60 forced-colors:disabled:text-[GrayText] border-transparent transition-colors disabled:cursor-default',\n  variants: {\n    intent: {\n      unstyled: 'text-fg',\n      primary:\n        'text-primary-600 hover:text-primary-500 dark:text-primary-500 dark:hover:text-primary-400 forced-colors:disabled:text-[GrayText]',\n      danger:\n        'text-red-600 hover:text-red-500 dark:text-red-500 dark:hover:text-red-400 forced-colors:disabled:text-[GrayText]',\n      'lad/primary':\n        'text-fg hover:text-primary-500 dark:hover:text-primary-400 forced-colors:disabled:text-[GrayText]',\n      secondary: 'text-zinc-800 dark:text-zinc-300 hover:text-zinc-700 dark:hover:text-zinc-white'\n    }\n  },\n  defaultVariants: {\n    intent: 'unstyled'\n  }\n})\n\ninterface LinkProps extends LinkPrimitiveProps {\n  intent?: 'primary' | 'secondary' | 'danger' | 'lad/primary' | 'unstyled'\n}\n\nconst Link = ({ className, ...props }: LinkProps) => {\n  return (\n    <LinkPrimitive\n      aria-label={props['aria-label'] ?? 'Link'}\n      {...props}\n      className={composeRenderProps(className, (className, ...renderProps) =>\n        linkStyles({ ...renderProps, intent: props.intent, className })\n      )}\n    />\n  )\n}\n\nexport { Link, LinkPrimitive, type LinkPrimitiveProps, type LinkProps }\n",
    "type": "ui"
  },
  "tabs": {
    "component": "@/components/ui/tabs",
    "raw": "'use client'\n\nimport { useId } from 'react'\n\nimport { LayoutGroup, motion } from 'framer-motion'\nimport {\n  composeRenderProps,\n  Tab as TabPrimitive,\n  TabList as TabListPrimitive,\n  type TabListProps,\n  TabPanel as TabPanelPrimitive,\n  type TabPanelProps,\n  type TabProps,\n  Tabs as TabsPrimitive,\n  type TabsProps\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from './primitive'\n\nconst tabsStyles = tv({\n  base: 'group flex gap-4',\n  variants: {\n    orientation: {\n      horizontal: 'flex-col',\n      vertical: 'w-[800px] flex-row'\n    }\n  }\n})\n\nconst Tabs = (props: TabsProps) => {\n  return (\n    <TabsPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        tabsStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    />\n  )\n}\n\nconst tabListStyles = tv({\n  base: 'flex',\n  variants: {\n    orientation: {\n      horizontal: 'flex-row gap-x-5 border-b',\n      vertical: 'flex-col items-start gap-y-4 border-l'\n    }\n  }\n})\n\nconst TabList = <T extends object>(props: TabListProps<T>) => {\n  const id = useId()\n  return (\n    <LayoutGroup id={id}>\n      <TabListPrimitive\n        {...props}\n        className={composeRenderProps(props.className, (className, renderProps) =>\n          tabListStyles({ ...renderProps, className })\n        )}\n      />\n    </LayoutGroup>\n  )\n}\n\nconst tabStyles = tv({\n  base: [\n    'relative flex whitespace-nowrap cursor-default items-center rounded-full text-sm font-medium outline-none transition forced-color-adjust-none hover:text-fg [&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:mr-2',\n    // hor\n    'group-orientation-vertical:w-full group-orientation-vertical:py-0 group-orientation-vertical:pl-4 group-orientation-vertical:pr-2',\n    // ver\n    'group-orientation-horizontal:pb-3'\n  ],\n  variants: {\n    isSelected: {\n      false: 'text-muted-fg',\n      true: 'text-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]'\n    },\n    isFocused: { false: 'ring-0', true: 'text-fg' },\n    isDisabled: {\n      true: 'text-muted-fg/50 forced-colors:text-[GrayText] forced-colors:selected:bg-[GrayText] forced-colors:selected:text-[HighlightText]'\n    }\n  }\n})\n\nconst Tab = ({ children, ...props }: TabProps) => {\n  return (\n    <TabPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (_className, renderProps) =>\n        tabStyles({\n          ...renderProps,\n          className: twJoin('href' in props && 'cursor-pointer', _className)\n        })\n      )}\n    >\n      {({ isSelected }) => (\n        <>\n          {children}\n          {isSelected && (\n            <motion.span\n              className={cn(\n                'absolute rounded bg-fg',\n                // horizontal\n                'group-orientation-horizontal:inset-x-0 group-orientation-horizontal:-bottom-px group-orientation-horizontal:h-0.5 group-orientation-horizontal:w-full',\n                // vertical\n                'group-orientation-vertical:left-0 group-orientation-vertical:h-[calc(100%-10%)] group-orientation-vertical:w-0.5 group-orientation-vertical:transform'\n              )}\n              layoutId=\"current-selected\"\n              transition={{ type: 'spring', stiffness: 500, damping: 40 }}\n            />\n          )}\n        </>\n      )}\n    </TabPrimitive>\n  )\n}\n\nconst tabPanelStyles = tv({\n  base: 'flex-1 text-sm text-fg',\n  variants: {\n    isFocusVisible: {\n      true: 'outline-none'\n    }\n  }\n})\n\nconst TabPanel = (props: TabPanelProps) => {\n  return (\n    <TabPanelPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        tabPanelStyles({ ...renderProps, className })\n      )}\n    />\n  )\n}\nTabs.List = TabList\nTabs.Tab = Tab\nTabs.Panel = TabPanel\n\nexport { Tabs }\n",
    "type": "ui"
  },
  "card": {
    "component": "@/components/ui/card",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport type { HeadingProps, TextProps } from 'react-aria-components'\nimport { Heading } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description } from './field'\n\nconst card = tv({\n  slots: {\n    root: [\n      'xrkr bg-background rounded-lg xkd2 [&:has(table)_.ccvgs8x]:border-t [&:has(table)_.x32]:bg-tertiary [&:has(table)]:overflow-hidden border text-fg shadow-sm [&:has(.larhy3):not(:has(.yahnba))>.ccvgs8x]:pt-6 [&:has(.larhy3)]:overflow-hidden [&_table]:overflow-hidden'\n    ],\n    header: 'flex xlw32 flex-col space-y-1.5 px-6 py-5',\n    title: 'text-lg klda font-semibold leading-none tracking-tight',\n    description: 'text-base dl2 text-muted-fg sm:text-sm',\n    content:\n      'yahnba px-6 pb-6 has-[.t-hea]:bg-secondary/40 has-[table]:p-0 [&:has(table)+.ccvgs8x]:py-5 [&:has(table)]:border-t [&_.t-cel]:px-6 [&_.t-col]:px-6',\n    footer: 'ccvgs8x flex items-center p-6 pt-0'\n  }\n})\n\nconst { root, header, title, description, content, footer } = card()\n\nconst Card = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div className={root({ className })} {...props} />\n}\n\ninterface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n  title?: string\n  description?: string\n}\n\nconst CardHeader = ({ className, ...props }: CardHeaderProps) => (\n  <div className={header({ className })} {...props}>\n    {props.title && <CardTitle>{props.title}</CardTitle>}\n    {props.description && <CardDescription>{props.description}</CardDescription>}\n    {!props.title && typeof props.children === 'string' ? <CardTitle {...props} /> : props.children}\n  </div>\n)\n\nconst CardTitle = ({ className, ...props }: HeadingProps) => {\n  return <Heading slot=\"title\" className={title({ className })} {...props} />\n}\n\nconst CardDescription = (props: TextProps) => {\n  return <Description className={description({ className: props.className })} {...props} />\n}\n\nconst CardContent = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div className={content({ className })} {...props} />\n}\n\nconst CardFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div className={footer({ className })} {...props} />\n}\n\nCard.Content = CardContent\nCard.Description = CardDescription\nCard.Footer = CardFooter\nCard.Header = CardHeader\nCard.Title = CardTitle\n\nexport { Card }\n",
    "type": "ui"
  },
  "slider": {
    "component": "@/components/ui/slider",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { useSlotId } from '@react-aria/utils'\nimport {\n  composeRenderProps,\n  type LabelProps,\n  Slider as SliderPrimitive,\n  SliderOutput as SliderOutputPrimitive,\n  type SliderOutputProps as SliderOutputPrimitiveProps,\n  type SliderProps as SliderPrimitiveProps,\n  SliderStateContext as SliderStateContextPrimitive,\n  SliderThumb as SliderThumbPrimitive,\n  type SliderThumbProps as SliderThumbPrimitiveProps,\n  SliderTrack as SliderTrackPrimitive,\n  type SliderTrackProps as SliderTrackPrimitiveProps,\n  TextContext as TextContextPrimitive,\n  type TextProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { Description, Label } from './field'\n\nconst sliderStyles = tv({\n  slots: {\n    root: 'flex disabled:opacity-50 flex-col gap-2 orientation-horizontal:w-full orientation-vertical:h-56 orientation-vertical:items-center',\n    track: [\n      'relative group/track rounded-full bg-zinc-200 dark:bg-zinc-800 cursor-pointer disabled:cursor-default disabled:bg-bg-disabled',\n      'grow orientation-vertical:flex-1 orientation-vertical:w-1.5 orientation-horizontal:w-full orientation-horizontal:h-1.5'\n    ],\n    filler: [\n      'rounded-full bg-primary group-disabled/track:bg-bg-disabled',\n      'pointer-events-none absolute group-orientation-horizontal/top-0 group-orientation-vertical/track:w-full group-orientation-vertical/track:bottom-0 group-orientation-horizontal/track:h-full'\n    ],\n    thumb: [\n      'outline-none dragging:cursor-grabbing focus:ring-4 border border-zinc-200 focus:ring-primary/20 focus:border-primary focus:outline-none forced-colors:outline-[Highlight]',\n      'rounded-full bg-white transition-[width,height]',\n      'absolute left-[50%] top-[50%] block !-translate-x-1/2 !-translate-y-1/2',\n      'disabled:bg-bg-disabled disabled:border disabled:border-bg',\n      'orientation-vertical:w-2 orientation-horizontal:h-2',\n      'size-[1.15rem] dragging:size-[1.30rem] dragging:border-primary'\n    ],\n    valueLabel: 'text-muted-fg text-sm'\n  }\n})\n\nconst { track, filler, thumb, root, valueLabel } = sliderStyles()\n\ninterface SliderProps extends SliderRootProps, VariantProps<typeof sliderStyles> {\n  label?: LabelProps['children']\n  description?: TextProps['children']\n  showValue?: boolean | ((value: number[]) => string)\n}\n\nconst Slider = ({ label, description, showValue = true, ...props }: SliderProps) => (\n  <SliderRoot {...props}>\n    <div className=\"flex items-center justify-between gap-2\">\n      {label && <Label>{label}</Label>}\n      {(showValue || typeof showValue === 'function') && (\n        <SliderValueLabel>\n          {({ state }) => (typeof showValue === 'function' ? showValue(state.values) : undefined)}\n        </SliderValueLabel>\n      )}\n    </div>\n    <SliderControls />\n    {description && <Description>{description}</Description>}\n  </SliderRoot>\n)\n\ninterface SliderRootProps extends SliderPrimitiveProps {}\n\nconst SliderRoot = (props: SliderRootProps) => {\n  const descriptionId = useSlotId()\n  return (\n    <TextContextPrimitive.Provider value={{ slots: { description: { id: descriptionId } } }}>\n      <SliderPrimitive\n        data-slot=\"root\"\n        aria-describedby={descriptionId}\n        {...props}\n        className={composeRenderProps(props.className, (className) => root({ className }))}\n      />\n    </TextContextPrimitive.Provider>\n  )\n}\n\ninterface SliderControlsProps extends SliderTrackProps, VariantProps<typeof sliderStyles> {}\n\nconst SliderControls = (props: SliderControlsProps) => {\n  const { values } = React.useContext(SliderStateContextPrimitive)\n  return (\n    <SliderTrack {...props}>\n      <SliderFiller />\n      {values.map((_, i) => (\n        <SliderThumb key={i} index={i} />\n      ))}\n    </SliderTrack>\n  )\n}\n\ninterface SliderTrackProps extends SliderTrackPrimitiveProps, VariantProps<typeof sliderStyles> {}\n\nconst SliderTrack = (props: SliderTrackProps) => {\n  return (\n    <SliderTrackPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className) => track({ className }))}\n    />\n  )\n}\n\ninterface SliderFillerProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst SliderFiller = (props: SliderFillerProps) => {\n  const { orientation, getThumbPercent, values } = React.useContext(SliderStateContextPrimitive)\n  return (\n    <div\n      {...props}\n      style={\n        values.length === 1\n          ? orientation === 'horizontal'\n            ? { width: `${getThumbPercent(0) * 100}%` }\n            : { height: `${getThumbPercent(0) * 100}%` }\n          : orientation === 'horizontal'\n            ? {\n                left: `${getThumbPercent(0) * 100}%`,\n                width: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`\n              }\n            : {\n                bottom: `${getThumbPercent(0) * 100}%`,\n                height: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`\n              }\n      }\n      className={filler({ className: props.className })}\n    />\n  )\n}\n\ninterface SliderThumbProps extends SliderThumbPrimitiveProps, VariantProps<typeof sliderStyles> {}\n\nconst SliderThumb = ({ className, ...props }: SliderThumbProps) => {\n  return (\n    <SliderThumbPrimitive\n      {...props}\n      className={composeRenderProps(className, (className) => thumb({ className }))}\n    />\n  )\n}\n\ninterface SliderValueLabelProps extends SliderOutputPrimitiveProps {}\n\nconst SliderValueLabel = ({ className, ...props }: SliderValueLabelProps) => {\n  return (\n    <SliderOutputPrimitive\n      {...props}\n      className={composeRenderProps(className, (className) => valueLabel({ className }))}\n    >\n      {composeRenderProps(\n        props.children,\n        (children, { state }) =>\n          children ?? state.values.map((_, i) => state.getThumbValueLabel(i)).join(' - ')\n      )}\n    </SliderOutputPrimitive>\n  )\n}\n\nexport {\n  Slider,\n  SliderControls,\n  SliderFiller,\n  SliderRoot,\n  SliderThumb,\n  SliderTrack,\n  SliderValueLabel\n}\n",
    "type": "ui"
  },
  "popover": {
    "component": "@/components/ui/popover",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport type { ModalOverlayProps } from 'react-aria-components'\nimport {\n  Button,\n  composeRenderProps,\n  type DialogProps,\n  DialogTrigger as DialogTriggerPrimitive,\n  Modal,\n  ModalOverlay,\n  OverlayArrow,\n  Popover as PopoverPrimitive,\n  PopoverContext,\n  type PopoverProps as PopoverPrimitiveProps,\n  useSlottedContext\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { Dialog } from './dialog'\nimport { cn, useMediaQuery } from './primitive'\n\nconst Popover = ({ children }: { children: React.ReactNode }) => {\n  return <DialogTriggerPrimitive>{children}</DialogTriggerPrimitive>\n}\n\nconst PopoverTitle = ({ className, ...props }: React.ComponentProps<typeof Dialog.Title>) => (\n  <Dialog.Title className={cn('leading-none', className)} {...props} />\n)\n\nconst PopoverHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <Dialog.Header className={cn('p-0 sm:pt-0', className)} {...props} />\n)\n\nconst PopoverFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <Dialog.Footer className={cn('pt-4 pb-0 sm:pb-0', className)} {...props} />\n)\n\nconst PopoverBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <Dialog.Body className={cn('p-0', className)} {...props} />\n)\n\nconst popoverContentStyles = tv({\n  base: [\n    'max-w-xs min-w-80 p-4 rounded-xl border bg-overlay bg-clip-padding text-overlay-fg shadow-lg dark:backdrop-blur-2xl dark:backdrop-saturate-200 lg:text-sm sm:max-w-3xl forced-colors:bg-[Canvas]'\n  ],\n  variants: {\n    isMenu: {\n      true: {\n        true: 'p-0'\n      }\n    },\n    isEntering: {\n      true: [\n        'duration-50 ease-out animate-in fade-in placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1'\n      ]\n    },\n    isExiting: {\n      true: 'duration-50 ease-in animate-out fade-out placement-left:slide-out-to-right-1 placement-right:slide-out-to-left-1 placement-top:slide-out-to-bottom-1 placement-bottom:slide-out-to-top-1'\n    }\n  }\n})\n\nconst drawerStyles = tv({\n  base: [\n    'fixed max-h-full bottom-0 top-auto z-50 w-full bg-overlay max-w-2xl border border-b-transparent outline-none'\n  ],\n  variants: {\n    isMenu: {\n      true: 'p-0 [&_[role=dialog]]:px-0 rounded-t-xl',\n      false: 'p-4 rounded-t-2xl'\n    },\n    isEntering: {\n      true: [\n        '[will-change:transform] [transition:transform_0.5s_cubic-bezier(0.32,_0.72,_0,_1)]',\n        'animate-in duration-200 fade-in-0 slide-in-from-bottom-56',\n        '[transition:translate3d(0,_100%,_0)]',\n        'sm:slide-in-from-bottom-auto sm:slide-in-from-top-[20%]'\n      ]\n    },\n    isExiting: {\n      true: 'duration-200 ease-in animate-out slide-out-to-bottom-56'\n    }\n  }\n})\n\ninterface PopoverProps\n  extends Omit<React.ComponentProps<typeof Modal>, 'children'>,\n    Omit<PopoverPrimitiveProps, 'children' | 'className'>,\n    ModalOverlayProps {\n  children: React.ReactNode\n  className?: string | ((values: any & { defaultClassName?: string }) => string)\n  showArrow?: boolean\n  style?: React.CSSProperties\n  respectScreen?: boolean\n  'aria-label'?: DialogProps['aria-label']\n  'aria-labelledby'?: DialogProps['aria-labelledby']\n}\n\nconst PopoverContent = ({\n  respectScreen = true,\n  children,\n  showArrow = true,\n  className,\n  ...props\n}: PopoverProps) => {\n  const isMobile = useMediaQuery('(max-width: 600px)')\n  const popoverContext = useSlottedContext(PopoverContext)!\n  const isMenuTrigger = popoverContext?.trigger === 'MenuTrigger'\n  const isSubmenuTrigger = popoverContext?.trigger === 'SubmenuTrigger'\n  const isMenu = isMenuTrigger || isSubmenuTrigger\n  let offset = showArrow ? 12 : 8\n  offset = isSubmenuTrigger ? offset - 6 : offset\n  return isMobile && respectScreen ? (\n    <ModalOverlay\n      className={twJoin(\n        'fixed left-0 top-0 bg-overlay/10 isolate z-50 h-[--visual-viewport-height] w-full [--visual-viewport-vertical-padding:16px]',\n        isSubmenuTrigger ? 'bg-overlay/10' : ''\n      )}\n      {...props}\n      isDismissable\n    >\n      <Modal\n        className={composeRenderProps(className, (className, renderProps) =>\n          drawerStyles({ ...renderProps, isMenu, className })\n        )}\n      >\n        <Dialog\n          aria-label={isMenu ? 'Menu' : props['aria-label']}\n          className=\"focus:outline-none touch-none\"\n        >\n          {children}\n        </Dialog>\n      </Modal>\n    </ModalOverlay>\n  ) : (\n    <PopoverPrimitive\n      offset={offset}\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        popoverContentStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      {showArrow && (\n        <OverlayArrow className=\"group\">\n          <svg\n            width={12}\n            height={12}\n            viewBox=\"0 0 12 12\"\n            className=\"block fill-overlay stroke-border group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]\"\n          >\n            <path d=\"M0 0 L6 6 L12 0\" />\n          </svg>\n        </OverlayArrow>\n      )}\n      {children}\n    </PopoverPrimitive>\n  )\n}\n\nconst PopoverPicker = ({ children, className, ...props }: PopoverProps) => {\n  return (\n    <PopoverPrimitive\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        popoverContentStyles({\n          ...renderProps,\n          className: cn('max-h-72 overflow-y-auto min-w-[--trigger-width] p-0', className)\n        })\n      )}\n    >\n      {children}\n    </PopoverPrimitive>\n  )\n}\n\nPopover.Primitive = PopoverPrimitive\nPopover.Trigger = Button\nPopover.Close = Dialog.Close\nPopover.Content = PopoverContent\nPopover.Description = Dialog.Description\nPopover.Body = PopoverBody\nPopover.Footer = PopoverFooter\nPopover.Header = PopoverHeader\nPopover.Picker = PopoverPicker\nPopover.Title = PopoverTitle\n\nexport { Popover, drawerStyles, popoverContentStyles }\n",
    "type": "ui"
  },
  "text-field": {
    "component": "@/components/ui/text-field",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconLoader } from 'justd-icons'\nimport {\n  TextField as TextFieldPrimitive,\n  type TextFieldProps as TextFieldPrimitiveProps\n} from 'react-aria-components'\n\nimport type { FieldProps } from './field'\nimport { Description, FieldError, FieldGroup, fieldGroupPrefixStyles, Input, Label } from './field'\nimport { ctr } from './primitive'\n\ninterface TextFieldProps extends TextFieldPrimitiveProps, FieldProps {\n  prefix?: React.ReactNode\n  suffix?: React.ReactNode\n  isLoading?: boolean\n  indicatorPlace?: 'prefix' | 'suffix'\n}\n\nconst TextField = ({\n  placeholder,\n  label,\n  description,\n  errorMessage,\n  prefix,\n  suffix,\n  isLoading,\n  indicatorPlace,\n  ...props\n}: TextFieldProps) => {\n  return (\n    <TextFieldPrimitive {...props} className={ctr(props.className, 'group flex flex-col gap-1')}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup\n        data-loading={isLoading ? 'true' : undefined}\n        className={fieldGroupPrefixStyles()}\n      >\n        {isLoading && indicatorPlace === 'prefix' ? (\n          <IconLoader className=\"animate-spin isPfx\" />\n        ) : prefix ? (\n          <span className=\"atrs isPfx x2e2\">{prefix}</span>\n        ) : null}\n        <Input className=\"px-2.5\" placeholder={placeholder} />\n        {isLoading && indicatorPlace === 'suffix' ? (\n          <IconLoader className=\"animate-spin isSfx\" />\n        ) : suffix ? (\n          <span className=\"atrs isSfx x2e2\">{suffix}</span>\n        ) : null}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </TextFieldPrimitive>\n  )\n}\n\nexport { TextField, TextFieldPrimitive, type TextFieldProps }\n",
    "type": "ui"
  },
  "loader": {
    "component": "@/components/ui/loader",
    "raw": "import type { SVGProps } from 'react'\nimport React from 'react'\n\nimport { IconLoader } from 'justd-icons'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from './primitive'\n\nconst loaderStyles = tv({\n  base: 'relative',\n  variants: {\n    intent: {\n      current: 'text-current',\n      primary: 'text-primary',\n      secondary: 'text-muted-fg',\n      success: 'text-success',\n      warning: 'text-warning',\n      danger: 'text-danger'\n    },\n    size: {\n      small: 'size-4',\n      medium: 'size-6',\n      large: 'size-8',\n      'extra-large': 'size-10'\n    }\n  },\n  defaultVariants: {\n    intent: 'current',\n    size: 'small'\n  }\n})\n\ntype LoaderVariantProps = VariantProps<typeof loaderStyles>\n\nconst Bars = ({ className, ...props }: SVGProps<SVGSVGElement>) => (\n  <svg\n    className={cn('size-4', className)}\n    data-slot=\"icon\"\n    viewBox=\"0 0 135 140\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"currentColor\"\n    {...props}\n  >\n    <rect y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0.5s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0.5s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"30\" y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0.25s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0.25s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"60\" width=\"15\" height=\"140\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"90\" y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0.25s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0.25s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n    <rect x=\"120\" y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n      <animate\n        attributeName=\"height\"\n        begin=\"0.5s\"\n        dur=\"1s\"\n        values=\"120;110;100;90;80;70;60;50;40;140;120\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n      <animate\n        attributeName=\"y\"\n        begin=\"0.5s\"\n        dur=\"1s\"\n        values=\"10;15;20;25;30;35;40;45;50;0;10\"\n        calcMode=\"linear\"\n        repeatCount=\"indefinite\"\n      />\n    </rect>\n  </svg>\n)\nconst Ring = (props: SVGProps<SVGSVGElement>) => <IconLoader {...props} />\nconst Spin = ({ className, ...props }: SVGProps<SVGSVGElement>) => (\n  <svg className={cn('size-4', className)} data-slot=\"icon\" viewBox=\"0 0 2400 2400\" {...props}>\n    <g strokeWidth=\"200\" strokeLinecap=\"round\" fill=\"none\">\n      <line x1=\"1200\" y1=\"600\" x2=\"1200\" y2=\"100\" />\n      <line opacity=\"0.5\" x1=\"1200\" y1=\"2300\" x2=\"1200\" y2=\"1800\" />\n      <line opacity=\"0.917\" x1=\"900\" y1=\"680.4\" x2=\"650\" y2=\"247.4\" />\n      <line opacity=\"0.417\" x1=\"1750\" y1=\"2152.6\" x2=\"1500\" y2=\"1719.6\" />\n      <line opacity=\"0.833\" x1=\"680.4\" y1=\"900\" x2=\"247.4\" y2=\"650\" />\n      <line opacity=\"0.333\" x1=\"2152.6\" y1=\"1750\" x2=\"1719.6\" y2=\"1500\" />\n      <line opacity=\"0.75\" x1=\"600\" y1=\"1200\" x2=\"100\" y2=\"1200\" />\n      <line opacity=\"0.25\" x1=\"2300\" y1=\"1200\" x2=\"1800\" y2=\"1200\" />\n      <line opacity=\"0.667\" x1=\"680.4\" y1=\"1500\" x2=\"247.4\" y2=\"1750\" />\n      <line opacity=\"0.167\" x1=\"2152.6\" y1=\"650\" x2=\"1719.6\" y2=\"900\" />\n      <line opacity=\"0.583\" x1=\"900\" y1=\"1719.6\" x2=\"650\" y2=\"2152.6\" />\n      <line opacity=\"0.083\" x1=\"1750\" y1=\"247.4\" x2=\"1500\" y2=\"680.4\" />\n      <animateTransform\n        attributeName=\"transform\"\n        attributeType=\"XML\"\n        type=\"rotate\"\n        keyTimes=\"0;0.08333;0.16667;0.25;0.33333;0.41667;0.5;0.58333;0.66667;0.75;0.83333;0.91667\"\n        values=\"0 1199 1199;30 1199 1199;60 1199 1199;90 1199 1199;120 1199 1199;150 1199 1199;180 1199 1199;210 1199 1199;240 1199 1199;270 1199 1199;300 1199 1199;330 1199 1199\"\n        dur=\"0.83333s\"\n        begin=\"0.08333s\"\n        repeatCount=\"indefinite\"\n        calcMode=\"discrete\"\n      />\n    </g>\n  </svg>\n)\n\nconst LOADERS = {\n  bars: Bars,\n  ring: Ring,\n  spin: Spin\n}\n\nconst DEFAULT_SPINNER = 'ring'\n\nexport interface LoaderProps\n  extends Omit<React.ComponentPropsWithoutRef<'svg'>, 'display' | 'opacity' | 'intent'>,\n    LoaderVariantProps {\n  variant?: keyof typeof LOADERS\n}\n\nconst Loader = (props: LoaderProps, ref: React.ForwardedRef<SVGSVGElement>) => {\n  const { className, variant = DEFAULT_SPINNER, intent, size, ...spinnerProps } = props\n  const LoaderPrimitive = LOADERS[variant in LOADERS ? variant : DEFAULT_SPINNER]\n\n  return (\n    <LoaderPrimitive\n      role=\"presentation\"\n      className={loaderStyles({\n        intent,\n        size,\n        className: ['ring'].includes(variant)\n          ? 'animate-spin'\n          : variant === 'spin'\n            ? 'stroke-current'\n            : className\n      })}\n      ref={ref}\n      {...spinnerProps}\n    />\n  )\n}\n\nexport { Loader }\n",
    "type": "ui"
  },
  "radio": {
    "component": "@/components/ui/radio",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  Radio as RadioPrimitive,\n  RadioGroup as RadioGroupPrimitive,\n  type RadioGroupProps as RACRadioGroupProps,\n  type RadioProps as RadioPrimitiveProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\nimport { ctr } from './primitive'\n\ninterface RadioGroupProps extends Omit<RACRadioGroupProps, 'children'> {\n  label?: string\n  children?: React.ReactNode\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst RadioGroup = ({ label, description, errorMessage, children, ...props }: RadioGroupProps) => {\n  return (\n    <RadioGroupPrimitive {...props} className={ctr(props.className, 'group flex flex-col gap-2')}>\n      {label && <Label>{label}</Label>}\n      <div className=\"flex select-none gap-2 group-orientation-horizontal:flex-wrap group-orientation-horizontal:gap-2 sm:group-orientation-horizontal:gap-4 group-orientation-vertical:flex-col\">\n        {children}\n      </div>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </RadioGroupPrimitive>\n  )\n}\n\nconst radioStyles = tv({\n  base: 'size-4 shrink-0 rounded-full border bg-secondary transition',\n  variants: {\n    isSelected: {\n      false: 'border-toggle',\n      true: 'border-[4.5px] border-primary'\n    },\n    isFocused: {\n      true: [\n        'border-primary bg-primary/20 ring-4 ring-primary/20',\n        'group-invalid:border-danger/70 group-invalid:bg-danger/20 group-invalid:ring-danger/20'\n      ]\n    },\n    isInvalid: {\n      true: 'border-danger/70 bg-danger/20'\n    },\n    isDisabled: {\n      true: 'opacity-50'\n    }\n  }\n})\n\ninterface RadioProps extends RadioPrimitiveProps {\n  description?: string\n}\n\nconst Radio = ({ description, ...props }: RadioProps) => {\n  return (\n    <>\n      <RadioPrimitive\n        {...props}\n        className={ctr(\n          props.className,\n          'group flex items-center gap-2 text-sm text-fg transition disabled:text-fg/50 forced-colors:disabled:text-[GrayText]'\n        )}\n      >\n        {(renderProps) => (\n          <div className=\"flex gap-2\">\n            <div\n              className={radioStyles({\n                ...renderProps,\n                className: 'description' in props ? 'mt-1' : 'mt-0.5'\n              })}\n            />\n            <div className=\"flex flex-col gap-1\">\n              <>{props.children}</>\n              {description && <Description className=\"block\">{description}</Description>}\n            </div>\n          </div>\n        )}\n      </RadioPrimitive>\n    </>\n  )\n}\n\nexport { Radio, RadioGroup, radioStyles }\n",
    "type": "ui"
  },
  "date-field": {
    "component": "@/components/ui/date-field",
    "raw": "'use client'\n\nimport {\n  composeRenderProps,\n  DateField as DateFieldPrimitive,\n  type DateFieldProps as DateFieldPrimitiveProps,\n  DateInput as DateInputPrimitive,\n  type DateInputProps,\n  DateSegment,\n  type DateValue,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, fieldGroupStyles, Label } from './field'\nimport { cn, ctr } from './primitive'\n\ninterface DateFieldProps<T extends DateValue> extends DateFieldPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst DateField = <T extends DateValue>({\n  label,\n  description,\n  errorMessage,\n  ...props\n}: DateFieldProps<T>) => {\n  return (\n    <DateFieldPrimitive {...props} className={ctr(props.className, 'flex flex-col gap-1')}>\n      {label && <Label>{label}</Label>}\n      <DateInput />\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </DateFieldPrimitive>\n  )\n}\n\nconst segmentStyles = tv({\n  base: 'inline shrink-0 rounded p-0.5 tracking-wider text-fg caret-transparent outline outline-0 forced-color-adjust-none type-literal:px-0 lg:text-sm forced-colors:text-[ButtonText]',\n  variants: {\n    isPlaceholder: {\n      true: 'text-muted-fg'\n    },\n    isDisabled: {\n      true: 'text-fg/50 forced-colors:text-[GrayText]'\n    },\n    isFocused: {\n      true: [\n        'bg-primary text-primary-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]',\n        'invalid:bg-danger invalid:text-danger-fg'\n      ]\n    }\n  }\n})\n\nconst DateInput = (props: Omit<DateInputProps, 'children'>) => {\n  return (\n    <DateInputPrimitive\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        fieldGroupStyles({\n          ...renderProps,\n          className: cn(\n            'min-w-sm block font-mono disabled:bg-secondary uppercase w-full py-2 px-2.5 text-base lg:text-sm/[1.4rem]',\n            className\n          )\n        })\n      )}\n      {...props}\n    >\n      {(segment) => <DateSegment segment={segment} className={segmentStyles} />}\n    </DateInputPrimitive>\n  )\n}\n\nexport { DateField, DateInput, segmentStyles, type DateFieldProps }\n",
    "type": "ui"
  },
  "primitive": {
    "component": "@/components/ui/primitive",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { type ClassValue, clsx } from 'clsx'\nimport { composeRenderProps } from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nconst cn = (...inputs: ClassValue[]) => twMerge(clsx(inputs))\n\nconst composeTailwindRenderProps = <T,>(\n  className: string | ((v: T) => string) | undefined,\n  tw: string\n): string | ((v: T) => string) => {\n  return composeRenderProps(className, (className) => twMerge(tw, className))\n}\n\nconst focusRing = tv({\n  base: 'outline-none focus:outline-none forced-colors:outline-[Highlight]',\n  variants: {\n    isFocused: { true: 'ring-4 ring-primary/20' },\n    isInvalid: { true: 'ring-4 ring-danger/20' }\n  }\n})\n\nconst isServerSide = (): boolean => {\n  if (typeof window !== 'undefined') {\n    return false\n  }\n  if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n    return true\n  }\n  return true\n}\n\nconst isIos = (userAgent?: string): boolean => {\n  if (isServerSide() && !userAgent) return false\n  const result = userAgent || navigator.userAgent\n  return /iPad|iPhone|iPod|iPadOS|iPhoneOS/.test(result)\n}\n\nconst focusStyles = tv({\n  extend: focusRing,\n  variants: {\n    isFocused: { true: 'border-primary' },\n    isInvalid: { true: 'border-danger' }\n  }\n})\n\nconst focusButtonStyles = tv({\n  base: 'outline outline-primary forced-colors:outline-[Highlight] outline-offset-2',\n  variants: {\n    isFocusVisible: {\n      false: 'outline-0',\n      true: 'outline-2'\n    }\n  }\n})\n\nconst useMediaQuery = (query: string) => {\n  const [value, setValue] = React.useState(false)\n\n  React.useEffect(() => {\n    const onChange = (event: MediaQueryListEvent) => {\n      setValue(event.matches)\n    }\n\n    const result = matchMedia(query)\n    result.addEventListener('change', onChange)\n    setValue(result.matches)\n\n    return () => result.removeEventListener('change', onChange)\n  }, [query])\n\n  return value\n}\n\nconst ctr = composeTailwindRenderProps\nconst tm = twMerge\nconst cr = composeRenderProps\n\nexport {\n  cn,\n  composeTailwindRenderProps,\n  cr,\n  ctr,\n  focusRing,\n  focusStyles,\n  focusButtonStyles,\n  tm,\n  twMerge,\n  useMediaQuery,\n  isIos\n}\n",
    "type": "ui"
  },
  "visually-hidden": {
    "component": "@/components/ui/visually-hidden",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { useVisuallyHidden } from 'react-aria'\n\ntype VisuallyHiddenSpanProps = {\n  children: React.ReactNode\n}\n\nconst VisuallyHidden = ({ children }: VisuallyHiddenSpanProps) => {\n  const { visuallyHiddenProps } = useVisuallyHidden()\n\n  return <span {...visuallyHiddenProps}>{children}</span>\n}\n\nexport { VisuallyHidden }\n",
    "type": "ui"
  },
  "date-picker": {
    "component": "@/components/ui/date-picker",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconCalendarDays } from 'justd-icons'\nimport {\n  DatePicker as DatePickerPrimitive,\n  type DatePickerProps as DatePickerPrimitiveProps,\n  type DateValue,\n  type DialogProps,\n  type PopoverProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport { Calendar } from './calendar'\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, Label } from './field'\nimport { Popover } from './popover'\nimport { ctr } from './primitive'\nimport { RangeCalendar } from './range-calendar'\n\nconst datePickerStyles = tv({\n  slots: {\n    base: 'group flex flex-col gap-1',\n    datePickerIcon:\n      'group mr-1 h-7 dark:[&>[data-slot=icon]]:text-zinc-400 [&>[data-slot=icon]]:text-zinc-800 w-8 rounded outline-offset-0 hover:bg-transparent pressed:bg-transparent',\n    calendarIcon: 'size-4 text-muted-fg group-open:text-fg',\n    datePickerInput: 'w-full px-2 uppercase text-base lg:text-sm',\n    dateRangePickerInputStart: 'px-2 lg:text-sm uppercase text-base',\n    dateRangePickerInputEnd: 'flex-1 px-2 py-1.5 lg:text-sm uppercase text-base',\n    dateRangePickerDash:\n      'text-zinc-800 group-disabled:text-zinc-200 dark:text-zinc-200 group-disabled:dark:text-zinc-600 forced-colors:text-[ButtonText] group-disabled:forced-colors:text-[GrayText]'\n  }\n})\n\nconst { base, datePickerIcon, calendarIcon, datePickerInput } = datePickerStyles()\n\ninterface DatePickerOverlayProps\n  extends Omit<DialogProps, 'children' | 'className' | 'style'>,\n    Omit<PopoverProps, 'children' | 'className' | 'style'> {\n  className?: string | DialogProps['className'] | PopoverProps['className']\n  children?: React.ReactNode\n  closeButton?: boolean\n  range?: boolean\n}\n\nconst DatePickerOverlay = ({ closeButton = true, range, ...props }: DatePickerOverlayProps) => {\n  return (\n    <Popover.Content\n      showArrow={false}\n      className=\"flex justify-center p-4 sm:p-2 sm:pt-3 sm:max-w-[17.2rem] sm:min-w-[17rem]\"\n      {...props}\n    >\n      {range ? <RangeCalendar /> : <Calendar />}\n      {closeButton && (\n        <div className=\"sm:hidden py-2.5 flex justify-center mx-auto w-full max-w-[inherit]\">\n          <Popover.Close shape=\"circle\" className=\"w-full\">\n            Close\n          </Popover.Close>\n        </div>\n      )}\n    </Popover.Content>\n  )\n}\n\nconst DatePickerIcon = () => (\n  <Button size=\"square-petite\" appearance=\"plain\" className={datePickerIcon()}>\n    <IconCalendarDays aria-hidden className={calendarIcon()} />\n  </Button>\n)\n\ninterface DatePickerProps<T extends DateValue> extends DatePickerPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst DatePicker = <T extends DateValue>({\n  label,\n  className,\n  description,\n  children,\n  errorMessage,\n  ...props\n}: DatePickerProps<T>) => {\n  return (\n    <DatePickerPrimitive {...props} className={ctr(className, base())}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup className=\"min-w-40\">\n        <DateInput className={datePickerInput()} />\n        <DatePickerIcon />\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n      <DatePickerOverlay />\n    </DatePickerPrimitive>\n  )\n}\n\nexport {\n  DatePicker,\n  DatePickerIcon,\n  DatePickerOverlay,\n  type DatePickerProps,\n  type DateValue,\n  type ValidationResult\n}\n",
    "type": "ui"
  },
  "container": {
    "component": "@/components/ui/container",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { cn } from './primitive'\n\nconst Container = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div className={cn('mx-auto max-w-7xl px-4 sm:px-6 lg:px-8', className)} {...props} ref={ref} />\n  )\n)\nContainer.displayName = 'Container'\n\nexport { Container }\n",
    "type": "ui"
  },
  "input-otp": {
    "component": "@/components/ui/input-otp",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { OTPInput, OTPInputContext } from 'input-otp'\nimport { IconBulletFill } from 'justd-icons'\n\nimport { cn } from './primitive'\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    data-1p-ignore\n    ref={ref}\n    containerClassName={cn(\n      'flex items-center gap-2 has-[:disabled]:opacity-50',\n      containerClassName\n    )}\n    className={cn('disabled:cursor-not-allowed', className)}\n    {...props}\n  />\n))\nInputOTP.displayName = 'InputOTP'\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<'div'>,\n  React.ComponentPropsWithoutRef<'div'>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn('flex items-center gap-x-1.5', className)} {...props} />\n))\nInputOTPGroup.displayName = 'InputOTPGroup'\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<'div'>,\n  React.ComponentPropsWithoutRef<'div'> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'relative flex size-10 items-center justify-center rounded-md border border-input text-sm transition-all',\n        isActive && 'z-10 border-primary/70 ring-4 ring-primary/20',\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-fg duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = 'InputOTPSlot'\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<'div'>,\n  React.ComponentPropsWithoutRef<'div'>\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <IconBulletFill className=\"size-2\" />\n  </div>\n))\nInputOTPSeparator.displayName = 'InputOTPSeparator'\n\nexport { InputOTP, InputOTPGroup, InputOTPSeparator, InputOTPSlot }\n",
    "type": "ui"
  },
  "tag-group": {
    "component": "@/components/ui/tag-group",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type {\n  TagGroupProps as TagGroupPrimitiveProps,\n  TagListProps,\n  TagProps as TagPrimitiveProps\n} from 'react-aria-components'\nimport {\n  Button,\n  composeRenderProps,\n  Tag as TagPrimitive,\n  TagGroup as TagGroupPrimitive,\n  TagList as TagListPrimitive\n} from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { badgeIntents, badgeShapes, badgeStyles } from './badge'\nimport { Description, Label } from './field'\nimport { cn, ctr, focusStyles } from './primitive'\n\nconst intents = {\n  primary: {\n    base: [\n      badgeIntents.primary,\n      '[&_[slot=remove]:hover]:bg-primary [&_[slot=remove]:hover]:text-primary-fg'\n    ],\n    selected: [\n      'bg-primary dark:hover:bg-primary dark:bg-primary hover:bg-primary ring-primary ring-inset text-primary-fg dark:text-primary-fg hover:text-primary-fg',\n      '[&_[slot=remove]:hover]:bg-primary-fg/80 [&_[slot=remove]:hover]:text-primary'\n    ]\n  },\n  secondary: {\n    base: [\n      badgeIntents.secondary,\n      '[&_[slot=remove]:hover]:bg-fg [&_[slot=remove]:hover]:text-background'\n    ],\n    selected: [\n      'bg-fg ring-fg/50 text-background dark:bg-fg/90 dark:text-secondary ring-inset',\n      '[&_[slot=remove]:hover]:bg-background [&_[slot=remove]:hover]:text-secondary-fg'\n    ]\n  },\n  success: {\n    base: [\n      badgeIntents.success,\n      '[&_[slot=remove]:hover]:bg-success [&_[slot=remove]:hover]:text-success-fg'\n    ],\n    selected: [\n      'bg-success dark:bg-success ring-success ring-inset dark:text-success-fg dark:hover:bg-success hover:bg-success text-success-fg hover:text-success-fg',\n      '[&_[slot=remove]:hover]:bg-success-fg/80 [&_[slot=remove]:hover]:text-success'\n    ]\n  },\n  warning: {\n    base: [\n      badgeIntents.warning,\n      '[&_[slot=remove]:hover]:bg-warning [&_[slot=remove]:hover]:text-warning-fg'\n    ],\n    selected: [\n      'bg-warning dark:hover:bg-warning dark:bg-warning dark:text-background hover:bg-warning text-warning-fg hover:text-warning-fg',\n      '[&_[slot=remove]:hover]:bg-warning-fg/80 [&_[slot=remove]:hover]:text-warning'\n    ]\n  },\n  danger: {\n    base: [\n      badgeIntents.danger,\n      '[&_[slot=remove]:hover]:bg-danger [&_[slot=remove]:hover]:text-danger-fg'\n    ],\n    selected: [\n      'bg-danger dark:bg-danger dark:hover:bg-danger/90 hover:bg-danger text-danger-fg ring-danger hover:text-danger-fg',\n      '[&_[slot=remove]:hover]:bg-danger-fg/80 [&_[slot=remove]:hover]:text-danger'\n    ]\n  }\n}\n\ntype RestrictedIntent = 'primary' | 'secondary'\n\ntype Intent = 'primary' | 'secondary' | 'success' | 'warning' | 'danger'\n\ntype Shape = keyof typeof badgeShapes\n\ntype TagGroupContextValue = {\n  intent: Intent\n  shape: Shape\n}\n\nconst TagGroupContext = React.createContext<TagGroupContextValue>({\n  intent: 'primary',\n  shape: 'square'\n})\n\nexport interface TagGroupProps extends TagGroupPrimitiveProps {\n  intent?: Intent\n  shape?: 'square' | 'circle'\n  errorMessage?: string\n  label?: string\n  description?: string\n}\n\nconst TagGroup = ({ children, ...props }: TagGroupProps) => {\n  return (\n    <TagGroupPrimitive\n      {...props}\n      className={twMerge('flex flex-wrap flex-col gap-1', props.className)}\n    >\n      <TagGroupContext.Provider\n        value={{\n          intent: props.intent || 'primary',\n          shape: props.shape || 'square'\n        }}\n      >\n        {props.label && <Label>{props.label}</Label>}\n        {children}\n        {props.description && <Description>{props.description}</Description>}\n      </TagGroupContext.Provider>\n    </TagGroupPrimitive>\n  )\n}\n\nconst TagList = <T extends object>({ className, ...props }: TagListProps<T>) => {\n  return <TagListPrimitive {...props} className={ctr(className, 'flex flex-wrap gap-2')} />\n}\n\nconst tagStyles = tv({\n  extend: focusStyles,\n  base: [badgeStyles.base, 'cursor-pointer jdt3lr2x'],\n  variants: {\n    isFocused: { true: 'ring-1' },\n    isDisabled: { true: 'opacity-50 cursor-default' },\n    allowsRemoving: { true: 'pr-1' }\n  }\n})\n\ninterface TagProps extends TagPrimitiveProps {\n  intent?: Intent\n  shape?: Shape\n}\n\nconst TagItem = ({ children, className, intent, shape, ...props }: TagProps) => {\n  const textValue = typeof children === 'string' ? children : undefined\n  const groupContext = React.useContext(TagGroupContext)\n\n  return (\n    <TagPrimitive\n      textValue={textValue}\n      {...props}\n      className={composeRenderProps(className, (_, renderProps) => {\n        const finalIntent = intent || groupContext.intent\n        const finalShape = shape || groupContext.shape\n\n        return tagStyles({\n          ...renderProps,\n          className: cn([\n            intents[finalIntent]?.base,\n            badgeShapes[finalShape],\n            renderProps.isSelected ? intents[finalIntent].selected : undefined\n          ])\n        })\n      })}\n    >\n      {({ allowsRemoving }) => {\n        return (\n          <>\n            {children}\n            {allowsRemoving && (\n              <Button\n                slot=\"remove\"\n                className={composeRenderProps('', (className) => {\n                  return twMerge(\n                    'rounded focus:outline-none size-3.5 grid place-content-center -mr-0.5 focus-visible:ring-1 focus-visible:ring-primary',\n                    className\n                  )\n                })}\n              >\n                <span className=\"rotate-45 text-base/4 -mr-px\">+</span>\n              </Button>\n            )}\n          </>\n        )\n      }}\n    </TagPrimitive>\n  )\n}\n\nconst Tag = {\n  Group: TagGroup,\n  Item: TagItem,\n  List: TagList\n}\n\nexport { Tag, type RestrictedIntent }\n",
    "type": "ui"
  },
  "sheet": {
    "component": "@/components/ui/sheet",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport type { DialogTriggerProps, Modal } from 'react-aria-components'\nimport {\n  Button,\n  composeRenderProps,\n  type DialogProps,\n  DialogTrigger as DialogTriggerPrimitive,\n  Modal as ModalPrimitive,\n  ModalOverlay,\n  type ModalOverlayProps as ModalOverlayPrimitiveProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { Dialog } from './dialog'\n\nconst sheetOverlayStyles = tv({\n  base: [\n    'fixed top-0 left-0 w-full h-[--visual-viewport-height] isolate z-50 flex items-center justify-center p-4'\n  ],\n  variants: {\n    isBlurred: {\n      true: 'backdrop-blur',\n      false: 'bg-black/25 dark:bg-black/60'\n    },\n    isEntering: {\n      true: 'animate-in fade-in duration-200 ease-out'\n    },\n    isExiting: {\n      true: 'animate-out fade-out duration-200 ease-in'\n    }\n  }\n})\n\ntype Sides = 'top' | 'bottom' | 'left' | 'right'\nconst generateCompoundVariants = (sides: Array<Sides>) => {\n  return sides.map((side) => ({\n    side,\n    isStack: true,\n    className:\n      side === 'top'\n        ? 'top-2 inset-x-2 rounded-lg border'\n        : side === 'bottom'\n          ? 'bottom-2 inset-x-2 rounded-lg border'\n          : side === 'left'\n            ? 'left-2 inset-y-2 rounded-lg border'\n            : 'right-2 inset-y-2 rounded-lg border'\n  }))\n}\n\nconst sheetContentStyles = tv({\n  base: 'fixed z-50 grid gap-4 bg-overlay text-overlay-fg shadow-lg transition ease-in-out',\n  variants: {\n    isEntering: {\n      true: 'duration-300 animate-in '\n    },\n    isExiting: {\n      true: 'duration-200 animate-out'\n    },\n    side: {\n      top: 'inset-x-0 top-0 rounded-b-2xl border-b entering:slide-in-from-top exiting:slide-out-to-top',\n      bottom:\n        'inset-x-0 bottom-0 rounded-t-2xl border-t entering:slide-in-from-bottom exiting:slide-out-to-bottom',\n      left: 'inset-y-0 left-0 h-auto w-[19rem] sm:w-3/4 overflow-y-auto border-r entering:slide-in-from-left exiting:slide-out-to-left sm:max-w-xs',\n      right:\n        'inset-y-0 right-0 h-auto w-[19rem] sm:w-3/4 overflow-y-auto border-l entering:slide-in-from-right exiting:slide-out-to-right sm:max-w-xs'\n    },\n    isStack: {\n      true: '',\n      false: ''\n    }\n  },\n  compoundVariants: generateCompoundVariants(['top', 'bottom', 'left', 'right'])\n})\n\nconst Sheet = ({ children }: DialogTriggerProps) => {\n  return <DialogTriggerPrimitive>{children}</DialogTriggerPrimitive>\n}\n\ninterface SheetContentProps\n  extends Omit<React.ComponentProps<typeof Modal>, 'children' | 'className'>,\n    Omit<ModalOverlayPrimitiveProps, 'className'>,\n    VariantProps<typeof sheetOverlayStyles> {\n  'aria-label'?: DialogProps['aria-label']\n  'aria-labelledby'?: DialogProps['aria-labelledby']\n  role?: DialogProps['role']\n  closeButton?: boolean\n  isBlurred?: boolean\n  isStack?: boolean\n  side?: Sides\n  classNames?: {\n    overlay?: ModalOverlayPrimitiveProps['className']\n    content?: ModalOverlayPrimitiveProps['className']\n  }\n}\n\nconst SheetContent = ({\n  classNames,\n  isBlurred = false,\n  isDismissable = true,\n  side = 'right',\n  role = 'dialog',\n  closeButton = true,\n  isStack = true,\n  ...props\n}: SheetContentProps) => {\n  const _isDismissable = role === 'alertdialog' ? false : isDismissable\n  return (\n    <ModalOverlay\n      isDismissable={_isDismissable}\n      className={composeRenderProps(classNames?.overlay, (className, renderProps) => {\n        return sheetOverlayStyles({\n          ...renderProps,\n          isBlurred,\n          className\n        })\n      })}\n      {...props}\n    >\n      <ModalPrimitive\n        className={composeRenderProps(classNames?.content, (className, renderProps) =>\n          sheetContentStyles({\n            ...renderProps,\n            side,\n            isStack,\n            className\n          })\n        )}\n        {...props}\n      >\n        <Dialog role={role} className=\"h-full\">\n          {(values) => (\n            <>\n              {props.children}\n              {closeButton && (\n                <Dialog.CloseIndicator\n                  className=\"top-2.5 right-2.5\"\n                  close={values.close}\n                  isDismissable={_isDismissable}\n                />\n              )}\n            </>\n          )}\n        </Dialog>\n      </ModalPrimitive>\n    </ModalOverlay>\n  )\n}\n\nSheet.Trigger = Button\nSheet.Footer = Dialog.Footer\nSheet.Content = SheetContent\nSheet.Header = Dialog.Header\nSheet.Title = Dialog.Title\nSheet.Description = Dialog.Description\nSheet.Body = Dialog.Body\nSheet.Close = Dialog.Close\n\nexport { Sheet }\n",
    "type": "ui"
  },
  "field": {
    "component": "@/components/ui/field",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  composeRenderProps,\n  FieldError as FieldErrorPrimitive,\n  type FieldErrorProps,\n  Group,\n  type GroupProps,\n  Input as InputPrimitive,\n  type InputProps,\n  Label as LabelPrimitive,\n  type LabelProps,\n  Text,\n  type TextFieldProps as TextFieldPrimitiveProps,\n  type TextProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { ctr } from './primitive'\n\n// primitive styles\n\ninterface FieldProps {\n  label?: string\n  placeholder?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  'aria-label'?: TextFieldPrimitiveProps['aria-label']\n  'aria-labelledby'?: TextFieldPrimitiveProps['aria-labelledby']\n}\n\n// primitive styles\nconst fieldBorderStyles = tv({\n  base: 'group-focus-within:border-primary forced-colors:border-[Highlight]',\n  variants: {\n    isInvalid: {\n      true: 'border-danger/70 group-focus-within:border-danger/70 forced-colors:border-[Mark]'\n    }\n  }\n})\n\nconst fieldGroupPrefixStyles = tv({\n  base: [\n    'flex group-invalid:border-danger group-disabled:bg-secondary group-disabled:opacity-50 items-center group-invalid:focus-within:ring-danger/20',\n    '[&>.x2e2>.kbt32x]:size-7 [&>.x2e2>.kbt32x]:rounded-sm [&>.x2e2:has(.kbt32x)]:size-9 [&>.x2e2:has(.kbt32x)]:grid [&>.x2e2:has(.kbt32x)]:place-items-center',\n    '[&>.x2e2>.kbt32x]:before:rounded-[calc(theme(borderRadius.sm)-1px)] [&>.x2e2>.kbt32x]:after:rounded-[calc(theme(borderRadius.sm)-1px)] dark:[&>.x2e2>.kbt32x]:after:rounded-sm',\n    '[&>.isSfx:has(.kbt32x)]:-mr-2 [&>.isPfx:has(.kbt32x)]:-ml-2 [&>.isSfx>.kbt32x]:mr-0.5 [&>.isPfx>.kbt32x]:ml-0.5'\n  ]\n})\n\nconst fieldStyles = tv({\n  slots: {\n    description: 'text-pretty text-base/6 text-muted-fg sm:text-sm/6',\n    label: 'w-fit cursor-default font-medium text-secondary-fg text-sm',\n    fieldError: 'text-sm text-danger forced-colors:text-[Mark]',\n    input: [\n      'w-full min-w-0 bg-transparent p-2 text-base text-fg placeholder-muted-fg outline-none focus:outline-none lg:text-sm'\n    ]\n  }\n})\n\nconst { description, label, fieldError, input } = fieldStyles()\n\nconst Label = ({ className, ...props }: LabelProps) => {\n  return <LabelPrimitive {...props} className={label({ className })} />\n}\n\nconst Description = ({ className, ...props }: TextProps) => {\n  return <Text {...props} slot=\"description\" className={description({ className })} />\n}\n\nconst FieldError = ({ className, ...props }: FieldErrorProps) => {\n  return <FieldErrorPrimitive {...props} className={ctr(className, fieldError())} />\n}\n\nconst fieldGroupStyles = tv({\n  base: [\n    'group flex h-10 items-center overflow-hidden rounded-lg border border-input bg-background transition disabled:opacity-50 disabled:bg-secondary forced-colors:bg-[Field]',\n    'focus-within:border-primary focus-within:ring-4 focus-within:ring-primary/20',\n    'focus-within:invalid:border-danger focus-within:invalid:ring-4 focus-within:invalid:ring-danger/20',\n    'invalid:border-danger',\n    'has-[.isPfx]:pl-2.5 has-[.isSfx]:pr-2.5 [&_[data-slot=icon]]:size-4 has-[.atrs]:shrink-0 has-[.atrs]:text-muted-fg'\n  ]\n})\n\nconst FieldGroup = (props: GroupProps) => {\n  return (\n    <Group\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        fieldGroupStyles({ ...renderProps, className })\n      )}\n    />\n  )\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, ...props }, ref) => {\n  return <InputPrimitive ref={ref} {...props} className={ctr(className, input())} />\n})\nInput.displayName = 'Input'\n\nexport {\n  Description,\n  fieldBorderStyles,\n  FieldError,\n  FieldGroup,\n  fieldGroupPrefixStyles,\n  fieldGroupStyles,\n  Input,\n  InputPrimitive,\n  Label,\n  type FieldProps\n}\n",
    "type": "ui"
  },
  "drop-zone": {
    "component": "@/components/ui/drop-zone",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n  composeRenderProps,\n  DropZone as DropPrimitiveZone,\n  type DropZoneProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { focusStyles } from './primitive'\n\nconst dropZoneStyles = tv({\n  extend: focusStyles,\n  base: 'group has-[slot=description]:text-center flex max-h-[200px] p-6 max-w-xl flex-col items-center justify-center gap-2 rounded-md border border-dashed text-sm',\n  variants: {\n    isDropTarget: {\n      true: 'bg-primary/10 ring-4 ring-primary/20 [&_.text-muted-fg]:text-primary-fg border-solid border-primary'\n    }\n  }\n})\n\nconst DropZone = ({ className, ...props }: DropZoneProps) => (\n  <DropPrimitiveZone\n    className={composeRenderProps(className, (className, renderProps) =>\n      dropZoneStyles({ ...renderProps, className })\n    )}\n    {...props}\n  />\n)\nexport { DropZone }\n",
    "type": "ui"
  },
  "toolbar": {
    "component": "@/components/ui/toolbar",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport type {\n  GroupProps,\n  SeparatorProps,\n  ToolbarProps as ToolbarPrimitiveProps\n} from 'react-aria-components'\nimport { composeRenderProps, Group, Toolbar as ToolbarPrimitive } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from './primitive'\nimport { Separator } from './separator'\nimport type { ToggleProps } from './toggle'\nimport { Toggle, toggleStyles } from './toggle'\n\nconst toolbarStyles = tv({\n  base: 'flex gap-2 group',\n  variants: {\n    orientation: {\n      horizontal:\n        'flex-row [&::-webkit-scrollbar]:hidden [scrollbar-width:none] [-ms-overflow-style:none]',\n      vertical: 'flex-col items-start'\n    }\n  }\n})\n\nconst ToolbarSeparator = ({ className, ...props }: SeparatorProps) => {\n  const { orientation } = React.useContext(ToolbarContext)\n  const effectiveOrientation = orientation === 'vertical' ? 'horizontal' : 'vertical'\n  return (\n    <Separator\n      orientation={effectiveOrientation}\n      className={cn(effectiveOrientation === 'vertical' ? 'mx-1.5' : 'my-1.5 w-9', className)}\n      {...props}\n    />\n  )\n}\n\nconst ToolbarContext = React.createContext<{ orientation?: ToolbarProps['orientation'] }>({\n  orientation: 'horizontal'\n})\n\ninterface ToolbarProps extends ToolbarPrimitiveProps {}\n\nconst Toolbar = ({ orientation = 'horizontal', ...props }: ToolbarProps) => {\n  return (\n    <ToolbarContext.Provider value={{ orientation }}>\n      <ToolbarPrimitive\n        orientation={orientation}\n        {...props}\n        className={composeRenderProps(props.className, (className, renderProps) =>\n          toolbarStyles({ ...renderProps, className })\n        )}\n      />\n    </ToolbarContext.Provider>\n  )\n}\n\nconst toolbarGroupStyles = tv({\n  base: ['flex gap-2', 'group-orientation-vertical:flex-col group-orientation-vertical:items-start']\n})\n\nconst ToolbarGroupContext = React.createContext<{ isDisabled?: boolean }>({})\n\nconst ToolbarGroup = ({ isDisabled, ...props }: GroupProps) => {\n  return (\n    <ToolbarGroupContext.Provider value={{ isDisabled }}>\n      <Group className={toolbarGroupStyles()} {...props}>\n        {props.children}\n      </Group>\n    </ToolbarGroupContext.Provider>\n  )\n}\n\nconst ToolbarItem = ({ isDisabled, ...props }: ToggleProps) => {\n  const context = React.useContext(ToolbarGroupContext)\n  const effectiveIsDisabled = isDisabled || context.isDisabled\n\n  return (\n    <Toggle\n      isDisabled={effectiveIsDisabled}\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        toggleStyles({\n          ...renderProps,\n          appearance: props.appearance,\n          size: props.size,\n          shape: props.shape,\n          className\n        })\n      )}\n    />\n  )\n}\n\nToolbar.Group = ToolbarGroup\nToolbar.Separator = ToolbarSeparator\nToolbar.Item = ToolbarItem\n\nexport { Toolbar }\n",
    "type": "ui"
  },
  "grid": {
    "component": "@/components/ui/grid",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Collection } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn } from './primitive'\n\nconst gridStyles = tv(\n  {\n    base: 'grid',\n    variants: {\n      // Columns\n      columns: {\n        1: 'grid-cols-1',\n        2: 'grid-cols-2',\n        3: 'grid-cols-3',\n        4: 'grid-cols-4',\n        5: 'grid-cols-5',\n        6: 'grid-cols-6',\n        7: 'grid-cols-7',\n        8: 'grid-cols-8',\n        9: 'grid-cols-9',\n        10: 'grid-cols-10',\n        11: 'grid-cols-11',\n        12: 'grid-cols-12'\n      },\n\n      // Rows\n      rows: {\n        1: 'grid-rows-1',\n        2: 'grid-rows-2',\n        3: 'grid-rows-3',\n        4: 'grid-rows-4',\n        5: 'grid-rows-5',\n        6: 'grid-rows-6',\n        7: 'grid-rows-7',\n        8: 'grid-rows-8',\n        9: 'grid-rows-9',\n        10: 'grid-rows-10',\n        11: 'grid-rows-11',\n        12: 'grid-rows-12'\n      },\n\n      // Flow\n      flow: {\n        row: 'grid-flow-row',\n        col: 'grid-flow-col',\n        rowDense: 'grid-flow-row-dense',\n        colDense: 'grid-flow-col-dense',\n        dense: 'grid-flow-dense'\n      },\n\n      // Gap\n      gap: {\n        0: 'gap-0',\n        0.5: 'gap-0.5',\n        1: 'gap-1',\n        1.5: 'gap-1.5',\n        2: 'gap-2',\n        2.5: 'gap-2.5',\n        3: 'gap-3',\n        3.5: 'gap-3.5',\n        4: 'gap-4',\n        5: 'gap-5',\n        6: 'gap-6',\n        7: 'gap-7',\n        8: 'gap-8',\n        9: 'gap-9',\n        10: 'gap-10',\n        11: 'gap-11',\n        12: 'gap-12',\n        14: 'gap-14',\n        16: 'gap-16',\n        20: 'gap-20',\n        24: 'gap-24'\n      },\n      gapX: {\n        0: 'gap-x-0',\n        0.5: 'gap-x-0.5',\n        1: 'gap-x-1',\n        1.5: 'gap-x-1.5',\n        2: 'gap-x-2',\n        2.5: 'gap-x-2.5',\n        3: 'gap-x-3',\n        3.5: 'gap-x-3.5',\n        4: 'gap-x-4',\n        5: 'gap-x-5',\n        6: 'gap-x-6',\n        7: 'gap-x-7',\n        8: 'gap-x-8',\n        9: 'gap-x-9',\n        10: 'gap-x-10',\n        11: 'gap-x-11',\n        12: 'gap-x-12',\n        14: 'gap-x-14',\n        16: 'gap-x-16',\n        20: 'gap-x-20',\n        24: 'gap-x-24'\n      },\n      gapY: {\n        0: 'gap-y-0',\n        0.5: 'gap-y-0.5',\n        1: 'gap-y-1',\n        1.5: 'gap-y-1.5',\n        2: 'gap-y-2',\n        2.5: 'gap-y-2.5',\n        3: 'gap-y-3',\n        3.5: 'gap-y-3.5',\n        4: 'gap-y-4',\n        5: 'gap-y-5',\n        6: 'gap-y-6',\n        7: 'gap-y-7',\n        8: 'gap-y-8',\n        9: 'gap-y-9',\n        10: 'gap-y-10',\n        11: 'gap-y-11',\n        12: 'gap-y-12',\n        14: 'gap-y-14',\n        16: 'gap-y-16',\n        20: 'gap-y-20',\n        24: 'gap-y-24'\n      }\n    },\n    defaultVariants: {\n      columns: 1\n    }\n  },\n  {\n    responsiveVariants: true\n  }\n)\n\ninterface GridProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof gridStyles> {\n  className?: string\n  debug?: boolean\n}\n\nconst Grid = ({ className, gap, gapX, gapY, flow, columns, rows, ...props }: GridProps) => {\n  return (\n    <div\n      aria-label={props['aria-label'] || 'grid'}\n      className={gridStyles({\n        gap: gap ?? gapX ?? gapY,\n        gapX: gapX ?? gap,\n        gapY: gapY ?? gap,\n        flow: flow ?? 'row',\n        columns: columns ?? 1,\n        rows: rows ?? 1,\n        className:\n          'debug' in props\n            ? cn('[&>.grid-cell]:border [&>.grid-cell]:border-warning', className)\n            : className\n      })}\n      {...props}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nconst gridItemStyles = tv(\n  {\n    base: 'grid-cell focus:outline-none',\n    variants: {\n      colSpan: {\n        auto: 'col-auto',\n        1: 'col-span-1',\n        2: 'col-span-2',\n        3: 'col-span-3',\n        4: 'col-span-4',\n        5: 'col-span-5',\n        6: 'col-span-6',\n        7: 'col-span-7',\n        8: 'col-span-8',\n        9: 'col-span-9',\n        10: 'col-span-10',\n        11: 'col-span-11',\n        12: 'col-span-12',\n        full: 'col-span-full'\n      },\n      colStart: {\n        1: 'col-start-1',\n        2: 'col-start-2',\n        3: 'col-start-3',\n        4: 'col-start-4',\n        5: 'col-start-5',\n        6: 'col-start-6',\n        7: 'col-start-7',\n        8: 'col-start-8',\n        9: 'col-start-9',\n        10: 'col-start-10',\n        11: 'col-start-11',\n        12: 'col-start-12',\n        13: 'col-start-13',\n        auto: 'col-start-auto'\n      },\n      colEnd: {\n        1: 'col-end-1',\n        2: 'col-end-2',\n        3: 'col-end-3',\n        4: 'col-end-4',\n        5: 'col-end-5',\n        6: 'col-end-6',\n        7: 'col-end-7',\n        8: 'col-end-8',\n        9: 'col-end-9',\n        10: 'col-end-10',\n        11: 'col-end-11',\n        12: 'col-end-12',\n        13: 'col-end-13',\n        auto: 'col-end-auto'\n      },\n      rowSpan: {\n        auto: 'row-auto',\n        1: 'row-span-1',\n        2: 'row-span-2',\n        3: 'row-span-3',\n        4: 'row-span-4',\n        5: 'row-span-5',\n        6: 'row-span-6',\n        7: 'row-span-7',\n        8: 'row-span-8',\n        9: 'row-span-9',\n        10: 'row-span-10',\n        11: 'row-span-11',\n        12: 'row-span-12',\n        full: 'row-span-full'\n      },\n      rowStart: {\n        1: 'row-start-1',\n        2: 'row-start-2',\n        3: 'row-start-3',\n        4: 'row-start-4',\n        5: 'row-start-5',\n        6: 'row-start-6',\n        7: 'row-start-7',\n        8: 'row-start-8',\n        9: 'row-start-9',\n        10: 'row-start-10',\n        11: 'row-start-11',\n        12: 'row-start-12',\n        13: 'row-start-13',\n        auto: 'row-start-auto'\n      },\n      rowEnd: {\n        1: 'row-end-1',\n        2: 'row-end-2',\n        3: 'row-end-3',\n        4: 'row-end-4',\n        5: 'row-end-5',\n        6: 'row-end-6',\n        7: 'row-end-7',\n        8: 'row-end-8',\n        9: 'row-end-9',\n        10: 'row-end-10',\n        11: 'row-end-11',\n        12: 'row-end-12',\n        13: 'row-end-13',\n        auto: 'row-end-auto'\n      }\n    }\n  },\n  {\n    responsiveVariants: ['sm', 'md', 'lg', 'xl', '2xl']\n  }\n)\n\ninterface GridItemProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof gridItemStyles> {\n  className?: string\n}\n\nconst GridItem = ({\n  children,\n  className,\n  colSpan,\n  rowSpan,\n  colStart,\n  colEnd,\n  rowStart,\n  rowEnd,\n  ...props\n}: GridItemProps) => {\n  return (\n    <div\n      className={gridItemStyles({\n        colSpan,\n        rowSpan,\n        colStart,\n        colEnd,\n        rowStart,\n        rowEnd,\n        className\n      })}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n}\n\nGrid.Collection = Collection\nGrid.Item = GridItem\n\nexport { Grid, gridStyles, gridItemStyles }\n",
    "type": "ui"
  },
  "meter": {
    "component": "@/components/ui/meter",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { motion } from 'framer-motion'\nimport { IconTriangleInfoFill } from 'justd-icons'\nimport type { MeterProps as AriaMeterProps } from 'react-aria-components'\nimport { Meter as MeterPrimitive } from 'react-aria-components'\n\nimport { Label } from './field'\nimport { ctr } from './primitive'\n\nexport interface MeterProps extends AriaMeterProps {\n  label?: string\n}\n\nconst Meter = ({ label, ...props }: MeterProps) => {\n  return (\n    <MeterPrimitive {...props} className={ctr(props.className, 'flex flex-col gap-1')}>\n      {({ percentage, valueText }) => (\n        <>\n          <div className=\"flex w-full justify-between gap-2\">\n            <Label>{label}</Label>\n            <span className={`text-sm ${percentage >= 80 ? 'text-danger' : 'text-muted-fg'}`}>\n              {percentage >= 80 && (\n                <IconTriangleInfoFill\n                  aria-label=\"Alert\"\n                  className=\"inline-block size-4 align-text-bottom\"\n                />\n              )}\n              {' ' + valueText}\n            </span>\n          </div>\n          <div className=\"relative h-2 min-w-64 rounded-full bg-muted outline outline-1 -outline-offset-1 outline-transparent\">\n            <motion.div\n              className=\"absolute left-0 top-0 h-full rounded-full forced-colors:bg-[Highlight]\"\n              initial={{ width: '0%', backgroundColor: getColor(0) }}\n              animate={{\n                width: `${percentage}%`,\n                backgroundColor: getColor(percentage)\n              }}\n              transition={{ duration: 0.5 }}\n            />\n          </div>\n        </>\n      )}\n    </MeterPrimitive>\n  )\n}\n\nconst getColor = (percentage: number) => {\n  if (percentage < 30) {\n    return '#0d6efd' // Blue\n  }\n\n  if (percentage < 50) {\n    return '#198754' // Green\n  }\n\n  if (percentage < 70) {\n    return '#ffc107' // Yellow\n  }\n\n  if (percentage < 80) {\n    return '#f97316' // Orange\n  }\n\n  return '#e11d48' // Red\n}\n\nexport { Meter, getColor }\n",
    "type": "ui"
  },
  "time-field": {
    "component": "@/components/ui/time-field",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  TimeField as TimeFieldPrimitive,\n  type TimeFieldProps as TimeFieldPrimitiveProps,\n  type TimeValue,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DateInput } from './date-field'\nimport { Description, FieldError, fieldGroupStyles, Label } from './field'\nimport { ctr } from './primitive'\n\nexport interface TimeFieldProps<T extends TimeValue> extends TimeFieldPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst timeFieldStyles = tv({\n  extend: fieldGroupStyles,\n  base: 'flex w-fit font-mono min-w-28 justify-around whitespace-nowrap p-2 lg:text-sm'\n})\n\nconst TimeField = <T extends TimeValue>({\n  label,\n  className,\n  description,\n  errorMessage,\n  ...props\n}: TimeFieldProps<T>) => {\n  return (\n    <TimeFieldPrimitive {...props} className={ctr(className, 'flex flex-col gap-1')}>\n      <Label>{label}</Label>\n      <DateInput className={timeFieldStyles} />\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </TimeFieldPrimitive>\n  )\n}\n\nexport { TimeField }\n",
    "type": "ui"
  },
  "breadcrumbs": {
    "component": "@/components/ui/breadcrumbs",
    "raw": "'use client'\n\nimport { IconChevronRight } from 'justd-icons'\nimport type { BreadcrumbProps, BreadcrumbsProps } from 'react-aria-components'\nimport {\n  Breadcrumb as BreadcrumbPrimitive,\n  Breadcrumbs as BreadcrumbsPrimitive,\n  type LinkProps\n} from 'react-aria-components'\n\nimport { Link } from './link'\nimport { cn } from './primitive'\n\nconst Breadcrumbs = <T extends object>({ className, ...props }: BreadcrumbsProps<T>) => {\n  return <BreadcrumbsPrimitive {...props} className={cn('flex gap-1', className)} />\n}\n\nconst Breadcrumb = ({ className, ...props }: BreadcrumbProps & LinkProps) => {\n  return (\n    <BreadcrumbPrimitive {...props} className={cn('flex items-center gap-1', className)}>\n      <Link href={props.href} {...props} />\n      {'href' in props && <IconChevronRight className=\"size-4 shrink-0 text-muted-fg\" />}\n    </BreadcrumbPrimitive>\n  )\n}\n\nexport { Breadcrumb, Breadcrumbs }\n",
    "type": "ui"
  },
  "accordion": {
    "component": "@/components/ui/accordion",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport type { MotionProps } from 'framer-motion'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { IconChevronDown } from 'justd-icons'\nimport type { ButtonProps } from 'react-aria-components'\nimport { Button, composeRenderProps } from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from './primitive'\n\ninterface AccordionContextType extends React.HtmlHTMLAttributes<HTMLDivElement> {\n  hideBorder?: boolean\n  hideIndicator?: boolean\n  disabledKeys?: number[]\n  defaultExpandedKeys?: number[] | string[]\n}\n\nconst AccordionContext = React.createContext<AccordionContextType>({})\nconst useAccordion = () => React.useContext(AccordionContext)\n\ninterface AccordionProps extends AccordionContextType {\n  children: React.ReactNode\n}\n\nconst Accordion = ({\n  children,\n  disabledKeys,\n  hideIndicator,\n  hideBorder,\n  defaultExpandedKeys,\n  ...props\n}: AccordionProps) => {\n  return (\n    <AccordionContext.Provider\n      value={{ hideIndicator, defaultExpandedKeys, hideBorder, disabledKeys }}\n    >\n      <div {...props}>{children}</div>\n    </AccordionContext.Provider>\n  )\n}\n\nconst accordionItemStyles = tv({\n  base: 'zwx3ai flex group pb-3 relative w-full flex-col border-b'\n})\n\ninterface AccordionItemContextProps {\n  setExpanded?: (index: null | number | string) => void\n  isOpen?: boolean\n  currentId: number | string\n}\n\nconst AccordionItemContext = React.createContext<AccordionItemContextProps | undefined>(undefined)\nconst useAccordionItem = () => {\n  const context = React.useContext(AccordionItemContext)\n  if (!context) {\n    throw new Error('AccordionItem must be used within an Accordion')\n  }\n  return context\n}\n\ninterface AccordionItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  currentId: number | string\n}\n\nconst AccordionItem = ({ className, children, currentId }: AccordionItemProps) => {\n  const { defaultExpandedKeys, disabledKeys } = useAccordion()\n  const [expanded, setExpanded] = React.useState<any>(\n    // @ts-ignore - TS doesn't know that defaultExpandedKeys is an array of numbers\n    defaultExpandedKeys?.includes(currentId) ? currentId : false\n  )\n  const isOpen = currentId === expanded\n  const isLocked = disabledKeys?.includes(currentId as number)\n  return (\n    <AccordionItemContext.Provider value={{ setExpanded, isOpen, currentId }}>\n      <div\n        data-slot=\"ai-31kxlae0321lsd\"\n        data-locked={isLocked ?? undefined}\n        data-open={isOpen ?? undefined}\n        className={accordionItemStyles({ className })}\n      >\n        {children}\n      </div>\n    </AccordionItemContext.Provider>\n  )\n}\n\ninterface AccordionContentProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode\n}\n\nconst AccordionContent = ({ className, children }: AccordionContentProps) => {\n  const { isOpen } = useAccordionItem()\n  return (\n    <AnimatePresence initial={false}>\n      {isOpen && (\n        <motion.section\n          className={cn('overflow-hidden pr-6 dk32xd', className)}\n          initial=\"collapsed\"\n          animate=\"open\"\n          exit=\"collapsed\"\n          variants={{\n            open: { opacity: 1, height: 'initial' },\n            collapsed: { opacity: 0, height: 0 }\n          }}\n          transition={{ duration: 0.4, ease: [0.04, 0.62, 0.23, 0.98] }}\n        >\n          <div className=\"pb-0 pt-1\">{children}</div>\n        </motion.section>\n      )}\n    </AnimatePresence>\n  )\n}\n\ninterface AccordionTriggerProps\n  extends Omit<ButtonProps & React.RefAttributes<HTMLButtonElement> & MotionProps, 'ref'> {\n  children: React.ReactNode\n}\n\nconst accordionTriggerStyles = tv({\n  base: [\n    'flex flex-1 rounded-lg text-muted-fg hover:text-fg [&>[data-slot=icon]]:size-6 items-center gap-x-2 pt-3 font-medium'\n  ],\n  variants: {\n    isFocused: {\n      true: 'outline-none text-fg'\n    },\n    isOpen: {\n      true: 'text-fg'\n    },\n    isDisabled: {\n      true: 'opacity-50 cursor-default'\n    }\n  }\n})\n\nconst AccordionTrigger = ({ className, children, ...props }: AccordionTriggerProps) => {\n  const { setExpanded, isOpen, currentId } = useAccordionItem()\n  const { hideIndicator, disabledKeys } = useAccordion()\n  const isLocked = disabledKeys?.includes(currentId as number)\n\n  const handlePress = () => {\n    if (setExpanded) {\n      setExpanded(isOpen ? null : currentId)\n    }\n  }\n\n  const onKeyDownHandler = (e: React.KeyboardEvent<HTMLButtonElement>) => {\n    if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\n      e.preventDefault()\n      const buttons = document.querySelectorAll('div[data-slot=\"ai-31kxlae0321lsd\"] > button')\n      const currentButton = e.currentTarget\n      const currentIndex = Array.from(buttons).indexOf(currentButton)\n      const totalItems = buttons.length\n      let nextIndex = currentIndex + (e.key === 'ArrowDown' ? 1 : -1)\n\n      if (nextIndex >= totalItems) {\n        nextIndex = 0\n      } else if (nextIndex < 0) {\n        nextIndex = totalItems - 1\n      }\n\n      ;(buttons[nextIndex] as HTMLElement).focus()\n    }\n  }\n\n  return (\n    <Button\n      {...props}\n      isDisabled={isLocked}\n      onKeyDown={onKeyDownHandler}\n      onPress={handlePress}\n      className={composeRenderProps(className, (className, renderProps) =>\n        accordionTriggerStyles({\n          ...renderProps,\n          isOpen,\n          className\n        })\n      )}\n    >\n      {children}\n      {!hideIndicator && (\n        <IconChevronDown\n          className={twMerge(\n            'ml-auto transition duration-300 group-disabled:rotate-0',\n            isOpen ? 'rotate-180' : 'rotate-0'\n          )}\n        />\n      )}\n    </Button>\n  )\n}\n\nAccordion.Item = AccordionItem\nAccordion.Content = AccordionContent\nAccordion.Trigger = AccordionTrigger\n\nexport { Accordion, type AccordionTriggerProps }\n",
    "type": "ui"
  },
  "drawer": {
    "component": "@/components/ui/drawer",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { PanInfo } from 'framer-motion'\nimport {\n  animate,\n  AnimatePresence,\n  type Inertia,\n  motion,\n  useMotionTemplate,\n  useMotionValue,\n  useMotionValueEvent,\n  useTransform\n} from 'framer-motion'\nimport type { DialogProps } from 'react-aria-components'\nimport { Button, type ButtonProps, Modal, ModalOverlay } from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\n\nimport { Dialog } from './dialog'\n\nconst inertiaTransition: Inertia = {\n  type: 'inertia',\n  bounceStiffness: 300,\n  bounceDamping: 60,\n  timeConstant: 300\n}\nconst staticTransition = {\n  duration: 0.4,\n  ease: [0.32, 0.72, 0, 1]\n}\nconst drawerMargin = 60\nconst drawerRadius = 32\n\ninterface DrawerContextType {\n  isOpen: boolean\n  openDrawer: () => void\n  closeDrawer: () => void\n  withNotch?: boolean\n}\n\nconst DrawerContext = React.createContext<DrawerContextType | undefined>(undefined)\n\nconst useDrawerContext = () => {\n  const context = React.useContext(DrawerContext)\n  if (context === undefined) {\n    throw new Error('useDrawerContext must be used within a Drawer')\n  }\n  return context\n}\n\nconst ModalPrimitive = motion(Modal)\nconst ModalOverlayPrimitive = motion(ModalOverlay)\n\ninterface DrawerOverlayPrimitiveProps\n  extends Omit<React.ComponentProps<typeof ModalOverlayPrimitive>, 'isOpen' | 'onOpenChange'> {\n  'aria-label'?: DialogProps['aria-label']\n  'aria-labelledby'?: DialogProps['aria-labelledby']\n  role?: DialogProps['role']\n}\n\nconst DrawerContentPrimitive = ({ children, ...props }: DrawerOverlayPrimitiveProps) => {\n  const { closeDrawer, withNotch } = useDrawerContext()\n  const [contentHeight, setContentHeight] = React.useState(0)\n\n  const h = Math.min(contentHeight + drawerMargin, window.innerHeight - drawerMargin)\n  const y = useMotionValue(h)\n  const bgOpacity = useTransform(y, [0, h], [0.15, 0])\n  const bg = useMotionTemplate`rgba(0, 0, 0, ${bgOpacity})`\n\n  const root = document.getElementsByTagName('main')[0] as HTMLElement\n\n  const bodyBorderRadius = useTransform(y, [0, h], [drawerRadius, 0])\n\n  useMotionValueEvent(bodyBorderRadius, 'change', (v) => (root.style.borderRadius = `${v}px`))\n\n  const onDragEnd = (_: any, { offset, velocity }: PanInfo) => {\n    if (offset.y > h * 0.4 || velocity.y > 10) {\n      closeDrawer()\n    } else {\n      animate(y, 0, { ...inertiaTransition, min: 0, max: 0 })\n    }\n  }\n\n  return (\n    <>\n      <ModalOverlayPrimitive\n        isDismissable\n        isOpen\n        onOpenChange={closeDrawer}\n        className={twJoin([\n          'fixed touch-none will-change-transform left-0 top-0 isolate z-50 h-[--visual-viewport-height] w-full',\n          'flex items-end [--visual-viewport-vertical-padding:100px]'\n        ])}\n        style={{\n          backgroundColor: bg as any\n        }}\n      >\n        <ModalPrimitive\n          className={twJoin(\n            'max-h-full flex flex-col w-full rounded-t-2xl sm:rounded-lg overflow-hidden bg-overlay text-overlay-fg text-left align-middle shadow-lg',\n            'ring-1 ring-zinc-950/5 dark:ring-white/15'\n          )}\n          initial={{ y: h }}\n          animate={{ y: 0 }}\n          exit={{ y: h }}\n          transition={staticTransition}\n          style={{\n            y,\n            top: 'auto',\n            height: contentHeight > 0 ? `${contentHeight + drawerMargin}px` : 'auto',\n            maxHeight: `calc(100% - ${drawerMargin}px)`\n          }}\n          drag=\"y\"\n          dragConstraints={{ top: 0, bottom: h }}\n          onDragEnd={onDragEnd}\n          {...props}\n        >\n          <div className=\"overflow-hidden\">\n            {withNotch && (\n              <div className=\"notch touch-pan-y sticky top-0 mx-auto shrink-0 mt-2.5 h-1.5 w-10 rounded-full bg-fg/20\" />\n            )}\n            <div\n              className=\"overflow-y-auto mt-3\"\n              ref={(el) => {\n                if (el) {\n                  const resizeObserver = new ResizeObserver((entries) => {\n                    for (const entry of entries) {\n                      setContentHeight(entry.contentRect.height)\n                    }\n                  })\n                  resizeObserver.observe(el)\n                  return () => resizeObserver.disconnect()\n                }\n              }}\n            >\n              <>{children}</>\n            </div>\n          </div>\n        </ModalPrimitive>\n      </ModalOverlayPrimitive>\n    </>\n  )\n}\n\ninterface DrawerPrimitiveProps extends Omit<React.ComponentProps<typeof Modal>, 'children'> {\n  'aria-label'?: DialogProps['aria-label']\n  'aria-labelledby'?: DialogProps['aria-labelledby']\n  role?: DialogProps['role']\n  children?: DialogProps['children']\n}\n\nconst DrawerPrimitive = (props: DrawerPrimitiveProps) => {\n  const { isOpen } = useDrawerContext()\n\n  const h = window.innerHeight - drawerMargin\n  const y = useMotionValue(h)\n  const bodyBorderRadius = useTransform(y, [0, h], [drawerRadius, 0])\n  return (\n    <motion.div\n      style={{\n        borderRadius: bodyBorderRadius,\n        transformOrigin: 'center 0'\n      }}\n    >\n      <AnimatePresence>{isOpen && <>{props.children}</>}</AnimatePresence>\n    </motion.div>\n  )\n}\n\nconst DrawerTrigger = (props: ButtonProps) => {\n  const { openDrawer } = useDrawerContext()\n\n  return <Button onPress={openDrawer} {...props} />\n}\n\ninterface DrawerProps {\n  children: React.ReactNode\n  isOpen?: boolean\n  withNotch?: boolean\n  onOpenChange?: (isOpen: boolean) => void\n}\n\nconst Drawer = ({\n  children,\n  withNotch = true,\n  isOpen: controlledIsOpen,\n  onOpenChange\n}: DrawerProps) => {\n  const [internalIsOpen, setInternalIsOpen] = React.useState(false)\n\n  const isControlled = controlledIsOpen !== undefined\n  const isOpen = isControlled ? controlledIsOpen : internalIsOpen\n\n  const openDrawer = () => {\n    if (isControlled && onOpenChange) {\n      onOpenChange(true)\n    } else {\n      setInternalIsOpen(true)\n    }\n  }\n\n  const closeDrawer = () => {\n    if (isControlled && onOpenChange) {\n      onOpenChange(false)\n    } else {\n      setInternalIsOpen(false)\n    }\n  }\n\n  if (typeof window === 'undefined') {\n    return null\n  }\n\n  return (\n    <DrawerContext.Provider value={{ isOpen, openDrawer, closeDrawer, withNotch }}>\n      {children}\n    </DrawerContext.Provider>\n  )\n}\n\nconst DrawerContent = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive>) => {\n  return (\n    <DrawerPrimitive>\n      <DrawerContentPrimitive {...props}>\n        <Dialog\n          role={props.role ?? 'dialog'}\n          aria-label={props['aria-label'] ?? undefined}\n          aria-labelledby={props['aria-labelledby'] ?? undefined}\n          className=\"sm:max-w-lg mx-auto\"\n        >\n          {(values) => <>{typeof children === 'function' ? children(values) : children}</>}\n        </Dialog>\n      </DrawerContentPrimitive>\n    </DrawerPrimitive>\n  )\n}\n\nconst DrawerHeader = ({ className, ...props }: React.ComponentProps<typeof Dialog.Header>) => (\n  <Dialog.Header className={twJoin('pt-2', className)} {...props} />\n)\n\nconst DrawerBody = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof Dialog.Body>) => (\n  <Dialog.Body {...props} className={twJoin('px-4', className)}>\n    {children}\n  </Dialog.Body>\n)\n\nconst DrawerFooter = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof Dialog.Footer>) => (\n  <Dialog.Footer {...props} className={twJoin('pb-2', className)}>\n    {children}\n  </Dialog.Footer>\n)\n\nDrawer.Body = DrawerBody\nDrawer.Close = Dialog.Close\nDrawer.Content = DrawerContent\nDrawer.Description = Dialog.Description\nDrawer.Footer = DrawerFooter\nDrawer.Header = DrawerHeader\nDrawer.Title = Dialog.Title\nDrawer.Trigger = DrawerTrigger\n\nexport { Drawer }\n",
    "type": "ui"
  },
  "tooltip": {
    "component": "@/components/ui/tooltip",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n  Button,\n  composeRenderProps,\n  OverlayArrow,\n  Tooltip as TooltipPrimitive,\n  type TooltipProps as TooltipPrimitiveProps,\n  TooltipTrigger as TooltipTriggerPrimitive\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nexport interface TooltipProps extends Omit<TooltipPrimitiveProps, 'children'> {\n  children: React.ReactNode\n}\n\nconst tooltipStyles = tv({\n  base: [\n    'group rounded-md [&_strong]:font-medium bg-fg border border-fg text-background px-2 py-1.5 text-sm will-change-transform dark:shadow-none',\n    'placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1'\n  ],\n  variants: {\n    isEntering: {\n      true: 'animate-in fade-in'\n    },\n    isExiting: {\n      true: 'animate-in fade-in direction-reverse'\n    }\n  }\n})\n\nconst TooltipTrigger = Button\nconst Tooltip = TooltipTriggerPrimitive\n\nconst TooltipContent = ({ children, ...props }: TooltipProps) => {\n  return (\n    <TooltipPrimitive\n      {...props}\n      offset={10}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        tooltipStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      <OverlayArrow>\n        <svg\n          width={8}\n          height={8}\n          viewBox=\"0 0 8 8\"\n          className=\"fill-fg stroke-fg group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]\"\n        >\n          <path d=\"M0 0 L4 4 L8 0\" />\n        </svg>\n      </OverlayArrow>\n      {children}\n    </TooltipPrimitive>\n  )\n}\n\nexport { Tooltip, TooltipContent, TooltipTrigger }\n",
    "type": "ui"
  },
  "file-trigger": {
    "component": "@/components/ui/file-trigger",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCamera, IconFolder, IconPaperclip } from 'justd-icons'\nimport {\n  FileTrigger as FileTriggerPrimitive,\n  type FileTriggerProps as FileTriggerPrimitiveProps\n} from 'react-aria-components'\n\nimport { Button } from './button'\n\ninterface FileTriggerProps extends FileTriggerPrimitiveProps {\n  withIcon?: boolean\n  isDisabled?: boolean\n  intent?:\n    | 'primary'\n    | 'secondary'\n    | 'danger'\n    | 'warning'\n    | 'info'\n    | 'light/dark'\n    | 'success'\n    | 'light'\n    | 'dark'\n  size?: 'medium' | 'large' | 'square-petite' | 'extra-small' | 'small'\n  shape?: 'square' | 'circle'\n  appearance?: 'solid' | 'outline' | 'plain'\n}\n\nconst FileTrigger = ({\n  intent = 'primary',\n  appearance = 'outline',\n  size = 'medium',\n  shape = 'square',\n  withIcon = true,\n  ...props\n}: FileTriggerProps) => {\n  return (\n    <>\n      <FileTriggerPrimitive {...props}>\n        <Button\n          isDisabled={props.isDisabled}\n          intent={intent}\n          size={size}\n          shape={shape}\n          appearance={appearance}\n        >\n          {withIcon && (\n            <>\n              {props.defaultCamera ? (\n                <IconCamera />\n              ) : props.acceptDirectory ? (\n                <IconFolder />\n              ) : (\n                <IconPaperclip className=\"rotate-45\" />\n              )}\n            </>\n          )}\n          {props.children ? (\n            props.children\n          ) : (\n            <>\n              {props.allowsMultiple\n                ? 'Browse a files'\n                : props.acceptDirectory\n                  ? 'Browse'\n                  : 'Browse a file'}\n              ...\n            </>\n          )}\n        </Button>\n      </FileTriggerPrimitive>\n    </>\n  )\n}\n\nexport { FileTrigger }\n",
    "type": "ui"
  },
  "heading": {
    "component": "@/components/ui/heading",
    "raw": "'use client'\n\nimport { Heading as HeadingPrimitive } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { isIos } from './primitive'\n\nconst headingStyles = tv({\n  base: 'font-sans tracking-tight text-fg',\n  variants: {\n    level: {\n      1: 'font-bold text-2xl',\n      2: 'font-semibold text-lg sm:text-xl',\n      3: 'font-semibold text-base sm:text-lg',\n      4: 'font-medium text-base sm:text-sm'\n    },\n    tracking: {\n      tighter: 'tracking-tighter',\n      tight: 'tracking-tight',\n      normal: 'tracking-normal',\n      wide: 'tracking-wide',\n      wider: 'tracking-wider',\n      widest: 'tracking-widest'\n    }\n  }\n})\ntype HeadingType = { level?: 1 | 2 | 3 | 4 } & React.ComponentPropsWithoutRef<\n  'h1' | 'h2' | 'h3' | 'h4'\n>\n\ninterface HeadingProps extends HeadingType {\n  tracking?: 'tighter' | 'tight' | 'normal' | 'wide' | 'wider' | 'widest'\n  className?: string | undefined\n}\n\nconst Heading = ({ className, tracking = 'normal', level = 1, ...props }: HeadingProps) => {\n  return (\n    <HeadingPrimitive\n      level={level}\n      className={headingStyles({\n        level,\n        tracking,\n        className: isIos() ? 'font-medium' : className\n      })}\n      {...props}\n    />\n  )\n}\n\nexport { Heading, type HeadingProps }\n",
    "type": "ui"
  },
  "choicebox": {
    "component": "@/components/ui/choicebox",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport type { GridListItemProps, GridListProps } from 'react-aria-components'\nimport { composeRenderProps, GridList, GridListItem } from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { Description, Label } from './field'\nimport { focusStyles } from './primitive'\n\nconst choiceboxStyles = tv({\n  base: 'grid',\n  variants: {\n    columns: {\n      1: 'sm:grid-cols-1',\n      2: 'sm:grid-cols-2',\n      3: 'sm:grid-cols-3',\n      4: 'sm:grid-cols-4',\n      5: 'sm:grid-cols-5',\n      6: 'sm:grid-cols-6'\n    },\n    gap: {\n      2: 'gap-2',\n      4: 'gap-4',\n      6: 'gap-6'\n    }\n  },\n  defaultVariants: {\n    columns: 2,\n    gap: 6\n  }\n})\n\ninterface ChoiceboxProps<T extends object>\n  extends GridListProps<T>,\n    VariantProps<typeof choiceboxStyles> {\n  className?: string\n}\n\nconst Choicebox = <T extends object>({\n  columns,\n  gap,\n  className,\n  selectionMode = 'multiple',\n  ...props\n}: ChoiceboxProps<T>) => {\n  return (\n    <GridList\n      layout={columns === 1 ? 'stack' : 'grid'}\n      selectionMode={selectionMode}\n      className={choiceboxStyles({\n        columns,\n        gap,\n        className\n      })}\n      {...props}\n    />\n  )\n}\n\nconst choiceboxItemStyles = tv({\n  extend: focusStyles,\n  base: 'rounded-lg cursor-pointer border p-4 [&_[slot=title]]:font-medium',\n  variants: {\n    isSelected: {\n      false: 'hover:bg-secondary/50',\n      true: [\n        'z-20 border-primary/50 bg-primary/5 dark:bg-primary/15',\n        '[&_[slot=title]]:text-primary-600 dark:[&_[slot=title]]:text-primary-300',\n        '[&_[slot=description]]:text-primary-600 dark:[&_[slot=description]]:text-primary-300'\n      ]\n    },\n    isDisabled: {\n      true: 'z-10 cursor-default opacity-80 [&_[slot=title]]:text-muted-fg forced-colors:text-[GrayText]'\n    }\n  }\n})\n\ninterface ChoiceboxItemProps extends GridListItemProps, VariantProps<typeof choiceboxItemStyles> {\n  title: string\n  description?: string\n}\n\nconst ChoiceboxItem = ({ children, className, ...props }: ChoiceboxItemProps) => {\n  const textValue = typeof children === 'string' ? children : undefined\n  return (\n    <GridListItem\n      textValue={textValue}\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        choiceboxItemStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      {(values) => (\n        <div className=\"flex items-center w-full justify-between gap-2\">\n          <div className=\"pr-8 flex flex-col space-y-1\">\n            <Label slot=\"title\" htmlFor={textValue}>\n              {props.title}\n            </Label>\n            {props.description && <Description>{props.description}</Description>}\n          </div>\n          <>\n            {values.selectionMode === 'multiple' && values.selectionBehavior === 'toggle' && (\n              <Checkbox slot=\"selection\" />\n            )}\n          </>\n        </div>\n      )}\n    </GridListItem>\n  )\n}\n\nChoicebox.Item = ChoiceboxItem\nexport { Choicebox }\n",
    "type": "ui"
  },
  "switch": {
    "component": "@/components/ui/switch",
    "raw": "'use client'\n\nimport {\n  Switch as SwitchPrimitive,\n  type SwitchProps as SwitchPrimitiveProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { focusRing } from './primitive'\n\nconst trackStyles = tv({\n  extend: focusRing,\n  base: 'mr-2 h-5 w-8 cursor-pointer rounded-full border-2 border-transparent bg-muted-fg/50 transition duration-200',\n  variants: {\n    isDisabled: { true: 'opacity-50 cursor-default' },\n    intent: {\n      primary: 'group-selected:bg-primary',\n      secondary: 'group-selected:bg-muted-fg',\n      success: 'group-selected:bg-success',\n      danger: 'group-selected:bg-danger',\n      warning: 'group-selected:bg-warning',\n      info: 'group-selected:bg-info'\n    }\n  },\n  defaultVariants: {\n    intent: 'primary'\n  }\n})\n\nconst switchStyles = tv({\n  slots: {\n    base: 'group inline-flex touch-none lg:text-sm items-center',\n    ball: 'forced-colors:disabled:outline-[GrayText] group-selected:ml-3 group-selected:group-data-[pressed]:ml-2 group-pressed:w-5 block size-4 origin-right rounded-full bg-white shadow transition-all duration-200'\n  }\n})\n\nconst { base, ball } = switchStyles()\n\ninterface SwitchProps extends SwitchPrimitiveProps, VariantProps<typeof trackStyles> {}\n\nconst Switch = ({ children, intent, className, ...props }: SwitchProps) => {\n  return (\n    <SwitchPrimitive\n      {...props}\n      className={(values) =>\n        base({ className: typeof className === 'function' ? className(values) : className })\n      }\n      style={{ WebkitTapHighlightColor: 'transparent' }}\n    >\n      {(values) => (\n        <>\n          <span\n            className={trackStyles({\n              isFocused: props.isFocused,\n              isInvalid: props.isInvalid,\n              isDisabled: props.isDisabled,\n              intent\n            })}\n          >\n            <span className={ball()} />\n          </span>\n          {typeof children === 'function' ? children(values) : children}\n        </>\n      )}\n    </SwitchPrimitive>\n  )\n}\n\nexport { Switch }\n",
    "type": "ui"
  },
  "calendar": {
    "component": "@/components/ui/calendar",
    "raw": "'use client'\n\nimport { IconChevronLgLeft, IconChevronLgRight } from 'justd-icons'\nimport {\n  Calendar as CalendarPrimitive,\n  CalendarCell,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarGridHeader as CalendarGridHeaderPrimitive,\n  CalendarHeaderCell,\n  type CalendarProps as CalendarPrimitiveProps,\n  composeRenderProps,\n  type DateValue,\n  Heading,\n  Text,\n  useLocale\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport { ctr, focusRing } from './primitive'\n\nconst cellStyles = tv({\n  extend: focusRing,\n  base: 'flex size-10 sm:size-9 cursor-default items-center justify-center font-medium rounded-full lg:text-sm forced-color-adjust-none',\n  variants: {\n    isSelected: {\n      false:\n        'text-fg hover:bg-zinc-100 pressed:bg-zinc-200 dark:hover:bg-zinc-700 dark:pressed:bg-zinc-600',\n      true: 'bg-primary text-primary-fg invalid:bg-danger invalid:text-danger-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText] forced-colors:invalid:bg-[Mark]'\n    },\n    isDisabled: {\n      true: 'text-zinc-400 dark:text-zinc-600 forced-colors:text-[GrayText]'\n    }\n  }\n})\n\ninterface CalendarProps<T extends DateValue>\n  extends Omit<CalendarPrimitiveProps<T>, 'visibleDuration'> {\n  errorMessage?: string\n  className?: string\n}\n\nconst Calendar = <T extends DateValue>({ errorMessage, className, ...props }: CalendarProps<T>) => {\n  return (\n    <CalendarPrimitive className={ctr(className, 'max-w-[17.5rem] sm:max-w-[15.8rem]')} {...props}>\n      <CalendarHeader />\n      <CalendarGrid className=\"[&_td]:border-collapse [&_td]:px-0\">\n        <CalendarGridHeader />\n        <CalendarGridBody>\n          {(date) => (\n            <CalendarCell\n              date={date}\n              className={composeRenderProps(className, (className, renderProps) =>\n                cellStyles({\n                  ...renderProps,\n                  className\n                })\n              )}\n            />\n          )}\n        </CalendarGridBody>\n      </CalendarGrid>\n      {errorMessage && (\n        <Text slot=\"errorMessage\" className=\"text-sm text-red-600\">\n          {errorMessage}\n        </Text>\n      )}\n    </CalendarPrimitive>\n  )\n}\n\nconst calendarHeaderStyles = tv({\n  slots: {\n    header: 'flex w-full justify-center gap-1 px-1 pb-5 sm:pb-4',\n    heading: 'mr-2 text-muted-fg tracking-tight flex-1 text-left font-medium',\n    calendarGridHeaderCell: 'text-sm lg:text-xs font-semibold text-muted-fg'\n  }\n})\n\nconst { header, heading, calendarGridHeaderCell } = calendarHeaderStyles()\n\nconst CalendarHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  const { direction } = useLocale()\n\n  return (\n    <header className={header({ className })} {...props}>\n      <Heading className={heading()} />\n      <div className=\"flex items-center gap-1\">\n        <Button\n          size=\"square-petite\"\n          className=\"[&_[data-slot=icon]]:text-fg size-8 sm:size-7\"\n          shape=\"circle\"\n          appearance=\"plain\"\n          slot=\"previous\"\n        >\n          {direction === 'rtl' ? <IconChevronLgRight /> : <IconChevronLgLeft aria-hidden />}\n        </Button>\n        <Button\n          size=\"square-petite\"\n          className=\"[&_[data-slot=icon]]:text-fg size-8 sm:size-7\"\n          shape=\"circle\"\n          appearance=\"plain\"\n          slot=\"next\"\n        >\n          {direction === 'rtl' ? <IconChevronLgLeft /> : <IconChevronLgRight />}\n        </Button>\n      </div>\n    </header>\n  )\n}\n\nconst CalendarGridHeader = () => {\n  return (\n    <CalendarGridHeaderPrimitive>\n      {(day) => <CalendarHeaderCell className={calendarGridHeaderCell()}>{day}</CalendarHeaderCell>}\n    </CalendarGridHeaderPrimitive>\n  )\n}\n\nCalendar.Header = CalendarHeader\nCalendar.GridHeader = CalendarGridHeader\nexport { Calendar }\n",
    "type": "ui"
  },
  "grid-list": {
    "component": "@/components/ui/grid-list",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconHamburger } from 'justd-icons'\nimport {\n  Button,\n  GridList as GridListPrimitive,\n  GridListItem as GridListItemPrimitive,\n  type GridListItemProps,\n  type GridListProps as GridListPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { composeTailwindRenderProps, focusRing } from './primitive'\n\ninterface GridListProps<T extends object> extends GridListPrimitiveProps<T> {}\n\nconst GridList = <T extends object>({\n  selectionMode = 'single',\n  children,\n  ...props\n}: GridListProps<T>) => (\n  <GridListPrimitive\n    selectionMode={selectionMode}\n    {...props}\n    className={composeTailwindRenderProps(\n      props.className,\n      'relative overflow-auto rounded-lg border'\n    )}\n  >\n    {children}\n  </GridListPrimitive>\n)\n\nconst itemStyles = tv({\n  extend: focusRing,\n  base: 'relative -mb-px flex cursor-default select-none gap-3 border-y px-3 py-2 text-sm text-fg -outline-offset-2 first:rounded-t-md first:border-t-0 last:mb-0 last:rounded-b-md last:border-b-0',\n  variants: {\n    isSelected: {\n      false: 'hover:bg-secondary',\n      true: 'z-20 border-y-primary/50 bg-primary/20'\n    },\n    isDisabled: {\n      true: 'z-10 text-muted-fg forced-colors:text-[GrayText]'\n    }\n  }\n})\n\nconst GridListItem = ({ children, ...props }: GridListItemProps) => {\n  const textValue = typeof children === 'string' ? children : undefined\n  return (\n    <GridListItemPrimitive textValue={textValue} {...props} className={itemStyles}>\n      {({ selectionMode, selectionBehavior, allowsDragging }) => (\n        <>\n          {allowsDragging && (\n            <Button slot=\"drag\">\n              <IconHamburger />\n            </Button>\n          )}\n          {selectionMode === 'multiple' && selectionBehavior === 'toggle' && (\n            <Checkbox slot=\"selection\" />\n          )}\n          {children}\n        </>\n      )}\n    </GridListItemPrimitive>\n  )\n}\n\nconst GridEmptyState = (props: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className=\"p-6\" {...props} />\n)\n\nGridList.Item = GridListItem\nGridList.EmptyState = GridEmptyState\n\nexport { GridList }\n",
    "type": "ui"
  },
  "color": {
    "component": "@/components/ui/color",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { parseColor } from '@react-stately/color'\nimport type {\n  ColorSliderProps as ColorSliderPrimitiveProps,\n  ColorSwatchPickerItemProps as ColorSwatchPickerItemPrimitiveProps,\n  ColorSwatchProps as ColorSwatchPrimitiveProps,\n  ColorThumbProps as ColorThumbPrimitiveProps\n} from 'react-aria-components'\nimport {\n  ColorArea as ColorAreaPrimitive,\n  ColorSlider as ColorSliderPrimitive,\n  ColorSwatch as ColorSwatchPrimitive,\n  ColorSwatchPicker as ColorSwatchPickerPrimitive,\n  ColorSwatchPickerItem as ColorSwatchPickerItemPrimitive,\n  ColorThumb as ColorThumbPrimitive,\n  ColorWheel as ColorWheelPrimitive,\n  ColorWheelTrack as ColorWheelTrackPrimitive,\n  composeRenderProps,\n  SliderOutput\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, Label } from './field'\nimport { cn, focusStyles } from './primitive'\nimport { SliderTrack } from './slider'\n\nconst colorAreaStyles = tv({\n  base: 'size-48 rounded-md border border-background shrink-0 disabled:opacity-50'\n})\n\ninterface ColorAreaProps extends React.ComponentProps<typeof ColorAreaPrimitive> {}\n\nconst ColorArea = ({ className, ...props }: ColorAreaProps) => {\n  return (\n    <ColorAreaPrimitive\n      aria-label={props['aria-label'] ?? 'Color area'}\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        colorAreaStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    />\n  )\n}\n\ninterface ColorThumbProps extends ColorThumbPrimitiveProps {}\n\nconst colorThumbStyles = tv({\n  base: 'size-5 shadow rounded-full ring-1 ring-inset ring-offset-2 ring-black/50 border border-black/50',\n  variants: {\n    isFocusVisible: {\n      true: 'size-6'\n    }\n  }\n})\n\nconst ColorThumb = ({ className, ...props }: ColorThumbProps) => {\n  return (\n    <ColorThumbPrimitive\n      className={composeRenderProps(className, (className, renderProps) =>\n        colorThumbStyles({\n          ...renderProps,\n          className\n        })\n      )}\n      {...props}\n    />\n  )\n}\n\nconst colorSwatchPickerItemStyles = tv({\n  extend: focusStyles,\n  base: 'size-8 rounded-md cspis disabled:opacity-50'\n})\n\nconst ColorSwatchPickerItem = ({ className, ...props }: ColorSwatchPickerItemPrimitiveProps) => {\n  return (\n    <ColorSwatchPickerItemPrimitive\n      className={composeRenderProps(className, (className, renderProps) =>\n        colorSwatchPickerItemStyles({\n          ...renderProps,\n          className\n        })\n      )}\n      {...props}\n    >\n      <ColorSwatch className=\"size-[inherit] cocspip\" />\n    </ColorSwatchPickerItemPrimitive>\n  )\n}\n\ninterface ColorSwatchProps extends ColorSwatchPrimitiveProps {}\n\nconst ColorSwatch = ({ className, ...props }: ColorSwatchProps) => {\n  const needRing = props.color ? isBrightColor(props.color) : false\n  return (\n    <ColorSwatchPrimitive\n      aria-label={props['aria-label'] ?? 'Color swatch'}\n      className={cn(\n        'size-8 cs rounded-md shrink-0',\n        needRing\n          ? 'ring-1 ring-inset ring-black/10'\n          : 'dark:ring-1 dark:ring-inset dark:ring-white/10',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nconst hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\n\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n      }\n    : null\n}\n\nconst hsbToRgb = (h: number, s: number, b: number): { r: number; g: number; b: number } => {\n  s /= 100\n  b /= 100\n  const k = (n: number) => (n + h / 60) % 6\n  const f = (n: number) => b * (1 - s * Math.max(0, Math.min(k(n), 4 - k(n), 1)))\n  return {\n    r: Math.round(255 * f(5)),\n    g: Math.round(255 * f(3)),\n    b: Math.round(255 * f(1))\n  }\n}\n\nconst luminance = (r: number, g: number, b: number): number => {\n  const a = [r, g, b].map((v) => {\n    v /= 255\n    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4)\n  })\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722\n}\n\nconst isBrightColor = (color: any): boolean => {\n  let r, g, b\n\n  if (typeof color === 'string') {\n    if (color.startsWith('#')) {\n      const rgb = hexToRgb(color)\n      if (rgb) {\n        r = rgb.r\n        g = rgb.g\n        b = rgb.b\n      } else {\n        return false\n      }\n    } else if (color.startsWith('rgb')) {\n      const rgbValues = color.match(/\\d+/g)\n      if (rgbValues) {\n        r = parseInt(rgbValues[0], 10)\n        g = parseInt(rgbValues[1], 10)\n        b = parseInt(rgbValues[2], 10)\n      } else {\n        return false\n      }\n    } else {\n      const namedColors: Record<string, string> = {\n        white: '#ffffff',\n        black: '#000000'\n      }\n      const hex = namedColors[color.toLowerCase()]\n      if (hex) {\n        const rgb = hexToRgb(hex)\n        if (rgb) {\n          r = rgb.r\n          g = rgb.g\n          b = rgb.b\n        } else {\n          return false\n        }\n      } else {\n        return false\n      }\n    }\n  } else if (\n    typeof color === 'object' &&\n    'hue' in color &&\n    'saturation' in color &&\n    'brightness' in color\n  ) {\n    const rgb = hsbToRgb(color.hue, color.saturation, color.brightness)\n    r = rgb.r\n    g = rgb.g\n    b = rgb.b\n  } else {\n    return false\n  }\n\n  const lum = luminance(r, g, b)\n  return lum > 0.75\n}\n\nconst defaultColor = parseColor('hsl(216, 98%, 52%)')\ninterface ColorSliderProps extends ColorSliderPrimitiveProps {\n  label?: string\n  description?: string\n  showOutput?: boolean\n}\n\nconst ColorSlider = ({\n  className,\n  showOutput = true,\n  label,\n  description,\n  ...props\n}: ColorSliderProps) => {\n  return (\n    <ColorSliderPrimitive\n      className={cn('flex disabled:opacity-50 w-full flex-col gap-1', className)}\n      {...props}\n    >\n      <div className=\"flex items-center gap-2\">\n        {label && <Label className=\"text-sm [grid-area:label]\">{label}</Label>}\n        {showOutput && <SliderOutput className=\"text-sm ml-auto [grid-area:output]\" />}\n      </div>\n      <SliderTrack className=\"cstrk rounded-md orientation-horizontal:h-8\">\n        <ColorThumb className=\"csth top-1/2\" />\n      </SliderTrack>\n      {description && <Description>{description}</Description>}\n    </ColorSliderPrimitive>\n  )\n}\n\nconst ColorWheel = ColorWheelPrimitive\nconst ColorWheelTrack = ColorWheelTrackPrimitive\nconst ColorSwatchPicker = ColorSwatchPickerPrimitive\n\nexport {\n  ColorArea,\n  ColorSlider,\n  ColorSwatch,\n  ColorSwatchPicker,\n  ColorSwatchPickerItem,\n  ColorThumb,\n  ColorWheel,\n  ColorWheelTrack,\n  defaultColor,\n  isBrightColor\n}\n",
    "type": "ui"
  },
  "multiple-select": {
    "component": "@/components/ui/multiple-select",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconChevronLgDown } from 'justd-icons'\nimport { useFilter } from 'react-aria'\nimport type { ComboBoxProps as ComboBoxPrimitiveProps, Key } from 'react-aria-components'\nimport { ComboBox, Group } from 'react-aria-components'\nimport type { ListData } from 'react-stately'\nimport { useListData } from 'react-stately'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport type { FieldProps } from './field'\nimport { Description, Input, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\nimport { cn } from './primitive'\nimport type { RestrictedIntent, TagGroupProps } from './tag-group'\nimport { Tag } from './tag-group'\nimport { VisuallyHidden } from './visually-hidden'\n\nconst multiSelectStyles = tv({\n  slots: {\n    multiSelectField: 'group flex w-full min-w-80 flex-col gap-1',\n    multiSelect: [\n      'relative px-1 flex min-h-10 flex-row flex-wrap items-center rounded-lg shadow-sm border',\n      'has-[input[data-focused=true]]:border-primary',\n      'has-[input[data-invalid=true][data-focused=true]]:border-danger has-[input[data-invalid=true]]:border-danger has-[input[data-invalid=true]]:ring-danger/20',\n      'has-[input[data-focused=true]]:ring-4 has-[input[data-focused=true]]:ring-primary/20'\n    ],\n    chevronButton:\n      'size-8 -mr-2 grid place-content-center rounded-sm hover:text-fg focus:text-fg text-muted-fg',\n    input: 'flex-1 py-1 px-0.5 ml-1 shadow-none ring-0',\n    comboBoxChild: 'inline-flex flex-1 flex-wrap items-center px-0',\n    comboBox: 'group peer flex flex-1'\n  }\n})\n\nconst { multiSelectField, multiSelect, chevronButton, input, comboBox, comboBoxChild } =\n  multiSelectStyles()\n\ninterface FieldState {\n  selectedKey: Key | null\n  inputValue: string\n}\n\ninterface SelectedKey {\n  id: Key\n  name: string\n}\n\ninterface MultipleSelectProps<T extends object>\n  extends FieldProps,\n    Omit<\n      ComboBoxPrimitiveProps<T>,\n      | 'children'\n      | 'validate'\n      | 'allowsEmptyCollection'\n      | 'selectedKey'\n      | 'inputValue'\n      | 'className'\n      | 'value'\n      | 'onSelectionChange'\n      | 'onInputChange'\n    >,\n    Pick<TagGroupProps, 'shape'> {\n  intent?: RestrictedIntent\n  items: Array<T>\n  selectedItems: ListData<T>\n  className?: string\n  onItemInserted?: (key: Key) => void\n  onItemCleared?: (key: Key) => void\n  renderEmptyState?: (inputValue: string) => React.ReactNode\n  tag: (item: T) => React.ReactNode\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n  max?: number\n  min?: number\n}\n\nconst MultipleSelect = <T extends SelectedKey>({\n  children,\n  items,\n  selectedItems,\n  onItemCleared,\n  onItemInserted,\n  className,\n  name,\n  renderEmptyState,\n  ...props\n}: MultipleSelectProps<T>) => {\n  const [isInvalid, setIsInvalid] = React.useState(false)\n  const tagGroupIdentifier = React.useId()\n  const triggerRef = React.useRef<HTMLDivElement | null>(null)\n  const [width, setWidth] = React.useState(0)\n\n  const { contains } = useFilter({ sensitivity: 'base' })\n  const selectedKeys = selectedItems.items.map((i) => i.id)\n\n  const existingTagCount = selectedItems.items.length\n  const maxTags = props.max !== undefined ? props.max : Infinity\n  const maxTagsToAdd = maxTags - existingTagCount\n\n  const updateInvalidState = (selectedCount: number) => {\n    const maxTags = props.max !== undefined ? props.max : Infinity\n    setIsInvalid(selectedCount >= maxTags)\n  }\n\n  const filter = React.useCallback(\n    (item: T, filterText: string) =>\n      !selectedKeys.includes(item.id) && contains(item.name, filterText),\n    [contains, selectedKeys]\n  )\n\n  const accessibleList = useListData({\n    initialItems: items,\n    filter\n  })\n\n  const [fieldState, setFieldState] = React.useState<FieldState>({\n    selectedKey: null,\n    inputValue: ''\n  })\n\n  const onRemove = React.useCallback(\n    (keys: Set<Key>) => {\n      if (props.min !== undefined && selectedItems.items.length <= props.min) return\n\n      const key = keys.values().next().value\n      selectedItems.remove(key)\n      setFieldState({ inputValue: '', selectedKey: null })\n      onItemCleared?.(key)\n      updateInvalidState(selectedItems.items.length - 1)\n    },\n    [selectedItems, onItemCleared, props.min]\n  )\n\n  const onSelectionChange = (id: Key | null) => {\n    if (!id) return\n\n    const item = accessibleList.getItem(id)\n    const maxTags = props.max !== undefined ? props.max : Infinity\n\n    if (!item) return\n\n    if (!selectedKeys.includes(id)) {\n      if (selectedItems.items.length >= maxTags) {\n        setIsInvalid(true)\n\n        const timeoutId = setTimeout(() => {\n          setIsInvalid(false)\n        }, 2000)\n\n        return () => clearTimeout(timeoutId)\n      }\n\n      selectedItems.append(item)\n      setFieldState({\n        inputValue: '',\n        selectedKey: id\n      })\n      onItemInserted?.(id)\n    }\n\n    accessibleList.setFilterText('')\n  }\n  const onInputChange = (v: string) => {\n    setFieldState((prevState) => ({\n      inputValue: v,\n      selectedKey: v === '' ? null : prevState.selectedKey\n    }))\n\n    accessibleList.setFilterText(v)\n  }\n\n  const popLast = React.useCallback(() => {\n    if (\n      selectedItems.items.length == 0 ||\n      (props.min !== undefined && selectedItems.items.length <= props.min)\n    ) {\n      return\n    }\n\n    const endKey = selectedItems.items[selectedItems.items.length - 1]\n\n    if (endKey !== null) {\n      selectedItems.remove(endKey.id)\n      onItemCleared?.(endKey.id)\n      updateInvalidState(selectedItems.items.length - 1)\n    }\n\n    setFieldState({\n      inputValue: '',\n      selectedKey: null\n    })\n  }, [selectedItems, onItemCleared])\n\n  const onKeyDownCapture = React.useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Backspace' && fieldState.inputValue === '') {\n        popLast()\n      }\n    },\n    [popLast, fieldState.inputValue]\n  )\n\n  React.useEffect(() => {\n    const trigger = triggerRef.current\n    if (!trigger) return\n\n    const observer = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        setWidth(entry.target.clientWidth)\n      }\n    })\n\n    observer.observe(trigger)\n    return () => {\n      observer.unobserve(trigger)\n    }\n  }, [triggerRef])\n\n  const triggerButtonRef = React.useRef<HTMLButtonElement | null>(null)\n\n  return (\n    <div className={multiSelectField({ className })}>\n      {props.label && <Label>{props.label}</Label>}\n      <Group className={props.isDisabled ? 'opacity-50' : ''}>\n        <div ref={triggerRef} className={multiSelect({ className })}>\n          <Tag.Group\n            shape={props.shape}\n            intent={props.intent}\n            aria-label=\"Selected items\"\n            id={tagGroupIdentifier}\n            onRemove={onRemove}\n          >\n            <Tag.List\n              items={selectedItems.items}\n              className={cn(\n                selectedItems.items.length !== 0 && 'px-1 py-1.5',\n                'last:[&_.jdt3lr2x]:-mr-1 outline-none gap-1.5',\n                props.shape === 'square' && '[&_.jdt3lr2x]:rounded-[calc(var(--radius)-4px)]'\n              )}\n            >\n              {props.tag}\n            </Tag.List>\n          </Tag.Group>\n          <ComboBox\n            {...props}\n            isInvalid={isInvalid}\n            aria-label=\"Available items\"\n            allowsEmptyCollection\n            className={comboBox()}\n            items={accessibleList.items}\n            selectedKey={fieldState.selectedKey}\n            inputValue={fieldState.inputValue}\n            onSelectionChange={onSelectionChange}\n            onInputChange={onInputChange}\n          >\n            <div className={comboBoxChild({ className })}>\n              <Input\n                placeholder={maxTagsToAdd <= 0 ? 'Remove one to add more' : props.placeholder}\n                className={input()}\n                onBlur={() => {\n                  setFieldState({\n                    inputValue: '',\n                    selectedKey: null\n                  })\n                  accessibleList.setFilterText('')\n                }}\n                onKeyDownCapture={onKeyDownCapture}\n              />\n\n              <VisuallyHidden>\n                <Button\n                  slot=\"remove\"\n                  aria-label=\"Remove\"\n                  appearance=\"plain\"\n                  size=\"square-petite\"\n                  ref={triggerButtonRef}\n                >\n                  <IconChevronLgDown />\n                </Button>\n              </VisuallyHidden>\n            </div>\n            <Popover.Picker\n              className=\"max-w-none\"\n              style={{ width: `${width}px` }}\n              triggerRef={triggerRef}\n              trigger=\"ComboBox\"\n            >\n              <ListBox.Picker\n                renderEmptyState={() =>\n                  renderEmptyState ? (\n                    renderEmptyState(fieldState.inputValue)\n                  ) : (\n                    <Description className=\"p-3 block\">\n                      {fieldState.inputValue ? (\n                        <>\n                          No results found for:{' '}\n                          <strong className=\"font-medium text-fg\">{fieldState.inputValue}</strong>\n                        </>\n                      ) : (\n                        `No options`\n                      )}\n                    </Description>\n                  )\n                }\n                selectionMode=\"multiple\"\n              >\n                {children}\n              </ListBox.Picker>\n            </Popover.Picker>\n          </ComboBox>\n          <div className=\"relative px-1 ml-auto flex items-center justify-center\" aria-hidden>\n            <button\n              type=\"button\"\n              className={chevronButton()}\n              onClick={() => triggerButtonRef.current?.click()}\n              tabIndex={-1}\n            >\n              <IconChevronLgDown className=\"peer/[data-open]:rotate-180 size-4\" />\n            </button>\n          </div>\n        </div>\n      </Group>\n      {props.description && <Description>{props.description}</Description>}\n      {name && <input hidden name={name} value={selectedKeys.join(',')} readOnly />}\n    </div>\n  )\n}\n\nMultipleSelect.Option = ListBox.Item\n\nexport { MultipleSelect, type SelectedKey }\n",
    "type": "ui"
  },
  "dropdown": {
    "component": "@/components/ui/dropdown",
    "raw": "'use client'\n\nimport { IconCheck } from 'justd-icons'\nimport {\n  Collection,\n  composeRenderProps,\n  Header,\n  ListBoxItem as ListBoxItemPrimitive,\n  type ListBoxItemProps,\n  Section,\n  type SectionProps,\n  Text,\n  type TextProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst dropdownItemStyles = tv({\n  base: [\n    'group flex cursor-default select-none items-center gap-x-1.5 rounded-md py-2 pl-2.5 pr-1 text-base outline outline-0 forced-color-adjust-none lg:text-sm',\n    '[&_[data-slot=avatar]]:-mr-0.5 [&_[data-slot=avatar]]:size-6 sm:[&_[data-slot=avatar]]:size-5',\n    '[&_[data-slot=icon]]:size-4',\n    'has-submenu:open:data-[danger=true]:bg-danger/20 has-submenu:open:data-[danger=true]:text-danger',\n    'has-submenu:open:bg-primary has-submenu:open:text-primary-fg'\n  ],\n  variants: {\n    isDisabled: {\n      false: 'text-fg',\n      true: 'text-muted-fg forced-colors:text-[GrayText]'\n    },\n    isFocused: {\n      false: 'data-[danger=true]:text-danger',\n      true: [\n        'bg-primary text-primary-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]',\n        'data-[danger=true]:bg-danger data-[danger=true]:text-danger-fg',\n        '[&_.text-muted-fg]:text-primary-fg/80 [&[data-slot=label]]:text-primary-fg [&[data-slot=description]]:text-primary-fg'\n      ]\n    }\n  },\n  compoundVariants: [\n    {\n      isFocused: false,\n      isOpen: true,\n      className: 'bg-zinc-100 dark:bg-zinc-700/60'\n    }\n  ]\n})\n\ninterface DropdownSectionProps<T> extends SectionProps<T> {\n  title?: string\n}\n\nconst dropdownSectionStyles = tv({\n  slots: {\n    base: \"first:-mt-[5px] xss3 after:content-[''] after:block after:h-[5px]\",\n    header:\n      'text-sm font-medium text-muted-fg bg-tertiary px-4 py-2 truncate min-w-[--trigger-width] sticky -top-[5px] backdrop-blur -mt-px -mx-1 z-10 supports-[-moz-appearance:none]:bg-tertiary border-y [&+*]:mt-1'\n  }\n})\n\nconst { base, header } = dropdownSectionStyles()\n\nconst DropdownSection = <T extends object>({ className, ...props }: DropdownSectionProps<T>) => {\n  return (\n    <Section className={base(className)}>\n      {'title' in props && <Header className={header()}>{props.title}</Header>}\n      <Collection items={props.items}>{props.children}</Collection>\n    </Section>\n  )\n}\n\nconst DropdownItem = ({ className, ...props }: ListBoxItemProps) => {\n  const textValue =\n    props.textValue || (typeof props.children === 'string' ? props.children : undefined)\n  return (\n    <ListBoxItemPrimitive\n      textValue={textValue}\n      className={composeRenderProps(className, (className, renderProps) =>\n        dropdownItemStyles({ ...renderProps, className })\n      )}\n      {...props}\n    >\n      {composeRenderProps(props.children, (children, { isSelected }) => (\n        <>\n          <span className=\"flex flex-1 items-center gap-2 truncate font-normal group-selected:font-medium\">\n            {children}\n          </span>\n          <span className=\"flex w-5 items-center\">\n            {isSelected && <IconCheck className=\"h-4 w-4\" />}\n          </span>\n        </>\n      ))}\n    </ListBoxItemPrimitive>\n  )\n}\n\ninterface DropdownItemSlot extends TextProps {\n  label?: TextProps['children']\n  description?: TextProps['children']\n}\n\nconst DropdownItemDetails = ({ label, description, ...props }: DropdownItemSlot) => {\n  return (\n    <div className=\"flex flex-col gap-1\">\n      <Text slot=\"label\" className=\"font-medium lg:text-sm\" {...props}>\n        {label}\n      </Text>\n      <Text slot=\"description\" className=\"text-muted-fg text-xs\" {...props}>\n        {description}\n      </Text>\n    </div>\n  )\n}\n\n// Note: This is not exposed component, but it's used in other components to render dropdowns.\nexport {\n  DropdownItem,\n  dropdownItemStyles,\n  DropdownItemDetails,\n  DropdownSection,\n  type DropdownSectionProps\n}\n",
    "type": "ui"
  },
  "avatar": {
    "component": "@/components/ui/avatar",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { VisuallyHidden } from './visually-hidden'\n\nconst avatarGroupStyles = tv({\n  base: 'flex items-center justify-center -space-x-2 [&_[data-slot=avatar]]:ring-2 [&_[data-slot=avatar]]:ring-background'\n})\n\ninterface AvatarGroupProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof avatarGroupStyles> {\n  children: React.ReactNode\n}\n\nconst AvatarGroup = ({ className, ...props }: AvatarGroupProps) => {\n  return <div className={avatarGroupStyles({ className })} {...props} />\n}\n\nconst avatarStyles = tv({\n  base: [\n    'inline-grid relative shrink-0 bg-secondary align-middle [--avatar-radius:20%] [--ring-opacity:20%] *:col-start-1 *:row-start-1',\n    'loo2ppvkxrcah38e outline outline-1 -outline-offset-1 outline-black/[--ring-opacity] dark:outline-white/[--ring-opacity]'\n  ],\n  variants: {\n    size: {\n      small: 'size-6',\n      medium: 'size-8',\n      large: 'size-10'\n    },\n    shape: {\n      square:\n        'rounded-[--avatar-radius] *:rounded-[--avatar-radius] [&_[data-slot=badge]]:rounded-full',\n      circle: 'rounded-full *:rounded-full'\n    }\n  },\n\n  defaultVariants: {\n    shape: 'circle',\n    size: 'medium'\n  }\n})\n\ntype Status = 'away' | 'online' | 'offline' | 'dnd' | 'idle'\n\ninterface AvatarProps\n  extends React.ComponentPropsWithoutRef<'span'>,\n    VariantProps<typeof avatarStyles> {\n  src?: string | null\n  initials?: string\n  alt?: string\n  status?: Status\n  className?: string\n  role?: string\n}\n\nconst Avatar = ({\n  status,\n  src = null,\n  initials,\n  alt = '',\n  children,\n  className,\n  shape,\n  size,\n  role = 'avatar',\n  ...props\n}: AvatarProps) => {\n  const badgeId = React.useId()\n  const ariaLabelledby = [badgeId, children ? badgeId : ''].join(' ')\n  return (\n    <span\n      aria-labelledby={ariaLabelledby}\n      role={role}\n      data-slot=\"avatar\"\n      {...props}\n      className={avatarStyles({ shape, size, className })}\n    >\n      {initials && (\n        <svg\n          className=\"select-none fill-current text-[48px] font-medium uppercase\"\n          viewBox=\"0 0 100 100\"\n          aria-hidden={alt ? undefined : 'true'}\n        >\n          {alt && <title>{alt}</title>}\n          <text\n            x=\"50%\"\n            y=\"50%\"\n            alignmentBaseline=\"middle\"\n            dominantBaseline=\"middle\"\n            textAnchor=\"middle\"\n            dy=\".125em\"\n          >\n            {initials}\n          </text>\n        </svg>\n      )}\n      {src && <img src={src} alt={alt} />}\n      {status && <AvatarBadge size={size} status={status} aria-label={status} />}\n    </span>\n  )\n}\n\ntype AvatarBadgeProps = {\n  className?: string\n  status?: Status\n  fillBackground?: boolean\n  'aria-label': string\n  size?: AvatarProps['size']\n}\n\nconst avatarBadgeStyles = tv({\n  base: [\n    'size-3 z-1 absolute bottom-0 right-0 z-10 rounded-full ring-[1.5px] ring-background bg-background'\n  ],\n  variants: {\n    size: {\n      small: 'size-1.5 translate-x-[0%] translate-y-[0%]',\n      medium: 'size-2 translate-x-[5%] translate-y-[5%]',\n      large: 'size-2.5 translate-x-[5%] translate-y-[5%]'\n    },\n    status: {\n      away: 'bg-red-500',\n      online: 'bg-green-500',\n      offline: 'bg-gray-500',\n      dnd: 'bg-yellow-500',\n      idle: 'bg-gray-500'\n    }\n  },\n  defaultVariants: {\n    size: 'medium',\n    status: 'idle'\n  }\n})\n\nconst AvatarBadge = ({ size, className, status, ...props }: AvatarBadgeProps) => {\n  return (\n    <span\n      data-slot=\"badge\"\n      {...props}\n      aria-hidden\n      className={avatarBadgeStyles({ size, status, className })}\n    >\n      <VisuallyHidden>{status}</VisuallyHidden>\n    </span>\n  )\n}\n\nexport { Avatar, AvatarGroup }\n",
    "type": "ui"
  },
  "range-calendar": {
    "component": "@/components/ui/range-calendar",
    "raw": "'use client'\n\nimport type {\n  DateValue,\n  RangeCalendarProps as RangeCalendarPrimitiveProps\n} from 'react-aria-components'\nimport {\n  CalendarCell,\n  CalendarGrid,\n  CalendarGridBody,\n  RangeCalendar as RangeCalendarPrimitive,\n  Text\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { Calendar } from './calendar'\nimport { ctr, focusRing } from './primitive'\n\nconst cellRangeStyles = tv({\n  extend: focusRing,\n  base: 'flex h-full w-full items-center font-medium justify-center rounded-md forced-color-adjust-none',\n  variants: {\n    selectionState: {\n      none: 'group-hover:bg-gray-100 group-pressed:bg-gray-200 dark:group-hover:bg-zinc-700 dark:group-pressed:bg-zinc-600 forced-colors:group-pressed:bg-[Highlight]',\n      middle: [\n        'group-hover:bg-primary-200 dark:group-hover:bg-primary-900 forced-colors:group-hover:bg-[Highlight]',\n        'group-invalid:group-hover:bg-red-200 dark:group-invalid:group-hover:bg-red-900 forced-colors:group-invalid:group-hover:bg-[Mark]',\n        'group-pressed:bg-primary-300 dark:group-pressed:bg-primary-800 forced-colors:text-[HighlightText] forced-colors:group-pressed:bg-[Highlight]',\n        'group-invalid:group-pressed:bg-red-300 dark:group-invalid:group-pressed:bg-red-800 forced-colors:group-invalid:group-pressed:bg-[Mark]'\n      ],\n      cap: 'bg-primary text-primary-fg group-invalid:bg-danger group-invalid:text-danger-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText] forced-colors:group-invalid:bg-[Mark]'\n    },\n    isDisabled: {\n      true: 'text-gray-300 dark:text-zinc-600 forced-colors:text-[GrayText]'\n    }\n  }\n})\n\ninterface RangeCalendarProps<T extends DateValue>\n  extends Omit<RangeCalendarPrimitiveProps<T>, 'visibleDuration'> {\n  errorMessage?: string\n}\n\nconst RangeCalendar = <T extends DateValue>({\n  errorMessage,\n  className,\n  ...props\n}: RangeCalendarProps<T>) => {\n  return (\n    <RangeCalendarPrimitive\n      className={ctr(className, 'max-w-[17.5rem] sm:max-w-[15.8rem]')}\n      {...props}\n    >\n      <Calendar.Header />\n      <CalendarGrid className=\"[&_td]:border-collapse [&_td]:px-0\">\n        <Calendar.GridHeader />\n        <CalendarGridBody>\n          {(date) => (\n            <CalendarCell\n              date={date}\n              className={twJoin([\n                'group size-10 lg:size-9 cursor-default lg:text-sm outline outline-0 outside-month:text-zinc-300 selection-start:rounded-s-md selection-end:rounded-e-md forced-colors:selected:bg-[Highlight] forced-colors:invalid:selected:bg-[Mark]',\n                'selected:bg-primary/10 dark:selected:bg-primary/20 selected:text-primary forced-colors:selected:text-[HighlightText]',\n                '[td:first-child_&]:rounded-s-md [td:last-child_&]:rounded-e-md',\n                'invalid:selected:bg-red-100 dark:invalid:selected:bg-red-700/30'\n              ])}\n            >\n              {({\n                formattedDate,\n                isSelected,\n                isSelectionStart,\n                isSelectionEnd,\n                ...renderProps\n              }) => (\n                <span\n                  className={cellRangeStyles({\n                    ...renderProps,\n                    selectionState:\n                      isSelected && (isSelectionStart || isSelectionEnd)\n                        ? 'cap'\n                        : isSelected\n                          ? 'middle'\n                          : 'none'\n                  })}\n                >\n                  {formattedDate}\n                </span>\n              )}\n            </CalendarCell>\n          )}\n        </CalendarGridBody>\n      </CalendarGrid>\n      {errorMessage && (\n        <Text slot=\"errorMessage\" className=\"text-sm text-danger\">\n          {errorMessage}\n        </Text>\n      )}\n    </RangeCalendarPrimitive>\n  )\n}\n\nexport { RangeCalendar }\n",
    "type": "ui"
  },
  "combo-box": {
    "component": "@/components/ui/combo-box",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronLgDown, IconX } from 'justd-icons'\nimport type { InputProps } from 'react-aria-components'\nimport {\n  ComboBox as ComboboxPrimitive,\n  ComboBoxContext,\n  type ComboBoxProps as ComboboxPrimitiveProps,\n  ComboBoxStateContext,\n  type PopoverProps as PopoverPrimitiveProps,\n  useSlottedContext,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button, ButtonPrimitive } from './button'\nimport { DropdownItem, DropdownSection } from './dropdown'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\nimport { ctr } from './primitive'\n\nconst comboboxStyles = tv({\n  slots: {\n    base: 'group w-full flex flex-col gap-1',\n    chevronButton:\n      'h-7 w-8 [&_[data-slot=icon]]:text-muted-fg hover:[&_[data-slot=icon]]:text-fg pressed:[&_[data-slot=icon]]:text-fg rounded outline-offset-0 active:bg-transparent hover:bg-transparent pressed:bg-transparent',\n    chevronIcon: 'transition duration-200 group-open:rotate-180 group-open:text-fg',\n    clearButton:\n      'focus:outline-none absolute inset-y-0 right-0 flex items-center pr-2 text-muted-fg hover:text-fg'\n  }\n})\n\nconst { base, chevronButton, chevronIcon, clearButton } = comboboxStyles()\n\ninterface ComboBoxProps<T extends object> extends Omit<ComboboxPrimitiveProps<T>, 'children'> {\n  label?: string\n  placeholder?: string\n  description?: string | null\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  children: React.ReactNode\n}\n\nconst ComboBox = <T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  className,\n  ...props\n}: ComboBoxProps<T>) => {\n  return (\n    <ComboboxPrimitive {...props} className={ctr(className, base())}>\n      <Label>{label}</Label>\n      <>{children}</>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </ComboboxPrimitive>\n  )\n}\n\ninterface ListBoxPickerProps<T extends object> extends React.ComponentProps<typeof ListBox<T>> {}\n\ninterface ComboBoxListProps<T extends object>\n  extends ListBoxPickerProps<T>,\n    Omit<PopoverPrimitiveProps, 'children' | 'className' | 'style'> {}\n\nconst ComboBoxList = <T extends object>({ children, items, ...props }: ComboBoxListProps<T>) => {\n  return (\n    <Popover.Picker trigger=\"ComboBox\" isNonModal placement={props.placement}>\n      <ListBox.Picker items={items} {...props}>\n        {children}\n      </ListBox.Picker>\n    </Popover.Picker>\n  )\n}\n\ninterface ComboBoxInputProps extends InputProps {}\n\nconst ComboBoxInput = (props: ComboBoxInputProps) => {\n  const context = useSlottedContext(ComboBoxContext)!\n  return (\n    <FieldGroup className=\"pl-0 relative\">\n      <Input {...props} className=\"pl-2.5\" placeholder={props?.placeholder} />\n      <Button size=\"square-petite\" appearance=\"plain\" className={chevronButton()}>\n        {!context?.inputValue && <IconChevronLgDown className={chevronIcon()} />}\n      </Button>\n      {context?.inputValue && <ComboBoxClearButton />}\n    </FieldGroup>\n  )\n}\n\nconst ComboBoxClearButton = () => {\n  const state = React.useContext(ComboBoxStateContext)\n\n  return (\n    <ButtonPrimitive\n      className={clearButton()}\n      slot={null}\n      aria-label=\"Clear\"\n      onPress={() => {\n        state?.setSelectedKey(null)\n        state?.open()\n      }}\n    >\n      <IconX className=\"size-4 animate-in\" />\n    </ButtonPrimitive>\n  )\n}\n\nComboBox.Input = ComboBoxInput\nComboBox.List = ComboBoxList\nComboBox.Option = DropdownItem\nComboBox.Section = DropdownSection\n\nexport { ComboBox, type ComboBoxProps }\n",
    "type": "ui"
  },
  "search-field": {
    "component": "@/components/ui/search-field",
    "raw": "'use client'\n\nimport { IconSearch, IconX } from 'justd-icons'\nimport {\n  SearchField as SearchFieldPrimitive,\n  type SearchFieldProps as SearchFieldPrimitiveProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ctr } from './primitive'\n\nconst searchFieldStyles = tv({\n  slots: {\n    base: 'group flex min-w-10 flex-col gap-1',\n    searchIcon:\n      'ml-2 size-4 shrink-0 text-muted-fg group-disabled:text-muted-fg/50 forced-colors:text-[ButtonText] forced-colors:group-disabled:text-[GrayText]',\n    closeButton:\n      'mr-1 size-8 text-muted-fg group-empty:invisible hover:bg-transparent pressed:text-fg',\n    input: '[&::-webkit-search-cancel-button]:hidden'\n  }\n})\n\nconst { base, searchIcon, closeButton, input } = searchFieldStyles()\n\ninterface SearchFieldProps extends SearchFieldPrimitiveProps {\n  label?: string\n  placeholder?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst SearchField = ({\n  className,\n  placeholder = 'Search',\n  label,\n  description,\n  errorMessage,\n  ...props\n}: SearchFieldProps) => {\n  return (\n    <SearchFieldPrimitive {...props} className={ctr(className, base())}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup>\n        <IconSearch aria-hidden className={searchIcon()} />\n        <Input placeholder={placeholder} className={input()} />\n        <Button size=\"square-petite\" appearance=\"plain\" className={closeButton()}>\n          <IconX aria-hidden className=\"size-4\" />\n        </Button>\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </SearchFieldPrimitive>\n  )\n}\n\nexport { SearchField, type SearchFieldProps }\n",
    "type": "ui"
  },
  "dialog": {
    "component": "@/components/ui/dialog",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconX } from 'justd-icons'\nimport {\n  Dialog as DialogPrimitive,\n  type DialogProps as DialogPrimitiveProps,\n  OverlayTriggerStateContext\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport type { ButtonProps } from './button'\nimport { Button } from './button'\nimport type { HeadingProps } from './heading'\nimport { Heading } from './heading'\nimport { useMediaQuery } from './primitive'\n\nconst dialogStyles = tv({\n  slots: {\n    root: [\n      'dlc relative flex max-h-[inherit] [&::-webkit-scrollbar]:size-0.5 [scrollbar-width:thin] flex-col overflow-hidden outline-none',\n      'sm:[&:not(:has([data-slot=dialog-body]))]:px-6 sm:[&:has([data-slot=dialog-body])_[data-slot=dialog-header]]:px-6 sm:[&:has([data-slot=dialog-body])_[data-slot=dialog-footer]]:px-6',\n      '[&:not(:has([data-slot=dialog-body]))]:px-4 [&:has([data-slot=dialog-body])_[data-slot=dialog-header]]:px-4 [&:has([data-slot=dialog-body])_[data-slot=dialog-footer]]:px-4'\n    ],\n    header: 'relative flex flex-col pb-3 pt-4 sm:pt-6',\n    title: 'flex flex-1 items-center',\n    description: 'text-sm block text-muted-fg mt-0.5 sm:mt-1',\n    body: [\n      'flex flex-1 flex-col gap-2 overflow-auto px-4 sm:px-6 py-1',\n      'max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding)-var(--dialog-header-height,0px)-var(--dialog-footer-height,0px))]'\n    ],\n    footer: 'mt-auto flex flex-col-reverse justify-between gap-3 pb-4 sm:pb-6 pt-4 sm:flex-row',\n    closeIndicator: 'close absolute right-2 top-2 size-6 z-50'\n  }\n})\n\nconst { root, header, title, description, body, footer, closeIndicator } = dialogStyles()\n\nconst Dialog = ({ role, className, ...props }: DialogPrimitiveProps) => {\n  return <DialogPrimitive {...props} role={role ?? 'dialog'} className={root({ className })} />\n}\n\ninterface DialogHeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n  title?: string\n  description?: string\n}\n\nconst DialogHeader = ({ className, ...props }: DialogHeaderProps) => {\n  const headerRef = React.useRef<HTMLHeadingElement>(null)\n\n  React.useEffect(() => {\n    const header = headerRef.current\n    if (!header) {\n      return\n    }\n\n    const observer = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        header.parentElement?.style.setProperty(\n          '--dialog-header-height',\n          `${entry.target.clientHeight}px`\n        )\n      }\n    })\n\n    observer.observe(header)\n    return () => observer.unobserve(header)\n  }, [])\n\n  return (\n    <div data-slot=\"dialog-header\" ref={headerRef} className={header({ className })}>\n      {props.title && <DialogTitle>{props.title}</DialogTitle>}\n      {props.description && <DialogDescription>{props.description}</DialogDescription>}\n      {!props.title && typeof props.children === 'string' ? (\n        <DialogTitle {...props} />\n      ) : (\n        props.children\n      )}\n    </div>\n  )\n}\n\ninterface DialogTitleProps extends HeadingProps {\n  className?: string\n}\n\nconst DialogTitle = ({ tracking = 'tight', level = 2, className, ...props }: DialogTitleProps) => (\n  <Heading\n    slot=\"title\"\n    tracking={tracking}\n    level={level}\n    className={title({ className })}\n    {...props}\n  />\n)\n\nconst DialogDescription = ({ className, ...props }: HeadingProps) => (\n  <p className={description({ className })} {...props} />\n)\n\nconst DialogBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div data-slot=\"dialog-body\" className={body({ className })} {...props} />\n)\n\nconst DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  const footerRef = React.useRef<HTMLDivElement>(null)\n\n  React.useEffect(() => {\n    const footer = footerRef.current\n\n    if (!footer) {\n      return\n    }\n\n    const observer = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        footer.parentElement?.style.setProperty(\n          '--dialog-footer-height',\n          `${entry.target.clientHeight}px`\n        )\n      }\n    })\n\n    observer.observe(footer)\n    return () => {\n      observer.unobserve(footer)\n    }\n  }, [])\n  return (\n    <div ref={footerRef} data-slot=\"dialog-footer\" className={footer({ className })} {...props} />\n  )\n}\n\nconst DialogClose = ({ className, ...props }: ButtonProps) => {\n  const state = React.useContext(OverlayTriggerStateContext)!\n  return (\n    <Button className={className} appearance=\"outline\" onPress={() => state.close()} {...props} />\n  )\n}\n\ninterface CloseButtonIndicatorProps {\n  className?: string\n  close: () => void\n  isDismissable?: boolean | undefined\n}\n\nconst DialogCloseIndicator = ({ className, ...props }: CloseButtonIndicatorProps) => {\n  const isMobile = useMediaQuery('(max-width: 600px)')\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n  React.useEffect(() => {\n    if (isMobile && buttonRef.current) {\n      buttonRef.current.focus()\n    }\n  }, [isMobile])\n  return props.isDismissable ? (\n    <Button\n      ref={buttonRef}\n      {...(isMobile ? { autoFocus: true } : {})}\n      appearance=\"plain\"\n      size=\"square-petite\"\n      aria-label=\"Close\"\n      onPress={props.close}\n      className={closeIndicator({ className })}\n    >\n      <IconX className=\"size-4\" />\n    </Button>\n  ) : null\n}\n\nDialog.Header = DialogHeader\nDialog.Title = DialogTitle\nDialog.Description = DialogDescription\nDialog.Body = DialogBody\nDialog.Footer = DialogFooter\nDialog.Close = DialogClose\nDialog.CloseIndicator = DialogCloseIndicator\n\nexport { Dialog }\n",
    "type": "ui"
  },
  "menu": {
    "component": "@/components/ui/menu",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconBulletFill, IconCheck, IconChevronLgRight } from 'justd-icons'\nimport type {\n  ButtonProps,\n  MenuItemProps as MenuItemPrimitiveProps,\n  MenuProps as MenuPrimitiveProps,\n  MenuTriggerProps as MenuTriggerPrimitiveProps,\n  PopoverProps,\n  SeparatorProps\n} from 'react-aria-components'\nimport {\n  Button,\n  composeRenderProps,\n  Header,\n  Menu as MenuPrimitive,\n  MenuItem as MenuItemPrimitive,\n  MenuTrigger as MenuTriggerPrimitive,\n  Separator,\n  SubmenuTrigger as SubmenuTriggerPrimitive\n} from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { DropdownItemDetails, dropdownItemStyles, DropdownSection } from './dropdown'\nimport { Keyboard } from './keyboard'\nimport { Popover } from './popover'\nimport { cn } from './primitive'\n\ninterface MenuContextProps {\n  respectScreen: boolean\n}\n\nconst MenuContext = React.createContext<MenuContextProps>({ respectScreen: true })\n\nexport const useMenuContext = () => React.useContext(MenuContext)\n\ninterface MenuProps extends MenuTriggerPrimitiveProps {\n  respectScreen?: boolean\n}\n\nconst Menu = ({ respectScreen = true, ...props }: MenuProps) => {\n  return (\n    <MenuContext.Provider value={{ respectScreen }}>\n      <MenuTriggerPrimitive {...props}>\n        <>{props.children}</>\n      </MenuTriggerPrimitive>\n    </MenuContext.Provider>\n  )\n}\n\nconst SubMenu = ({ delay = 0, ...props }) => (\n  <SubmenuTriggerPrimitive {...props} delay={delay}>\n    {props.children}\n  </SubmenuTriggerPrimitive>\n)\n\nconst menuStyles = tv({\n  slots: {\n    menu: 'z32kk max-h-[calc(var(--visual-viewport-height)-10rem)] sm:max-h-[inherit] overflow-auto rounded-xl p-1 outline outline-0 [clip-path:inset(0_0_0_0_round_calc(var(--radius)-2px))]',\n    popover: 'z-50 min-w-40 p-0 outline-none shadow-sm',\n    trigger:\n      'inline text-left focus:outline-none focus-visible:ring-1 focus-visible:ring-primary-500 pressed:outline-none'\n  }\n})\n\nconst { menu, popover, trigger } = menuStyles()\n\ninterface MenuTriggerProps extends ButtonProps {\n  className?: string\n}\n\nconst MenuTrigger = ({ className, ...props }: MenuTriggerProps) => (\n  <Button className={trigger({ className })} {...props} />\n)\n\ninterface MenuContentProps<T>\n  extends Omit<PopoverProps, 'children' | 'style'>,\n    MenuPrimitiveProps<T> {\n  className?: string\n  popoverClassName?: string\n  showArrow?: boolean\n  respectScreen?: boolean\n}\n\nconst MenuContent = <T extends object>({\n  className,\n  showArrow = false,\n  popoverClassName,\n  offset = 4,\n  ...props\n}: MenuContentProps<T>) => {\n  const { respectScreen } = useMenuContext()\n  return (\n    <Popover.Content\n      respectScreen={respectScreen}\n      showArrow={showArrow}\n      className={popover({ className: popoverClassName })}\n      {...props}\n    >\n      <MenuPrimitive className={menu({ className })} {...props} />\n    </Popover.Content>\n  )\n}\n\ninterface MenuItemProps\n  extends Omit<MenuItemPrimitiveProps, 'isDanger'>,\n    VariantProps<typeof dropdownItemStyles> {\n  isDanger?: boolean\n}\n\nconst MenuItem = ({ className, isDanger = false, children, ...props }: MenuItemProps) => {\n  const textValue = props.textValue || (typeof children === 'string' ? children : undefined)\n  return (\n    <MenuItemPrimitive\n      textValue={textValue}\n      className={composeRenderProps(className, (className, renderProps) =>\n        dropdownItemStyles({\n          ...renderProps,\n          className\n        })\n      )}\n      data-danger={isDanger ? 'true' : undefined}\n      {...props}\n    >\n      {(values) => (\n        <>\n          {typeof children === 'function' ? children(values) : children}\n          {values.hasSubmenu && <IconChevronLgRight className=\"gpfw ml-auto size-3.5\" />}\n        </>\n      )}\n    </MenuItemPrimitive>\n  )\n}\n\nexport interface MenuHeaderProps extends React.ComponentProps<typeof Header> {\n  inset?: boolean\n  separator?: boolean\n}\n\nconst MenuHeader = ({ className, inset, separator = false, ...props }: MenuHeaderProps) => (\n  <Header\n    className={cn(\n      'p-2 text-base font-semibold sm:text-sm',\n      separator && '-mx-1 border-b border-b-border px-3 pb-[0.625rem]',\n      className\n    )}\n    {...props}\n  />\n)\n\nconst MenuSeparator = ({ className, ...props }: SeparatorProps) => (\n  <Separator className={cn('-mx-1 my-1 h-px ms bg-muted', className)} {...props} />\n)\n\nconst MenuKeyboard = Keyboard\n\nconst MenuCheckbox = ({ className, children, ...props }: MenuItemProps) => (\n  <MenuItem className={cn('pl-8', className)} {...props}>\n    {(values) => (\n      <>\n        {values.isSelected && (\n          <span className=\"absolute left-2.5 flex size-4 items-center animate-in justify-center\">\n            <IconCheck className=\"size-4\" />\n          </span>\n        )}\n\n        {typeof children === 'function' ? children(values) : children}\n      </>\n    )}\n  </MenuItem>\n)\n\nconst MenuRadio = ({ className, children, ...props }: MenuItemProps) => (\n  <MenuItem className={cn('pl-8', className)} {...props}>\n    {(values) => (\n      <>\n        {values.isSelected && (\n          <span className=\"absolute left-3.5 flex size-[0.650rem] items-center animate-in justify-center\">\n            <IconBulletFill className=\"size-[0.650rem]\" />\n          </span>\n        )}\n\n        {typeof children === 'function' ? children(values) : children}\n      </>\n    )}\n  </MenuItem>\n)\n\nMenu.Checkbox = MenuCheckbox\nMenu.Content = MenuContent\nMenu.Header = MenuHeader\nMenu.Item = MenuItem\nMenu.Content = MenuContent\nMenu.Keyboard = MenuKeyboard\nMenu.ItemPrimitive = MenuItemPrimitive\nMenu.Keyboard = MenuKeyboard\nMenu.Primitive = MenuPrimitive\nMenu.Radio = MenuRadio\nMenu.Section = DropdownSection\nMenu.Separator = MenuSeparator\nMenu.Trigger = MenuTrigger\nMenu.ItemDetails = DropdownItemDetails\nMenu.Submenu = SubMenu\n\nexport { Menu, type MenuItemProps, type MenuContentProps }\n",
    "type": "ui"
  },
  "progress-bar": {
    "component": "@/components/ui/progress-bar",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { motion } from 'framer-motion'\nimport {\n  ProgressBar as ProgressBarPrimitive,\n  type ProgressBarProps as ProgressBarPrimitiveProps\n} from 'react-aria-components'\n\nimport { Label } from './field'\nimport { ctr } from './primitive'\n\ninterface ProgressBarProps extends ProgressBarPrimitiveProps {\n  label?: string\n}\n\nconst ProgressBar = ({ label, ...props }: ProgressBarProps) => {\n  return (\n    <ProgressBarPrimitive {...props} className={ctr(props.className, 'flex flex-col gap-1')}>\n      {({ percentage, valueText, isIndeterminate }) => (\n        <>\n          <div className=\"flex justify-between gap-2\">\n            <Label>{label}</Label>\n            <span className=\"text-sm text-muted-fg\">{valueText}</span>\n          </div>\n          <div className=\"relative h-2 min-w-64 overflow-hidden rounded-full bg-secondary outline outline-1 -outline-offset-1 outline-transparent\">\n            {!isIndeterminate ? (\n              <motion.div\n                className=\"absolute left-0 top-0 h-full rounded-full bg-primary forced-colors:bg-[Highlight]\"\n                initial={{ width: '0%' }}\n                animate={{ width: `${percentage}%` }}\n                transition={{ duration: 0.5, ease: 'easeInOut' }}\n              />\n            ) : (\n              <motion.div\n                className=\"absolute top-0 h-full rounded-full bg-primary forced-colors:bg-[Highlight]\"\n                initial={{ left: '0%', width: '40%' }}\n                animate={{ left: ['0%', '100%', '0%'] }}\n                transition={{\n                  repeat: Infinity,\n                  duration: 2,\n                  ease: 'easeInOut'\n                }}\n              />\n            )}\n          </div>\n        </>\n      )}\n    </ProgressBarPrimitive>\n  )\n}\n\nexport { ProgressBar, type ProgressBarProps }\n",
    "type": "ui"
  },
  "badge": {
    "component": "@/components/ui/badge",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst badgeIntents = {\n  primary:\n    'ring-primary/30 bg-primary/10 dark:bg-primary/20 text-primary dark:text-primary-300 hover:bg-primary/15 dark:hover:bg-primary/10',\n  secondary: 'bg-secondary/50 dark:bg-secondary/70 ring-secondary-fg/20 text-secondary-fg',\n  success:\n    'dark:ring-success/30 ring-success/40 bg-success/10 dark:bg-success/15 text-success hover:bg-success/15 dark:hover:bg-success/10',\n  info: 'dark:ring-info/30 ring-info/80 bg-info/20 dark:bg-info/15 text-info-fg dark:text-info hover:bg-info/15 dark:hover:bg-info/10',\n  warning:\n    'dark:ring-warning/40 ring-warning/50 bg-warning/10 dark:bg-warning/15 text-warning-fg dark:text-warning hover:bg-warning/15 dark:hover:bg-warning/10',\n  danger:\n    'dark:ring-danger/30 ring-danger/40 bg-danger/10 dark:bg-danger/15 text-danger hover:bg-danger/15 dark:hover:bg-danger/10',\n  light:\n    'ring-zinc-300 dark:ring-white bg-white hover:bg-zinc-100 dark:hover:bg-zinc-200 dark:ring-inset text-zinc-900 dark:text-zinc-900',\n  dark: 'bg-zinc-800 hover:bg-zinc-800/90 ring-inset ring-zinc-800 text-white dark:ring-zinc-600'\n}\nconst badgeShapes = {\n  square: 'rounded-md px-1.5',\n  circle: 'px-2 rounded-full'\n}\nconst badgeStyles = tv({\n  base: 'inline-flex items-center gap-x-1.5 py-0.5 text-xs/5 font-medium ring-1 ring-white/10 dark:ring-inset forced-colors:outline [&_[data-slot=icon]]:size-3',\n  variants: {\n    intent: { ...badgeIntents },\n    shape: { ...badgeShapes }\n  },\n  defaultVariants: {\n    intent: 'primary',\n    shape: 'square'\n  }\n})\n\ninterface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeStyles> {\n  className?: string\n  children: React.ReactNode\n}\n\nconst Badge = ({ children, intent, shape, className, ...props }: BadgeProps) => {\n  return (\n    <span {...props} className={badgeStyles({ intent, shape, className })}>\n      {children}\n    </span>\n  )\n}\n\nexport { Badge, badgeIntents, badgeStyles, badgeShapes }\n",
    "type": "ui"
  },
  "color-picker": {
    "component": "@/components/ui/color-picker",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  ColorPicker as ColorPickerPrimitive,\n  type ColorPickerProps as ColorPickerPrimitiveProps,\n  type ColorSpace,\n  getColorChannels,\n  Group\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport tailwindColors from 'tailwindcss/colors'\n\nimport { Button, ButtonPrimitive } from './button'\nimport {\n  ColorArea,\n  ColorSlider,\n  ColorSwatch,\n  ColorSwatchPicker,\n  ColorSwatchPickerItem,\n  ColorThumb,\n  defaultColor\n} from './color'\nimport { ColorField } from './color-field'\nimport { Description, Label } from './field'\nimport { Popover } from './popover'\nimport { Select } from './select'\n\nconst colorPickerStyles = tv({\n  slots: {\n    base: 'flex w-full flex-col gap-1',\n    triggerColorField:\n      'size-10 -mr-2.5 tcf bg-background grid place-content-center focus:outline-none',\n    triggerColorPicker: 'w-full hover:bg-tertiary tcp max-w-sm bg-background justify-start',\n    colorArea: 'w-full',\n    colorSlider: '[&_.cstrk]:orientation-horizontal:h-3',\n    colorSwatchPicker: 'flex flex-wrap gap-x-2 gap-y-2.5'\n  }\n})\n\nconst { base, triggerColorField, triggerColorPicker, colorArea, colorSlider, colorSwatchPicker } =\n  colorPickerStyles()\n\ninterface ColorPickerProps extends ColorPickerPrimitiveProps {\n  space?: ColorSpace\n  enableColorSwatch?: boolean\n  enableColorFormatSelection?: boolean\n  isHex?: boolean\n  label?: string\n  description?: string\n  errorMessage?: string\n  placeholder?: string\n  colors?: string[]\n  isDisabled?: boolean\n  className?: string\n  trigger?: 'color-picker' | 'color-field'\n  enableColorField?: boolean\n  closeButton?: boolean\n}\n\nconst ColorPicker = ({\n  closeButton = true,\n  enableColorSwatch = false,\n  enableColorFormatSelection = false,\n  enableColorField = true,\n  label,\n  description,\n  colors = [...Object.values(tailwindColors.zinc)],\n  placeholder = 'Fill Color',\n  isHex = true,\n  isDisabled = false,\n  className,\n  trigger = 'color-picker',\n  ...props\n}: ColorPickerProps) => {\n  const [space, setSpace] = React.useState<ColorSpace>('rgb')\n  const [isHexFormat, setIsHexFormat] = React.useState(false)\n  const value = props.value ?? props.defaultValue\n  return (\n    <div className={base({ className })}>\n      {label && <Label>{label}</Label>}\n      <Group>\n        <ColorPickerPrimitive defaultValue={defaultColor} {...props}>\n          <Popover>\n            {trigger === 'color-field' ? (\n              <ButtonPrimitive aria-label=\"Color swatch\" className={triggerColorField()}>\n                <ColorSwatch color={value?.toString(space)} className=\"size-6\" />\n              </ButtonPrimitive>\n            ) : trigger === 'color-picker' ? (\n              <Button\n                aria-label=\"Color picker\"\n                isDisabled={isDisabled}\n                appearance=\"outline\"\n                className={triggerColorPicker()}\n              >\n                <ColorSwatch color={value?.toString(space)} className=\"-ml-1.5 size-6\" />\n                {value ? <span>{value.toString(space)}</span> : <span>{placeholder}</span>}\n              </Button>\n            ) : null}\n            <Popover.Content\n              showArrow={false}\n              className=\"overflow-y-auto sm:max-w-xs p-2 [&::-webkit-scrollbar]:size-0.5 [scrollbar-width:thin]\"\n              {...props}\n            >\n              <div className=\"grid gap-2\">\n                <ColorArea\n                  aria-describedby={`${label ? `${label} color area` : 'Color slider'}`}\n                  className={colorArea()}\n                  colorSpace=\"hsb\"\n                  xChannel=\"saturation\"\n                  yChannel=\"brightness\"\n                >\n                  <ColorThumb className=\"z-50\" />\n                </ColorArea>\n                <ColorSlider\n                  aria-describedby={`${label ? `${label} color slider` : 'Color slider'}`}\n                  showOutput={false}\n                  className={colorSlider()}\n                  colorSpace=\"hsb\"\n                  channel=\"hue\"\n                />\n\n                {enableColorFormatSelection && (\n                  <Select\n                    aria-label=\"Color Space\"\n                    selectedKey={space}\n                    defaultSelectedKey={space}\n                    onSelectionChange={(s) => {\n                      setSpace(s as ColorSpace)\n                      setIsHexFormat(s === 'hex')\n                    }}\n                  >\n                    <Select.Trigger />\n                    <Select.List>\n                      {['rgb', 'hex', 'hsl', 'hsb'].map((s) => (\n                        <Select.Option key={s} id={s} textValue={s}>\n                          {s}\n                        </Select.Option>\n                      ))}\n                    </Select.List>\n                  </Select>\n                )}\n\n                {enableColorFormatSelection ? (\n                  <div className=\"flex gap-2 max-w-[inherit]\">\n                    {isHexFormat ? (\n                      <ColorField aria-label=\"Hex color\" colorSpace={space} />\n                    ) : (\n                      getColorChannels(space).map((channel) => (\n                        <ColorField\n                          aria-describedby={label ?? 'Color field'}\n                          colorSpace={space}\n                          channel={channel}\n                          key={channel}\n                        />\n                      ))\n                    )}\n                  </div>\n                ) : enableColorField ? (\n                  <ColorField aria-label={`Color in ${space} format`} colorSpace={space} />\n                ) : null}\n\n                {enableColorSwatch && colors && colors.length > 0 && (\n                  <ColorSwatchPicker\n                    aria-label=\"Color swatch picker\"\n                    layout=\"grid\"\n                    className={colorSwatchPicker()}\n                  >\n                    {colors.map((color) => (\n                      <ColorSwatchPickerItem key={color} color={color} />\n                    ))}\n                  </ColorSwatchPicker>\n                )}\n\n                {closeButton && (\n                  <div className=\"sm:hidden mt-2.5 mx-auto w-full max-w-[inherit]\">\n                    <Popover.Close shape=\"circle\" className=\"w-full\">\n                      Close\n                    </Popover.Close>\n                  </div>\n                )}\n              </div>\n            </Popover.Content>\n          </Popover>\n        </ColorPickerPrimitive>\n      </Group>\n      {description && <Description>{description}</Description>}\n    </div>\n  )\n}\n\nexport { ColorPicker, type ColorPickerProps }\n",
    "type": "ui"
  },
  "snippet": {
    "component": "@/components/ui/snippet",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/components/ui/primitive'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { IconCheck, IconDuplicate } from 'justd-icons'\nimport { toast } from 'sonner'\nimport { twMerge } from 'tailwind-merge'\n\nimport { Button, type ButtonProps } from './button'\n\nconst snippetVariants = {\n  hidden: { opacity: 0, scale: 0.5 },\n  visible: { opacity: 1, scale: 1 }\n}\n\ninterface SnippetProps extends React.HTMLAttributes<HTMLDivElement> {\n  text: string\n}\n\nconst Snippet: React.FC<SnippetProps> = ({ className, text, ...props }) => {\n  const [copied, setCopied] = React.useState(false)\n\n  const handleCopy = async () => {\n    if (navigator.clipboard && window.isSecureContext) {\n      try {\n        await navigator.clipboard.writeText(text)\n        setCopied(true)\n        setTimeout(() => setCopied(false), 2000) // Reset the copied state after 2 seconds\n      } catch (error) {\n        toast.error('Failed to copy to clipboard')\n      }\n    } else {\n      toast.error('Failed to copy to clipboard')\n    }\n  }\n\n  return (\n    <div\n      {...props}\n      className={twMerge(\n        'relative flex items-center justify-between rounded-lg border bg-[#0e0e10] text-white py-2.5 pl-3 pr-2.5 font-mono text-sm [&>svg:hover]:text-white [&>svg]:text-muted-fg [&>svg]:transition [&_svg]:shrink-0',\n        className\n      )}\n    >\n      <span className=\"mr-6\">{text}</span>\n      <Button\n        className=\"size-7 bx backdrop-blur-lg text-white bg-zinc-800 border hover:bg-zinc-700 border-zinc-700\"\n        aria-label=\"Copy imports statement\"\n        size=\"square-petite\"\n        appearance=\"outline\"\n        onPress={handleCopy}\n      >\n        <AnimatePresence mode=\"wait\" initial={false}>\n          {copied ? (\n            <motion.span\n              key=\"checkmark\"\n              variants={snippetVariants}\n              initial=\"hidden\"\n              animate=\"visible\"\n              exit=\"hidden\"\n            >\n              <IconCheck />\n            </motion.span>\n          ) : (\n            <motion.span\n              key=\"copy\"\n              variants={snippetVariants}\n              initial=\"hidden\"\n              animate=\"visible\"\n              exit=\"hidden\"\n            >\n              <IconDuplicate />\n            </motion.span>\n          )}\n        </AnimatePresence>\n      </Button>\n    </div>\n  )\n}\n\ninterface CopyButtonProps extends ButtonProps {\n  isCopied?: boolean\n  ariaLabel?: string\n  initialIcon?: React.ReactNode\n  copiedIcon?: React.ReactNode\n  className?: string\n}\n\nconst CopyButton = ({\n  initialIcon,\n  copiedIcon,\n  ariaLabel = 'Copy',\n  isCopied,\n  className,\n  ...props\n}: CopyButtonProps) => {\n  return (\n    <Button\n      className={cn(\n        'size-7 backdrop-blur-lg rounded-md text-white bg-zinc-800 border hover:bg-zinc-700 border-zinc-700',\n        className\n      )}\n      aria-label={ariaLabel}\n      size=\"square-petite\"\n      appearance=\"outline\"\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\" initial={false}>\n        {isCopied ? (\n          <motion.span\n            key=\"checkmark-import\"\n            variants={snippetVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n          >\n            {copiedIcon ?? <IconCheck />}\n          </motion.span>\n        ) : (\n          <motion.span\n            key=\"copy-import\"\n            variants={snippetVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n          >\n            {initialIcon ?? <IconDuplicate />}\n          </motion.span>\n        )}\n      </AnimatePresence>\n    </Button>\n  )\n}\n\nexport { CopyButton, Snippet, snippetVariants, type SnippetProps }\n",
    "type": "ui"
  },
  "number-field": {
    "component": "@/components/ui/number-field",
    "raw": "'use client'\n\nimport { IconChevronDown, IconChevronUp, IconMinus, IconPlus } from 'justd-icons'\nimport {\n  Button,\n  type ButtonProps,\n  NumberField as NumberFieldPrimitive,\n  type NumberFieldProps as NumberFieldPrimitiveProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, fieldBorderStyles, FieldError, FieldGroup, Input, Label } from './field'\nimport { ctr, useMediaQuery } from './primitive'\n\nconst numberFieldStyles = tv({\n  slots: {\n    base: 'group flex flex-col gap-1',\n    stepperButton:\n      'h-10 cursor-default px-2 text-muted-fg pressed:bg-primary pressed:text-primary-fg group-disabled:bg-secondary forced-colors:group-disabled:text-[GrayText]'\n  }\n})\n\nconst { base, stepperButton } = numberFieldStyles()\n\ninterface NumberFieldProps extends NumberFieldPrimitiveProps {\n  label?: string\n  description?: string\n  placeholder?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst NumberField = ({\n  label,\n  placeholder,\n  description,\n  className,\n  errorMessage,\n  ...props\n}: NumberFieldProps) => {\n  const isMobile = useMediaQuery('(max-width: 768px)')\n  return (\n    <NumberFieldPrimitive {...props} className={ctr(className, base())}>\n      <Label>{label}</Label>\n      <FieldGroup className=\"group-disabled:bg-secondary\">\n        {(renderProps) => (\n          <>\n            {isMobile ? <StepperButton slot=\"decrement\" className=\"border-r\" /> : null}\n            <Input placeholder={placeholder} />\n            <div\n              className={fieldBorderStyles({\n                ...renderProps,\n                className: 'grid h-10 place-content-center border-s'\n              })}\n            >\n              {isMobile ? (\n                <StepperButton slot=\"increment\" />\n              ) : (\n                <div className=\"flex h-full flex-col\">\n                  <StepperButton slot=\"increment\" emblemType=\"chevron\" className=\"h-5 px-1\" />\n                  <div\n                    className={fieldBorderStyles({\n                      ...renderProps,\n                      className: 'border-b'\n                    })}\n                  />\n                  <StepperButton slot=\"decrement\" emblemType=\"chevron\" className=\"h-5 px-1\" />\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </NumberFieldPrimitive>\n  )\n}\n\ninterface StepperButtonProps extends ButtonProps {\n  slot: 'increment' | 'decrement'\n  emblemType?: 'chevron' | 'default'\n  className?: string\n}\n\nconst StepperButton = ({\n  slot,\n  className,\n  emblemType = 'default',\n  ...props\n}: StepperButtonProps) => {\n  const icon =\n    emblemType === 'chevron' ? (\n      slot === 'increment' ? (\n        <IconChevronUp className=\"size-5\" />\n      ) : (\n        <IconChevronDown className=\"size-5\" />\n      )\n    ) : slot === 'increment' ? (\n      <IconPlus />\n    ) : (\n      <IconMinus />\n    )\n  return (\n    <Button className={stepperButton({ className })} slot={slot} {...props}>\n      {icon}\n    </Button>\n  )\n}\n\nexport { NumberField, type NumberFieldProps }\n",
    "type": "ui"
  },
  "table": {
    "component": "@/components/ui/table",
    "raw": "'use client'\n\nimport { IconChevronDown, IconChevronUp, IconHamburger } from 'justd-icons'\nimport {\n  Button,\n  Cell,\n  type CellProps,\n  Collection,\n  Column,\n  type ColumnProps,\n  Row,\n  type RowProps,\n  Table as TablePrimitive,\n  TableBody as TableBodyPrimitive,\n  type TableBodyProps,\n  TableHeader as TableHeaderPrimitive,\n  type TableHeaderProps,\n  type TableProps as TablePrimitiveProps,\n  useTableOptions\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { cn } from './primitive'\n\nconst table = tv({\n  slots: {\n    root: 'table w-full caption-bottom border-spacing-0 text-sm outline-none',\n    column:\n      'whitespace-nowrap allows-sorting:cursor-pointer px-3 py-3 text-left dragging:cursor-grabbing font-medium outline-none [&:has([slot=selection])]:pr-0',\n    header: 'border-b x32',\n    row: 'tr group relative cursor-default border-b text-fg/70 outline-none ring-primary focus-visible:ring-1 selected:bg-primary/15',\n    cell: 'whitespace-nowrap px-3 py-3 outline-none'\n  }\n})\n\nconst { root, header, column, row, cell } = table()\n\nconst TableBody = <T extends object>(props: TableBodyProps<T>) => (\n  <TableBodyPrimitive {...props} className={cn('[&_.tr:last-child]:border-0')} />\n)\n\ninterface TableProps extends TablePrimitiveProps {\n  className?: string\n}\n\nconst Table = ({ children, className, ...props }: TableProps) => (\n  <div className=\"relative w-full overflow-auto\">\n    <TablePrimitive {...props} className={root({ className })}>\n      {children}\n    </TablePrimitive>\n  </div>\n)\n\ninterface TableCellProps extends CellProps {\n  className?: string\n}\n\nconst TableCell = ({ children, className, ...props }: TableCellProps) => (\n  <Cell {...props} className={cell({ className })}>\n    {children}\n  </Cell>\n)\n\ninterface TableColumnProps extends ColumnProps {\n  className?: string\n}\n\nconst TableColumn = ({ children, className, ...props }: TableColumnProps) => (\n  <Column {...props} className={column({ className })}>\n    {({ allowsSorting, sortDirection }) => (\n      <div className=\"flex [&>[data-slot=icon]]:shrink-0 items-center gap-2\">\n        <>\n          {children}\n          {allowsSorting &&\n            (sortDirection === undefined ? (\n              <div className=\"w-6\" />\n            ) : sortDirection === 'ascending' ? (\n              <IconChevronUp />\n            ) : (\n              <IconChevronDown />\n            ))}\n        </>\n      </div>\n    )}\n  </Column>\n)\n\nconst TableHeader = <T extends object>({\n  children,\n  className,\n  columns,\n  ...props\n}: TableHeaderProps<T> & { className?: string }) => {\n  const { selectionBehavior, selectionMode, allowsDragging } = useTableOptions()\n  return (\n    <TableHeaderPrimitive {...props} className={header({ className })}>\n      {allowsDragging && <Column />}\n      {selectionBehavior === 'toggle' && (\n        <Column className=\"pl-4\">\n          {selectionMode === 'multiple' && <Checkbox slot=\"selection\" />}\n        </Column>\n      )}\n      <Collection items={columns}>{children}</Collection>\n    </TableHeaderPrimitive>\n  )\n}\n\nconst TableRow = <T extends object>({\n  children,\n  className,\n  columns,\n  id,\n  ...props\n}: RowProps<T> & { className?: string }) => {\n  const { selectionBehavior, allowsDragging } = useTableOptions()\n  return (\n    <Row\n      id={id}\n      {...props}\n      className={row({\n        className: 'href' in props ? cn('cursor-pointer hover:bg-secondary/50', className) : ''\n      })}\n    >\n      {allowsDragging && (\n        <Cell className=\"ring-primary pr-0 group cursor-grab dragging:cursor-grabbing\">\n          <Button\n            className=\"bg-transparent pl-3.5 py-1.5 text-muted-fg pressed:text-fg\"\n            slot=\"drag\"\n          >\n            <IconHamburger />\n          </Button>\n        </Cell>\n      )}\n      {selectionBehavior === 'toggle' && (\n        <Cell className=\"pl-4\">\n          <span\n            aria-hidden\n            className=\"absolute inset-y-0 left-0 hidden h-full w-0.5 bg-primary group-selected:block\"\n          />\n          <Checkbox slot=\"selection\" />\n        </Cell>\n      )}\n      <Collection items={columns}>{children}</Collection>\n    </Row>\n  )\n}\n\nTable.Body = TableBody\nTable.Cell = TableCell\nTable.Column = TableColumn\nTable.Header = TableHeader\nTable.Row = TableRow\n\nexport { Table }\n",
    "type": "ui"
  },
  "separator": {
    "component": "@/components/ui/separator",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Separator as SeparatorPrimitive, type SeparatorProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst separatorStyles = tv({\n  base: 'bg-muted shrink-0 forced-colors:bg-[ButtonBorder]',\n  variants: {\n    orientation: {\n      horizontal: 'h-px w-full',\n      vertical: 'w-px'\n    }\n  },\n  defaultVariants: {\n    orientation: 'horizontal'\n  }\n})\n\nexport function Separator({ className, ...props }: SeparatorProps) {\n  return (\n    <SeparatorPrimitive\n      {...props}\n      className={separatorStyles({\n        orientation: props.orientation,\n        className: className\n      })}\n    />\n  )\n}\n\nexport type { SeparatorProps }\n",
    "type": "ui"
  },
  "button": {
    "component": "@/components/ui/button",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  Button as ButtonPrimitive,\n  type ButtonProps as ButtonPrimitiveProps,\n  composeRenderProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { focusButtonStyles } from './primitive'\n\nconst buttonStyles = tv(\n  {\n    extend: focusButtonStyles,\n    base: [\n      'kbt32x relative no-underline isolate inline-flex items-center justify-center gap-x-2 border font-medium',\n      'forced-colors:[--btn-icon:ButtonText] forced-colors:hover:[--btn-icon:ButtonText] [&>[data-slot=icon]]:-mx-0.5 [&>[data-slot=icon]]:my-1 [&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:shrink-0 [&>[data-slot=icon]]:text-[--btn-icon]'\n    ],\n    variants: {\n      intent: {\n        primary: [\n          'text-white [--btn-bg:theme(colors.primary.DEFAULT)] [--btn-border:theme(colors.primary.DEFAULT)] [--btn-hover-overlay:theme(colors.white/10%)]',\n          '[--btn-icon:theme(colors.primary.fg/60%)] active:[--btn-icon:theme(colors.primary.fg/80%)] hover:[--btn-icon:theme(colors.primary.fg/80%)]'\n        ],\n        secondary: [\n          'text-secondary-fg [--btn-bg:white] dark:[--btn-bg:theme(colors.secondary.DEFAULT)] [--btn-border:theme(colors.secondary.fg/10%)] [--btn-hover-overlay:theme(colors.secondary.fg/2.5%)] data-[active]:[--btn-border:theme(colors.secondary.fg/15%)] hover:[--btn-border:theme(colors.secondary.fg/15%)]',\n          '[--btn-icon:theme(colors.muted.fg)] active:[--btn-icon:theme(colors.fg)] hover:[--btn-icon:theme(colors.fg)]'\n        ],\n        success: [\n          'text-white [--btn-bg:theme(colors.success.DEFAULT)] [--btn-border:theme(colors.success.DEFAULT)] [--btn-hover-overlay:theme(colors.white/10%)]',\n          '[--btn-icon:theme(colors.white/60%)] active:[--btn-icon:theme(colors.white/80%)] hover:[--btn-icon:theme(colors.white/80%)]'\n        ],\n        'light/dark': [\n          'text-background [--btn-bg:theme(colors.dark)] [--btn-border:theme(colors.dark/90%)] [--btn-hover-overlay:theme(colors.white/10%)]',\n          'dark:[--btn-bg:white] dark:[--btn-hover-overlay:theme(colors.dark/5%)]',\n          '[--btn-icon:theme(colors.muted.fg)] active:[--btn-icon:theme(colors.background/85%)] hover:[--btn-icon:theme(colors.background/85%)]'\n        ],\n        dark: [\n          'text-light [--btn-bg:theme(colors.dark)] [--btn-border:theme(colors.dark)] [--btn-hover-overlay:theme(colors.light/2.5%)]',\n          '[--btn-icon:theme(colors.light/60%)] active:[--btn-icon:theme(colors.light/80%)] hover:[--btn-icon:theme(colors.light/80%)]'\n        ],\n        light: [\n          'text-dark [--btn-bg:white] [--btn-border:theme(colors.dark/10%)] [--btn-hover-overlay:theme(colors.dark/2.5%)] active:[--btn-border:theme(colors.dark/15%)] hover:[--btn-border:theme(colors.dark/15%)]',\n          '[--btn-icon:theme(colors.dark/60%)] active:[--btn-icon:theme(colors.dark/80%)] hover:[--btn-icon:theme(colors.dark/80%)]'\n        ],\n        info: [\n          'text-info-fg [--btn-bg:theme(colors.info.DEFAULT)] [--btn-border:theme(colors.info.DEFAULT/80%)] [--btn-hover-overlay:theme(colors.white/25%)]',\n          '[--btn-icon:theme(colors.info.fg/60%)] active:[--btn-icon:theme(colors.info.fg/80%)] hover:[--btn-icon:theme(colors.info.fg/80%)]'\n        ],\n        warning: [\n          'text-warning-fg [--btn-bg:theme(colors.warning.DEFAULT)] [--btn-border:theme(colors.warning.DEFAULT)] [--btn-hover-overlay:theme(colors.white/10%)]',\n          '[--btn-icon:theme(colors.warning.fg/60%)] active:[--btn-icon:theme(colors.warning.fg/80%)] hover:[--btn-icon:theme(colors.warning.fg/80%)]'\n        ],\n        danger: [\n          'text-white [--btn-bg:theme(colors.danger.DEFAULT)] [--btn-border:theme(colors.danger.DEFAULT)] [--btn-hover-overlay:theme(colors.white/10%)]',\n          '[--btn-icon:theme(colors.white/60%)] active:[--btn-icon:theme(colors.white/80%)] hover:[--btn-icon:theme(colors.white/80%)]'\n        ]\n      },\n      appearance: {\n        solid:\n          'border-transparent bg-[--btn-border] dark:bg-[--btn-bg] before:absolute before:inset-0 before:-z-10 before:bg-[--btn-bg] before:shadow dark:before:hidden dark:border-white/5 after:absolute after:inset-0 after:-z-10 after:shadow-[shadow:inset_0_1px_theme(colors.white/15%)] after:active:bg-[--btn-hover-overlay] after:hover:bg-[--btn-hover-overlay] dark:after:-inset-px before:data-[disabled]:shadow-none after:data-[disabled]:shadow-none',\n        outline:\n          'border-border hover:bg-secondary/90 pressed:bg-secondary/90 active:bg-secondary/90 text-fg [--btn-icon:theme(colors.zinc.400)] active:[--btn-icon:theme(colors.zinc.500)] hover:[--btn-icon:theme(colors.zinc.500)] dark:active:[--btn-icon:theme(colors.zinc.300)] dark:hover:[--btn-icon:theme(colors.zinc.300)]',\n        plain:\n          'border-transparent text-fg active:bg-fg/5 hover:bg-fg/5 [--btn-icon:theme(colors.zinc.500)] active:[--btn-icon:theme(colors.zinc.700)] hover:[--btn-icon:theme(colors.zinc.700)] dark:[--btn-icon:theme(colors.zinc.500)] dark:active:[--btn-icon:theme(colors.zinc.400)] dark:hover:[--btn-icon:theme(colors.zinc.400)]'\n      },\n      size: {\n        'extra-small':\n          'h-8 px-[calc(theme(spacing.3)-1px)] py-[calc(theme(spacing.1)-1px)] text-xs/4 lg:text-[0.800rem]/4',\n        small:\n          'h-9 px-[calc(theme(spacing.4)-1px)] py-[calc(theme(spacing[1.5])-1px)] text-sm/5 lg:text-sm/5',\n        medium:\n          'h-10 px-[calc(theme(spacing.4)-1px)] py-[calc(theme(spacing.2)-1px)] text-base lg:text-sm/6',\n        large:\n          'h-10 sm:h-11 px-[calc(theme(spacing.4)-1px)] sm:px-[calc(theme(spacing.5)-1px)] py-[calc(theme(spacing[2.5])-1px)] text-base lg:text-base/7 sm:[&>[data-slot=icon]]:size-5',\n        'square-petite': 'size-9 shrink-0 [&_[data-slot=icon]]:text-current'\n      },\n      shape: {\n        square:\n          'rounded-lg before:rounded-[calc(theme(borderRadius.lg)-1px)] after:rounded-[calc(theme(borderRadius.lg)-1px)] dark:after:rounded-lg',\n        circle:\n          'rounded-[9999px] before:rounded-[9998px] after:rounded-[9998px] dark:after:rounded-[9999px]'\n      },\n      isDisabled: {\n        false: 'forced-colors:disabled:text-[GrayText]',\n        true: 'cursor-default opacity-60 forced-colors:disabled:text-[GrayText]'\n      }\n    },\n    defaultVariants: {\n      intent: 'primary',\n      appearance: 'solid',\n      size: 'medium',\n      shape: 'square'\n    },\n    compoundVariants: [\n      {\n        appearance: ['outline', 'plain'],\n        className: 'px-1',\n        size: 'extra-small'\n      },\n      {\n        appearance: ['outline', 'plain'],\n        className: 'px-[calc(theme(spacing.1)-1px)]',\n        size: 'small'\n      },\n      {\n        appearance: ['outline', 'plain'],\n        className: 'px-[calc(theme(spacing.2)-1px)]',\n        size: 'medium'\n      },\n      {\n        appearance: ['outline', 'plain'],\n        className: 'px-[calc(theme(spacing.3)-1px)]',\n        size: 'large'\n      }\n    ]\n  },\n  {\n    responsiveVariants: ['sm', 'md', 'lg', 'xl']\n  }\n)\n\ninterface ButtonProps extends ButtonPrimitiveProps {\n  intent?:\n    | 'primary'\n    | 'secondary'\n    | 'danger'\n    | 'warning'\n    | 'info'\n    | 'light/dark'\n    | 'success'\n    | 'light'\n    | 'dark'\n  size?: 'medium' | 'large' | 'square-petite' | 'extra-small' | 'small'\n  shape?: 'square' | 'circle'\n  appearance?: 'solid' | 'outline' | 'plain'\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, intent, appearance, size, shape, ...props }, ref) => {\n    return (\n      <ButtonPrimitive\n        ref={ref}\n        {...props}\n        className={composeRenderProps(className, (className, renderProps) =>\n          buttonStyles({\n            ...renderProps,\n            intent,\n            appearance,\n            size,\n            shape,\n            className\n          })\n        )}\n      />\n    )\n  }\n)\n\nButton.displayName = 'Button'\n\nexport { Button, ButtonPrimitive, buttonStyles, type ButtonProps }\n",
    "type": "ui"
  },
  "toggle": {
    "component": "@/components/ui/toggle",
    "raw": "'use client'\n\nimport type { ToggleButtonProps } from 'react-aria-components'\nimport { composeRenderProps, ToggleButton as ToggleButtonPrimitive } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { type ButtonProps } from './button'\nimport { focusButtonStyles } from './primitive'\n\nconst toggleStyles = tv({\n  extend: focusButtonStyles,\n  base: [\n    'inline-flex items-center bg-transparent justify-center border border-transparent rounded-lg text-sm font-medium ring-offset-background transition-colors',\n    'hover:bg-muted hover:text-muted-fg'\n  ],\n  variants: {\n    isDisabled: {\n      true: 'opacity-50 cursor-default forced-colors:border-[GrayText]'\n    },\n    appearance: {\n      plain: 'selected:bg-secondary selected:text-secondary-fg',\n      solid:\n        'bg-white border-border hover:border-primary selected:border-primary hover:bg-primary hover:text-primary-fg text-zinc-900 selected:bg-primary selected:text-primary-fg',\n      outline:\n        'border-border selected:bg-secondary selected:backdrop-blur-sm selected:text-secondary-fg hover:bg-secondary hover:text-secondary-fg'\n    },\n    size: {\n      medium: 'h-10 px-3',\n      small: 'h-9 px-2.5',\n      large: 'h-11 px-5',\n      'square-petite': 'size-9 shrink-0'\n    },\n    shape: {\n      square: 'rounded-lg',\n      circle: 'rounded-full'\n    }\n  },\n  defaultVariants: {\n    size: 'small',\n    shape: 'square'\n  }\n})\n\ninterface ToggleProps extends ToggleButtonProps {\n  appearance?: ButtonProps['appearance']\n  size?: 'small' | 'medium' | 'large' | 'square-petite'\n  shape?: ButtonProps['shape']\n}\n\nconst Toggle = ({ className, ...props }: ToggleProps) => {\n  return (\n    <ToggleButtonPrimitive\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        toggleStyles({\n          ...renderProps,\n          appearance: props.appearance,\n          size: props.size,\n          shape: props.shape,\n          className\n        })\n      )}\n    />\n  )\n}\n\nexport { Toggle, toggleStyles, type ToggleProps }\n",
    "type": "ui"
  },
  "modal": {
    "component": "@/components/ui/modal",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport type {\n  DialogTriggerProps,\n  ModalOverlayProps as ModalOverlayPrimitiveProps\n} from 'react-aria-components'\nimport {\n  Button as ButtonPrimitive,\n  composeRenderProps,\n  type DialogProps,\n  DialogTrigger as DialogTriggerPrimitive,\n  Modal as ModalPrimitive,\n  ModalOverlay as ModalOverlayPrimitive\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { Dialog } from './dialog'\n\nconst modalOverlayStyles = tv({\n  base: [\n    'fixed left-0 top-0 isolate z-50 h-[--visual-viewport-height] w-full',\n    'flex items-end text-center sm:items-center sm:justify-center',\n    '[--visual-viewport-vertical-padding:16px] sm:[--visual-viewport-vertical-padding:32px]'\n  ],\n  variants: {\n    isBlurred: {\n      true: 'backdrop-blur',\n      false: 'bg-black/15 dark:bg-black/40'\n    },\n    isEntering: {\n      true: 'ease-out animate-in fade-in'\n    },\n    isExiting: {\n      true: 'duration-200 ease-in animate-out fade-out'\n    }\n  }\n})\nconst modalContentStyles = tv({\n  base: [\n    'max-h-full w-full rounded-t-2xl ring-1 ring-dark/5 bg-overlay text-overlay-fg text-left align-middle shadow-lg',\n    'dark:ring-white/15 sm:rounded-xl overflow-hidden'\n  ],\n  variants: {\n    isEntering: {\n      true: [\n        'animate-in duration-200 fade-in-0 slide-in-from-bottom-[20%]',\n        'sm:slide-in-from-bottom-auto sm:slide-in-from-top-[20%]'\n      ]\n    },\n    isExiting: {\n      true: [\n        'duration-200 ease-in animate-out slide-out-to-bottom-56',\n        'sm:exiting:slide-out-to-top-[15%]'\n      ]\n    },\n    size: {\n      xs: 'sm:max-w-xs',\n      sm: 'sm:max-w-sm',\n      md: 'sm:max-w-md',\n      lg: 'sm:max-w-lg sm:has-[[role=alertdialog]]:max-w-lg sm:has-[[role=dialog]]:max-w-lg',\n      xl: 'sm:max-w-xl',\n      '2xl': 'sm:max-w-2xl',\n      '3xl': 'sm:max-w-3xl',\n      '4xl': 'sm:max-w-4xl',\n      '5xl': 'sm:max-w-5xl'\n    }\n  },\n  defaultVariants: {\n    size: 'lg'\n  }\n})\n\ninterface ModalProps extends DialogTriggerProps {}\nconst Modal = ({ children }: ModalProps) => {\n  return <DialogTriggerPrimitive>{children}</DialogTriggerPrimitive>\n}\n\ninterface ModalContentProps\n  extends Omit<React.ComponentProps<typeof Modal>, 'children'>,\n    Omit<ModalOverlayPrimitiveProps, 'className'>,\n    VariantProps<typeof modalContentStyles> {\n  'aria-label'?: DialogProps['aria-label']\n  'aria-labelledby'?: DialogProps['aria-labelledby']\n  role?: DialogProps['role']\n  closeButton?: boolean\n  isBlurred?: boolean\n  classNames?: {\n    overlay?: ModalOverlayPrimitiveProps['className']\n    content?: ModalOverlayPrimitiveProps['className']\n  }\n}\n\nconst ModalContent = ({\n  classNames,\n  isDismissable = true,\n  isBlurred = false,\n  children,\n  size,\n  role,\n  closeButton = true,\n  ...props\n}: ModalContentProps) => {\n  const _isDismissable = role === 'alertdialog' ? false : isDismissable\n  return (\n    <ModalOverlayPrimitive\n      isDismissable={_isDismissable}\n      className={composeRenderProps(classNames?.overlay, (className, renderProps) => {\n        return modalOverlayStyles({\n          ...renderProps,\n          isBlurred,\n          className\n        })\n      })}\n      {...props}\n    >\n      <ModalPrimitive\n        className={composeRenderProps(classNames?.content, (className, renderProps) =>\n          modalContentStyles({\n            ...renderProps,\n            size,\n            className\n          })\n        )}\n        {...props}\n      >\n        <Dialog role={role}>\n          {({ close }) => (\n            <>\n              {children}\n              {closeButton && (\n                <Dialog.CloseIndicator close={close} isDismissable={_isDismissable} />\n              )}\n            </>\n          )}\n        </Dialog>\n      </ModalPrimitive>\n    </ModalOverlayPrimitive>\n  )\n}\n\nModal.Trigger = ButtonPrimitive\nModal.Header = Dialog.Header\nModal.Title = Dialog.Title\nModal.Description = Dialog.Description\nModal.Footer = Dialog.Footer\nModal.Body = Dialog.Body\nModal.Close = Dialog.Close\nModal.Content = ModalContent\n\nexport { Modal, modalOverlayStyles, modalContentStyles }\n",
    "type": "ui"
  },
  "command-menu": {
    "component": "@/components/ui/command-menu",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Command as CommandPrimitive } from 'cmdk'\nimport { IconSearch, IconX } from 'justd-icons'\nimport type { ModalOverlayProps, SeparatorProps, TextProps } from 'react-aria-components'\nimport { Button, Dialog, Modal, ModalOverlay, Text } from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport type { KeyboardProps } from './keyboard'\nimport { Keyboard } from './keyboard'\nimport { useMediaQuery } from './primitive'\nimport { Separator } from './separator'\n\nconst commandStyles = tv({\n  slots: {\n    command: [\n      'flex h-svh w-full flex-col overflow-hidden rounded-md bg-overlay text-overlay-fg sm:h-full',\n      '[&_[cmdk-group-heading]]:ml-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:-mb-1.5 [&_[cmdk-group-heading]]:text-muted-fg [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_[data-slot=icon]]:size-5 [&_[cmdk-input]]:h-12',\n      // for specific properties, it has to be controlled by the command\n      '[&_[cmdk-item]]:py-2.5 [&_[cmdk-item]]:pl-2.5 [&_[cmdk-item]]:pr-4'\n    ],\n    list: 'overflow-y-auto lg:pb-0 max-h-[calc(100vh-35%)] pb-16 [&:not(:has(.xda32kfseccmd))]:p-2 [&:not(:has(.xda32kfseccmd))_.s3xsprt]:my-2 overflow-x-hidden md:max-h-[456px]',\n    input: [\n      'flex w-full rounded-md bg-transparent text-base placeholder:text-muted-fg',\n      'focus:outline-none',\n      'disabled:opacity-50 disabled:cursor-not-allowed'\n    ],\n    section: [\n      'xda32kfseccmd overflow-hidden py-2 px-2 text-fg',\n      '[&_[cmdk-group-heading]]:select-none [&_[cmdk-group-heading]]:ml-[1px] [&_[cmdk-group-heading]]:py-2 [&_[cmdk-group-heading]]:text-[0.8rem] [&_[cmdk-group-heading]]:text-muted-fg'\n    ],\n    modalOverlay: [\n      'fixed inset-0 max-h-[--visual-viewport-height] z-50 bg-black/15 dark:bg-black/40 entering:animate-in entering:fade-in-0 exiting:animate-in exiting:fade-out-0'\n    ],\n    modal: [\n      'fixed bottom-0 left-[50%] top-auto z-50 grid h-[calc(100vh-35%)] w-full max-w-full translate-x-[-50%] gap-4 overflow-hidden rounded-t-xl bg-background shadow-lg ring-1 ring-dark/5 dark:ring-border sm:bottom-auto sm:top-[6rem] sm:h-auto sm:w-full sm:max-w-2xl sm:rounded-xl',\n      'sm:entering:slide-in-from-bottom-auto entering:duration-300 entering:animate-in entering:fade-in-0 entering:slide-in-from-bottom-1/2 entering:slide-in-from-left-1/2 entering:[transition-timing-function:ease-out] sm:entering:duration-300 sm:entering:slide-in-from-top-[2rem]',\n      'exiting:duration-300 exiting:animate-out exiting:fade-out-0 exiting:slide-out-to-bottom-1/2 exiting:slide-out-to-left-1/2 exiting:[transition-timing-function:ease] sm:exiting:slide-out-to-top-[4rem]'\n    ],\n    closeButton: [\n      'absolute right-3 top-1.5 [&>span>[data-slot=icon]]:text-muted-fg pressed:[&_[data-slot=icon]]:text-fg lg:top-3.5 rounded-full border lg:border-border border-transparent lg:bg-secondary/50 py-2.5 px-2.5 lg:py-0.5 text-xs transition-opacity data-[state=open]:bg-secondary data-[state=open]:text-muted-fg lg:focus:border-fg/70 focus:outline-none lg:focus:ring-2 lg:focus:ring-ring disabled:pointer-events-none',\n      'focus:outline-none lg:focus:bg-primary/10 lg:focus:ring-2 lg:focus:ring-primary/20 lg:focus:border-primary/70',\n      'disabled:pointer-events-none'\n    ],\n    empty: 'py-6 text-center text-sm text-muted-fg x3tmpy',\n    kbdKeyboard: 'lg:block hidden group-data-[selected=true]:opacity-60',\n    description: 'sm:inline hidden text-sm ml-auto',\n    item: [\n      'group relative flex cursor-default select-none items-center rounded-lg py-2 text-sm outline-none',\n      // selected\n      'data-[selected=true]:bg-primary data-[selected=true]:text-primary-fg [&[data-selected=true]_[data-slot=icon]]:text-primary-fg',\n      // danger\n      'data-[danger=true]:text-danger data-[danger=true]:data-[selected=true]:bg-danger data-[danger=true]:data-[selected=true]:text-danger-fg',\n      // disabled\n      'data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50',\n      // icon\n      '[&_[data-slot=icon]]:mr-2 [&_[data-slot=icon]]:size-[1.10rem] [&_[data-slot=icon]]:shrink-0 [&_[data-slot=icon]]:text-muted-fg',\n      '[&_[data-slot=avatar]]:mr-2 [&_[data-slot=avatar]]:size-[1.10rem] [&_[data-slot=avatar]]:shrink-0'\n    ]\n  },\n\n  variants: {\n    isDanger: {\n      true: 'text-danger data-[selected=true]:bg-danger data-[selected=true]:text-danger-fg [&[data-selected=true]_[data-slot=icon]]:text-danger-fg'\n    }\n  }\n})\n\nconst {\n  command,\n  empty,\n  section,\n  list,\n  item,\n  closeButton,\n  modal,\n  input,\n  modalOverlay,\n  kbdKeyboard,\n  description\n} = commandStyles()\n\ninterface CommandMenuContextProps {\n  hideSearchIndicator?: boolean\n  hideCloseButton?: boolean\n  messageOnEmpty?: boolean | string\n}\n\nconst CommandMenuContext = React.createContext<CommandMenuContextProps>({})\n\ninterface CommandMenuRootProps {\n  CommandMenuEmpty?: typeof CommandMenuEmpty\n  CommandMenuInput?: typeof CommandMenuInput\n  CommandMenuItem?: typeof CommandMenuItem\n  CommandMenuKeyboard?: typeof CommandMenuKeyboard\n  CommandMenuList?: typeof CommandMenuList\n  CommandMenuSection?: typeof CommandMenuSection\n  CommandMenuSeparator?: typeof CommandMenuSeparator\n  CommandMenuDescription?: typeof CommandMenuDescription\n}\ninterface CommandMenuProps\n  extends ModalOverlayProps,\n    CommandMenuRootProps,\n    CommandMenuContextProps {\n  children: React.ReactNode\n  value?: string\n  messageOnEmpty?: boolean | string\n  onValueChange?: (value: string) => void\n}\n\nconst CommandMenu = ({\n  hideSearchIndicator = false,\n  hideCloseButton = false,\n  messageOnEmpty,\n  value,\n  onValueChange,\n  children,\n  ...props\n}: CommandMenuProps) => {\n  const isDesktop = useMediaQuery('(min-width: 1024px)')\n  return (\n    <CommandMenuContext.Provider value={{ hideSearchIndicator, hideCloseButton, messageOnEmpty }}>\n      <ModalOverlay isDismissable className={modalOverlay()} {...props}>\n        <Modal className={modal()}>\n          <Dialog className=\"outline-none\" aria-label=\"Command Palette\">\n            {({ close }) => (\n              <>\n                <CommandPrimitive value={value} onValueChange={onValueChange} className={command()}>\n                  {children}\n                </CommandPrimitive>\n                {!hideCloseButton && (\n                  <Button autoFocus={!isDesktop} onPress={close} className={closeButton()}>\n                    <span className=\"lg:block hidden\">Esc</span>\n                    <span className=\"lg:hidden -mr-2 block\">\n                      <IconX />\n                      <span className=\"sr-only\">Close command palette</span>\n                    </span>\n                  </Button>\n                )}\n              </>\n            )}\n          </Dialog>\n        </Modal>\n      </ModalOverlay>\n    </CommandMenuContext.Provider>\n  )\n}\n\ninterface CommandMenuInputProps\n  extends React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input> {}\n\nconst CommandMenuInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  CommandMenuInputProps\n>(({ className, ...props }, ref) => {\n  const { hideSearchIndicator } = React.useContext(CommandMenuContext)\n  return (\n    <div className=\"flex border-b items-center px-3\">\n      {!hideSearchIndicator && <IconSearch className=\"mr-2 size-5 shrink-0 opacity-50\" />}\n      <CommandPrimitive.Input\n        autoFocus\n        ref={ref}\n        className={input({ className: hideSearchIndicator ? 'pl-1' : className })}\n        {...props}\n      />\n    </div>\n  )\n})\n\nCommandMenuInput.displayName = CommandPrimitive.Input.displayName\n\ninterface CommandMenuListProps extends React.ComponentProps<typeof CommandPrimitive.List> {}\n\nconst CommandMenuList = ({ className, ...props }: CommandMenuListProps) => {\n  const { messageOnEmpty } = React.useContext(CommandMenuContext)\n  return (\n    <CommandPrimitive.List className={list({ className })} {...props}>\n      {messageOnEmpty !== false && (\n        <CommandMenuEmpty>\n          {typeof messageOnEmpty === 'string' ? messageOnEmpty : 'No results found.'}\n        </CommandMenuEmpty>\n      )}\n      {props.children}\n    </CommandPrimitive.List>\n  )\n}\n\ninterface CommandMenuEmptyProps extends React.ComponentProps<typeof CommandPrimitive.Empty> {}\n\nconst CommandMenuEmpty = ({ className, ...props }: CommandMenuEmptyProps) => {\n  return <CommandPrimitive.Empty className={empty({ className })} {...props} />\n}\n\ninterface CommandSectionProps extends React.ComponentProps<typeof CommandPrimitive.Group> {\n  separator?: boolean\n}\n\nconst CommandMenuSection = ({ className, separator, ...props }: CommandSectionProps) => {\n  return (\n    <>\n      <CommandPrimitive.Group className={section({ className })} {...props}>\n        {props.children}\n        {separator && <CommandMenuSeparator className=\"mt-2\" />}\n      </CommandPrimitive.Group>\n    </>\n  )\n}\n\nconst CommandMenuSeparator = ({ className, ...props }: SeparatorProps) => {\n  return (\n    <div className=\"-mx-4 s3xsprt\">\n      <Separator className={className} {...props} orientation=\"horizontal\" />\n    </div>\n  )\n}\n\ninterface CommandItemProps extends React.ComponentProps<typeof CommandPrimitive.Item> {\n  isDanger?: boolean\n}\n\nconst CommandMenuItem = ({ isDanger, className, ...props }: CommandItemProps) => {\n  return (\n    <CommandPrimitive.Item\n      data-danger={isDanger ? 'true' : undefined}\n      className={item({ isDanger, className })}\n      {...props}\n    />\n  )\n}\n\ninterface CommandMenuDescriptionProps extends TextProps {\n  intent?: 'danger' | 'warning' | 'success' | 'primary' | 'secondary'\n}\n\nconst CommandMenuDescription = ({ intent, className, ...props }: CommandMenuDescriptionProps) => {\n  return (\n    <Text\n      {...props}\n      slot=\"description\"\n      className={description({\n        className: twJoin(\n          intent === 'danger'\n            ? 'group-data-[selected=true]:text-primary-fg/70 text-danger/90'\n            : intent === 'warning'\n              ? 'group-data-[selected=true]:text-primary-fg/70 text-warning/90'\n              : intent === 'success'\n                ? 'group-data-[selected=true]:text-primary-fg/70 text-success/90'\n                : intent === 'primary'\n                  ? 'group-data-[selected=true]:text-white/70 text-primary/90'\n                  : 'group-data-[selected=true]:text-primary-fg/70 text-muted-fg',\n          className\n        )\n      })}\n    />\n  )\n}\n\nconst CommandMenuKeyboard = (props: KeyboardProps) => (\n  <Keyboard classNames={{ kbd: kbdKeyboard(), base: '-mr-2.5' }} {...props} />\n)\n\nCommandMenu.Empty = CommandMenuEmpty\nCommandMenu.Input = CommandMenuInput\nCommandMenu.Item = CommandMenuItem\nCommandMenu.Keyboard = CommandMenuKeyboard\nCommandMenu.List = CommandMenuList\nCommandMenu.Section = CommandMenuSection\nCommandMenu.Separator = CommandMenuSeparator\nCommandMenu.Description = CommandMenuDescription\n\nexport { CommandMenu }\n",
    "type": "ui"
  },
  "toast": {
    "component": "@/components/ui/toast",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { useTheme } from '@/components/theme-provider'\nimport { IconCheck, IconCircleInfoFill, IconTriangleInfoFill } from 'justd-icons'\nimport { Toaster as ToasterPrimitive, type ToasterProps } from 'sonner'\nimport { twJoin } from 'tailwind-merge'\n\nimport { buttonStyles } from './button'\nimport { Loader } from './loader'\n\nconst Toast = ({ ...props }: ToasterProps) => {\n  const { theme = 'system' } = useTheme()\n  return (\n    <ToasterPrimitive\n      theme={theme as ToasterProps['theme']}\n      className=\"toaster group\"\n      icons={{\n        info: <IconCircleInfoFill />,\n        success: <IconCheck />,\n        warning: <IconTriangleInfoFill />,\n        error: <IconTriangleInfoFill />,\n        loading: <Loader variant=\"spin\" />\n      }}\n      toastOptions={{\n        unstyled: true,\n        closeButton: true,\n        classNames: {\n          toast: twJoin(\n            'bg-background ring-1 ring-border dark:ring-inset sm:min-w-[22rem] rounded-xl text-fg overflow-hidden text-[0.925rem] backdrop-blur-xl px-4 py-3 font-normal sm:px-5 sm:py-5',\n            '[&:has([data-icon])_[data-content]]:ml-5',\n            '[&:has([data-button])_[data-close-button=\"true\"]]:hidden',\n            '[&:not([data-description])_[data-title]]:font-normal',\n            '[&:has([data-description])_[data-title]]:!font-medium [&:has([data-description])_[data-title]]:!text-lg',\n            '[&>[data-button]]:absolute [&>[data-button=true]]:bottom-4',\n            '[&>[data-action=true]]:right-4',\n            '[&>[data-cancel=true]]:left-4'\n          ),\n          icon: 'absolute top-[1.50rem]',\n          content: '[&:not(:has(+button))]:pr-10 [&:has(+button)]:pb-11 md:[&:has(+button)]:pb-9',\n          error:\n            'bg-danger text-white ring-white/10 text-danger-fg dark:ring-inset [&>[data-close-button=true]>svg]:text-white [&>[data-close-button=true]:hover]:bg-white/20',\n          info: 'bg-lime-600 ring-white/10 text-lime-50 dark:ring-inset [&>[data-close-button=true]>svg]:text-white [&>[data-close-button=true]:hover]:bg-white/20',\n          warning:\n            'bg-warning text-warning-fg ring-white/10 dark:ring-inset [&>[data-close-button=true]>svg]:text-amber-950 [&>[data-close-button=true]:hover]:bg-white/20',\n          success:\n            'bg-primary text-white ring-white/10 text-primary-fg dark:ring-inset [&>[data-close-button=true]>svg]:text-white [&>[data-close-button=true]:hover]:bg-white/20',\n          cancelButton: buttonStyles({\n            className: '',\n            size: 'extra-small',\n            appearance: 'outline'\n          }),\n          actionButton: buttonStyles({\n            className: 'self-end justify-self-end',\n            size: 'extra-small'\n          }),\n          closeButton:\n            '[&_svg]:size-5 size-8 absolute top-1/2 transform -translate-y-1/2 right-2 lg:right-3 left-auto grid place-content-center rounded-md hover:bg-black/20 dark:hover:bg-white/20 border-0 [&_svg]:text-fg'\n        }\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toast }\n",
    "type": "ui"
  },
  "checkbox": {
    "component": "@/components/ui/checkbox",
    "raw": "'use client'\n\nimport * as React from 'react'\nimport { type ReactNode } from 'react'\n\nimport { IconCheck, IconMinus } from 'justd-icons'\nimport {\n  Checkbox as CheckboxPrimitive,\n  CheckboxGroup as CheckboxGroupPrimitive,\n  type CheckboxGroupProps as CheckboxGroupPrimitiveProps,\n  type CheckboxProps as CheckboxPrimitiveProps,\n  composeRenderProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\nimport { ctr } from './primitive'\n\ninterface CheckboxGroupProps extends Omit<CheckboxGroupPrimitiveProps, 'children'> {\n  label?: string\n  children?: ReactNode\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst CheckboxGroup = (props: CheckboxGroupProps) => {\n  return (\n    <CheckboxGroupPrimitive {...props} className={ctr(props.className, 'flex flex-col gap-2')}>\n      <Label>{props.label}</Label>\n      <>{props.children}</>\n      {props.description && <Description className=\"block\">{props.description}</Description>}\n      <FieldError>{props.errorMessage}</FieldError>\n    </CheckboxGroupPrimitive>\n  )\n}\n\nconst checkboxStyles = tv({\n  base: 'racc group flex items-center gap-2 text-sm transition',\n  variants: {\n    isDisabled: {\n      false: 'opacity-100',\n      true: 'opacity-50'\n    }\n  }\n})\n\nconst boxStyles = tv({\n  base: 'flex size-4 [&>[data-slot=icon]]:size-3 flex-shrink-0 items-center justify-center rounded border text-background transition',\n  variants: {\n    isSelected: {\n      false: 'border-toggle bg-secondary',\n      true: [\n        'border-primary/70 bg-primary text-primary-fg',\n        'group-invalid:border-danger/70 group-invalid:bg-danger group-invalid:text-danger-fg'\n      ]\n    },\n    isFocused: {\n      true: [\n        'border-primary/70 ring-4 ring-primary/20',\n        'group-invalid:border-danger/70 group-invalid:text-danger-fg group-invalid:ring-danger/20'\n      ]\n    },\n    isInvalid: {\n      true: 'border-danger/70 bg-danger/20 text-danger-fg ring-danger/20'\n    }\n  }\n})\n\ninterface CheckboxProps extends CheckboxPrimitiveProps {\n  description?: string\n  label?: string\n}\n\nconst Checkbox = (props: CheckboxProps) => {\n  return (\n    <CheckboxPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        checkboxStyles({ ...renderProps, className })\n      )}\n    >\n      {({ isSelected, isIndeterminate, ...renderProps }) => (\n        <div className=\"flex gap-2\">\n          <div\n            className={boxStyles({\n              isSelected: isSelected || isIndeterminate,\n              className: props.description ? 'mt-1' : 'mt-0.5',\n              ...renderProps\n            })}\n          >\n            {isIndeterminate ? <IconMinus /> : isSelected ? <IconCheck /> : null}\n          </div>\n\n          <div className=\"flex flex-col gap-1\">\n            <>\n              {props.label ? <Label>{props.label}</Label> : props.children}\n              {props.description && <Description>{props.description}</Description>}\n            </>\n          </div>\n        </div>\n      )}\n    </CheckboxPrimitive>\n  )\n}\n\nexport { Checkbox, CheckboxGroup }\n",
    "type": "ui"
  },
  "select": {
    "component": "@/components/ui/select",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport type { Placement } from '@react-types/overlays'\nimport { IconChevronLgDown } from 'justd-icons'\nimport type { ButtonProps } from 'react-aria-components'\nimport {\n  Button,\n  composeRenderProps,\n  Select as SelectPrimitive,\n  type SelectProps as SelectPrimitiveProps,\n  SelectValue,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DropdownItem, DropdownItemDetails, DropdownSection } from './dropdown'\nimport { Description, FieldError, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\nimport { ctr, focusStyles } from './primitive'\n\nconst selectTriggerStyles = tv({\n  extend: focusStyles,\n  base: [\n    'btr group-disabled:bg-secondary [&_[data-slot=icon]]:size-4 group-disabled:opacity-50 focus-visible:border-primary focus-visible:ring-4 focus-visible:ring-primary/20 group-open:border-primary group-open:ring-4 group-open:ring-primary/20 flex h-10 w-full cursor-default items-center gap-4 rounded-lg border border-input bg-background py-2 pl-3 pr-2 text-start shadow-[inset_0_1px_0_0_rgba(255,255,255,0.1)] transition dark:shadow-none'\n  ],\n  variants: {\n    isDisabled: {\n      false:\n        'text-fg group-invalid:border-danger group-invalid:ring-danger/20 forced-colors:group-invalid:border-[Mark]',\n      true: 'bg-secondary text-muted-fg forced-colors:border-[GrayText] forced-colors:text-[GrayText]'\n    }\n  }\n})\n\ninterface SelectProps<T extends object> extends SelectPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  items?: Iterable<T>\n  className?: string\n}\n\nconst Select = <T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  className,\n  ...props\n}: SelectProps<T>) => {\n  return (\n    <SelectPrimitive {...props} className={ctr(className, 'group flex w-full flex-col gap-1')}>\n      {label && <Label>{label}</Label>}\n      <>{children}</>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </SelectPrimitive>\n  )\n}\n\ninterface SelectListProps<T extends object> {\n  items?: Iterable<T>\n  placement?: Placement\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n  className?: string\n}\n\nconst SelectList = <T extends object>({\n  className,\n  children,\n  items,\n  placement\n}: SelectListProps<T>) => {\n  return (\n    <Popover.Picker className={className} trigger=\"Select\" placement={placement}>\n      <ListBox.Picker aria-label=\"items\" items={items}>\n        {children}\n      </ListBox.Picker>\n    </Popover.Picker>\n  )\n}\n\ninterface SelectTriggerProps extends ButtonProps {\n  prefix?: React.ReactNode\n  className?: string\n}\n\nconst SelectTrigger = ({ className, ...props }: SelectTriggerProps) => {\n  return (\n    <Button\n      className={composeRenderProps(className, (className, renderProps) =>\n        selectTriggerStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      {props.prefix && <span className=\"-mr-1\">{props.prefix}</span>}\n      <SelectValue className=\"flex-1 [&_[slot=description]]:hidden text-base placeholder-shown:text-muted-fg lg:text-sm\" />\n      <IconChevronLgDown\n        aria-hidden\n        className=\"text-muted-fg duration-300 group-open:rotate-180 group-open:text-fg group-disabled:opacity-50 forced-colors:text-[ButtonText] forced-colors:group-disabled:text-[GrayText]\"\n      />\n    </Button>\n  )\n}\n\nSelect.OptionDetails = DropdownItemDetails\nSelect.Option = DropdownItem\nSelect.Section = DropdownSection\nSelect.Trigger = SelectTrigger\nSelect.List = SelectList\n\nexport { Select }\n",
    "type": "ui"
  },
  "textarea": {
    "component": "@/components/ui/textarea",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  composeRenderProps,\n  TextArea as TextAreaPrimitive,\n  TextField as TextFieldPrimitive,\n  type TextFieldProps as TextFieldPrimitiveProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\nimport { ctr, focusStyles } from './primitive'\n\nconst textareaStyles = tv({\n  extend: focusStyles,\n  base: 'w-full min-w-0 rounded-md border border-input bg-background px-2.5 py-2 text-base shadow-sm outline-none transition duration-200 disabled:bg-secondary disabled:opacity-50 sm:text-sm'\n})\n\ninterface TextareaProps extends TextFieldPrimitiveProps {\n  autoSize?: boolean\n  label?: string\n  placeholder?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  className?: string\n}\n\nconst Textarea = ({\n  className,\n  placeholder,\n  label,\n  description,\n  errorMessage,\n  ...props\n}: TextareaProps) => {\n  return (\n    <TextFieldPrimitive {...props} className={ctr(className, 'group flex flex-col gap-1')}>\n      {label && <Label>{label}</Label>}\n      <TextAreaPrimitive\n        placeholder={placeholder}\n        className={composeRenderProps(className, (className, renderProps) =>\n          textareaStyles({\n            ...renderProps,\n            className\n          })\n        )}\n      />\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </TextFieldPrimitive>\n  )\n}\n\nexport { Textarea, type TextareaProps }\n",
    "type": "ui"
  },
  "loading-dots": {
    "component": "@/components/ui/loading-dots",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from './primitive'\n\nconst dots = 'mx-[1px] inline-block size-[0.3125rem] animate-blink rounded-md'\n\nexport const LoadingDots = ({ className }: { className: string }) => {\n  return (\n    <span className=\"mx-2 inline-flex items-center\">\n      <span className={cn(dots, className)} />\n      <span className={cn(dots, 'animation-delay-[200ms]', className)} />\n      <span className={cn(dots, 'animation-delay-[400ms]', className)} />\n    </span>\n  )\n}\n",
    "type": "ui"
  },
  "skeleton": {
    "component": "@/components/ui/skeleton",
    "raw": "import React from 'react'\n\nimport { tv } from 'tailwind-variants'\n\nconst skeletonStyles = tv({\n  base: 'animate-pulse shrink-0',\n  variants: {\n    intent: {\n      muted: 'bg-fg/20',\n      lighter: 'bg-fg/15'\n    },\n    shape: {\n      circle: 'rounded-full',\n      square: 'rounded-lg'\n    }\n  },\n  defaultVariants: {\n    intent: 'muted',\n    shape: 'square'\n  }\n})\n\ninterface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {\n  intent?: 'muted' | 'lighter'\n  shape?: 'circle' | 'square'\n}\nconst Skeleton = ({ shape, intent, className, ...props }: SkeletonProps) => {\n  return <div className={skeletonStyles({ shape, intent, className })} {...props} />\n}\n\nexport { Skeleton }\n",
    "type": "ui"
  },
  "context-menu": {
    "component": "@/components/ui/context-menu",
    "raw": "'use client'\n\nimport React, { useRef, useState } from 'react'\n\nimport { tv } from 'tailwind-variants'\n\nimport type { MenuContentProps } from './menu'\nimport { Menu } from './menu'\nimport { focusButtonStyles } from './primitive'\n\ninterface ContextMenuTriggerContextType {\n  buttonRef: React.RefObject<HTMLButtonElement>\n  contextMenuOffset: { offset: number; crossOffset: number } | null\n  setContextMenuOffset: React.Dispatch<\n    React.SetStateAction<{ offset: number; crossOffset: number } | null>\n  >\n}\n\nconst ContextMenuTriggerContext = React.createContext<ContextMenuTriggerContextType | undefined>(\n  undefined\n)\n\nconst useContextMenuTrigger = () => {\n  const context = React.useContext(ContextMenuTriggerContext)\n  if (!context) {\n    throw new Error('useContextMenuTrigger must be used within a ContextMenuTrigger')\n  }\n  return context\n}\n\ninterface ContextMenuRootComponent {\n  children: React.ReactNode\n}\n\nconst ContextMenu = ({ children }: ContextMenuRootComponent) => {\n  const [contextMenuOffset, setContextMenuOffset] = useState<{\n    offset: number\n    crossOffset: number\n  } | null>(null)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n\n  return (\n    <ContextMenuTriggerContext.Provider\n      value={{ buttonRef, contextMenuOffset, setContextMenuOffset }}\n    >\n      {children}\n    </ContextMenuTriggerContext.Provider>\n  )\n}\n\nconst contextMenuTriggerStyles = tv({\n  extend: focusButtonStyles,\n  base: 'focus:outline-none cursor-default',\n  variants: {\n    isDisabled: {\n      false: 'forced-colors:disabled:text-[GrayText]',\n      true: 'cursor-default opacity-60 forced-colors:disabled:text-[GrayText]'\n    }\n  }\n})\n\ninterface ContextMenuTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {}\n\nconst ContextMenuTrigger = ({ className, ...props }: ContextMenuTriggerProps) => {\n  const { buttonRef, setContextMenuOffset } = useContextMenuTrigger()\n\n  const onContextMenu = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n    const rect = e.currentTarget.getBoundingClientRect()\n    setContextMenuOffset({\n      offset: e.clientY - rect.bottom,\n      crossOffset: e.clientX - rect.left\n    })\n  }\n  return (\n    <button\n      className={contextMenuTriggerStyles({ isDisabled: props.disabled, className })}\n      ref={buttonRef}\n      aria-haspopup=\"menu\"\n      onContextMenu={onContextMenu}\n      {...props}\n    />\n  )\n}\n\ninterface ContextMenuContentProps<T>\n  extends Omit<\n    MenuContentProps<T>,\n    'showArrow' | 'isOpen' | 'onOpenChange' | 'triggerRef' | 'placement' | 'shouldFlip'\n  > {}\n\nconst ContextMenuContent = <T extends object>(props: ContextMenuContentProps<T>) => {\n  const { contextMenuOffset, setContextMenuOffset, buttonRef } = useContextMenuTrigger()\n  return contextMenuOffset ? (\n    <Menu.Content\n      isOpen={!!contextMenuOffset}\n      onOpenChange={() => setContextMenuOffset(null)}\n      triggerRef={buttonRef}\n      shouldFlip={false}\n      placement=\"bottom left\"\n      offset={contextMenuOffset?.offset}\n      crossOffset={contextMenuOffset?.crossOffset}\n      onClose={() => setContextMenuOffset(null)}\n      {...props}\n    />\n  ) : null\n}\n\nContextMenu.Trigger = ContextMenuTrigger\nContextMenu.Content = ContextMenuContent\nContextMenu.Item = Menu.Item\nContextMenu.Separator = Menu.Separator\nContextMenu.ItemDetails = Menu.ItemDetails\nContextMenu.Section = Menu.Section\nContextMenu.Header = Menu.Header\nContextMenu.Keyboard = Menu.Keyboard\n\nexport { ContextMenu }\n",
    "type": "ui"
  },
  "color-field": {
    "component": "@/components/ui/color-field",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { ctr } from '@/components/ui/primitive'\nimport type {\n  ColorFieldProps as ColorFieldPrimitiveProps,\n  ValidationResult\n} from 'react-aria-components'\nimport { ColorField as ColorFieldPrimitive } from 'react-aria-components'\n\nimport { ColorSwatch } from './color'\nimport { ColorPicker } from './color-picker'\nimport { Description, FieldError, FieldGroup, fieldGroupPrefixStyles, Input, Label } from './field'\n\ninterface ColorFieldProps extends ColorFieldPrimitiveProps {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  placeholder?: string\n  prefix?: React.ReactNode\n  suffix?: React.ReactNode\n  isLoading?: boolean\n  enableColorPicker?: boolean\n}\n\nconst ColorField = ({\n  label,\n  description,\n  errorMessage,\n  placeholder,\n  prefix,\n  suffix,\n  isLoading,\n  enableColorPicker = true,\n  ...props\n}: ColorFieldProps) => {\n  const value = props.value ?? props.defaultValue\n  return (\n    <ColorFieldPrimitive\n      {...props}\n      aria-label={props['aria-label'] ?? 'Color field'}\n      className={ctr(props.className, 'group w-full flex flex-col gap-1')}\n    >\n      {label && <Label>{label}</Label>}\n      <FieldGroup\n        data-loading={isLoading ? 'true' : undefined}\n        className={fieldGroupPrefixStyles()}\n      >\n        {prefix ? <span className=\"atrs isPfx\">{prefix}</span> : null}\n        <div className=\"flex items-center\">\n          {value && (\n            <span>\n              {enableColorPicker ? (\n                <ColorPicker\n                  enableColorField={false}\n                  onChange={props.onChange}\n                  defaultValue={value}\n                  className=\"size-9 [&_.tcf]:size-9\"\n                  trigger=\"color-field\"\n                />\n              ) : (\n                <ColorSwatch className=\"size-6 ml-2\" color={value.toString()} />\n              )}\n            </span>\n          )}\n\n          <Input className=\"px-2.5\" placeholder={placeholder} />\n        </div>\n        {suffix ? <span className=\"atrs ml-auto isSfx\">{suffix}</span> : null}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </ColorFieldPrimitive>\n  )\n}\n\nexport { ColorField }\n",
    "type": "ui"
  },
  "form": {
    "component": "@/components/ui/form",
    "raw": "'use client'\n\nimport type { FormProps as FormPrimitiveProps } from 'react-aria-components'\nimport { Form as FormPrimitive } from 'react-aria-components'\n\ninterface FormProps extends FormPrimitiveProps {}\n\nconst Form = (props: FormProps) => {\n  return <FormPrimitive {...props} />\n}\n\nexport { Form, type FormProps }\n",
    "type": "ui"
  },
  "carousel": {
    "component": "@/components/ui/carousel",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react'\nimport { IconChevronLgLeft, IconChevronLgRight } from 'justd-icons'\nimport type { ListBoxItemProps, SectionProps } from 'react-aria-components'\nimport { ListBox, ListBoxItem, Section } from 'react-aria-components'\n\nimport type { ButtonProps } from './button'\nimport { Button } from './button'\nimport { cn } from './primitive'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nconst useCarousel = () => {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />')\n  }\n\n  return context\n}\n\ninterface CarouselRootProps {\n  CarouselContent?: typeof CarouselContent\n  CarouselHandler?: typeof CarouselHandler\n  CarouselItem?: typeof CarouselItem\n  CarouselButton?: typeof CarouselButton\n}\n\ninterface CarouselProps extends React.HTMLAttributes<HTMLDivElement>, CarouselRootProps {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: 'horizontal' | 'vertical'\n  setApi?: (api: CarouselApi) => void\n}\n\nconst Carousel = ({\n  orientation = 'horizontal',\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: CarouselProps) => {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y'\n    },\n    plugins\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) {\n      return\n    }\n\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext]\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) {\n      return\n    }\n\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    onSelect(api)\n    api.on('reInit', onSelect)\n    api.on('select', onSelect)\n\n    return () => {\n      api?.off('select', onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn('relative', className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nconst CarouselContent = <T extends object>({ className, ...props }: SectionProps<T>) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <ListBox\n      layout={orientation === 'vertical' ? 'stack' : 'grid'}\n      aria-label=\"Slides\"\n      orientation={orientation}\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n    >\n      <Section\n        className={cn('flex', orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col', className)}\n        {...props}\n      />\n    </ListBox>\n  )\n}\n\nconst CarouselItem = ({ className, ...props }: ListBoxItemProps) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <ListBoxItem\n      aria-label={`Slide ${props.id}`}\n      aria-roledescription=\"slide\"\n      className={cn(\n        'min-w-0 xd24r shrink-0 focus:outline-none grow-0 basis-full focus-visible:outline-none',\n        orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nconst CarouselHandler = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { orientation } = useCarousel()\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'mt-6 z-20 relative flex items-center gap-x-2',\n          orientation === 'horizontal' ? 'justify-end' : 'justify-center',\n          className\n        )}\n        {...props}\n      />\n    )\n  }\n)\nCarouselHandler.displayName = 'CarouselHandler'\n\nconst CarouselButton = ({\n  slot,\n  className,\n  intent = 'secondary',\n  appearance = 'outline',\n  shape = 'circle',\n  size = 'square-petite',\n  ...props\n}: ButtonProps & { slot: 'previous' | 'next' }) => {\n  const { orientation, scrollPrev, canScrollPrev, scrollNext, canScrollNext } = useCarousel()\n  const isNext = slot === 'next'\n  const canScroll = isNext ? canScrollNext : canScrollPrev\n  const scroll = isNext ? scrollNext : scrollPrev\n  const Icon = isNext ? IconChevronLgRight : IconChevronLgLeft\n\n  return (\n    <Button\n      aria-label={isNext ? 'Next slide' : 'Previous slide'}\n      slot={slot}\n      intent={intent}\n      appearance={appearance}\n      size={size}\n      shape={shape}\n      className={cn(orientation === 'vertical' ? 'rotate-90' : '', className)}\n      isDisabled={!canScroll}\n      onPress={scroll}\n      {...props}\n    >\n      <Icon className=\"size-4\" />\n    </Button>\n  )\n}\n\nCarousel.Content = CarouselContent\nCarousel.Handler = CarouselHandler\nCarousel.Item = CarouselItem\nCarousel.Button = CarouselButton\n\nexport { Carousel, type CarouselApi }\n",
    "type": "ui"
  }
}